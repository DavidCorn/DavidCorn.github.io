{"meta":{"version":1,"warehouse":"3.0.1"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/robots.txt","path":"robots.txt","modified":0,"renderable":0},{"_id":"source/images/circuit_breaker.png","path":"images/circuit_breaker.png","modified":0,"renderable":0},{"_id":"source/images/leaky_bucket.jpeg","path":"images/leaky_bucket.jpeg","modified":0,"renderable":0},{"_id":"source/images/mpg_scheduler.jpg","path":"images/mpg_scheduler.jpg","modified":0,"renderable":0},{"_id":"source/images/rate_limiter.png","path":"images/rate_limiter.png","modified":0,"renderable":0},{"_id":"source/images/syscall.jpg","path":"images/syscall.jpg","modified":0,"renderable":0},{"_id":"source/images/token_bucket.gif","path":"images/token_bucket.gif","modified":0,"renderable":0},{"_id":"source/images/sliding_window.jpeg","path":"images/sliding_window.jpeg","modified":0,"renderable":0},{"_id":"source/images/wechatpay.jpg","path":"images/wechatpay.jpg","modified":0,"renderable":0},{"_id":"source/images/adaptive_lifo.png","path":"images/adaptive_lifo.png","modified":0,"renderable":0},{"_id":"source/images/async_syscall.png","path":"images/async_syscall.png","modified":0,"renderable":0},{"_id":"source/images/scheduler_concepts.png","path":"images/scheduler_concepts.png","modified":0,"renderable":0},{"_id":"themes/Butterfly/source/css/index.styl","path":"css/index.styl","modified":0,"renderable":1},{"_id":"themes/Butterfly/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/Butterfly/source/js/runtimeshow.js","path":"js/runtimeshow.js","modified":0,"renderable":1},{"_id":"themes/Butterfly/source/css/var.styl","path":"css/var.styl","modified":0,"renderable":1},{"_id":"themes/Butterfly/source/js/baidupush.js","path":"js/baidupush.js","modified":0,"renderable":1},{"_id":"themes/Butterfly/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/Butterfly/source/js/tw_cn.js","path":"js/tw_cn.js","modified":0,"renderable":1},{"_id":"themes/Butterfly/source/img/algolia.svg","path":"img/algolia.svg","modified":0,"renderable":1},{"_id":"themes/Butterfly/source/img/404.jpg","path":"img/404.jpg","modified":0,"renderable":1},{"_id":"themes/Butterfly/source/img/favicon.ico","path":"img/favicon.ico","modified":0,"renderable":1},{"_id":"themes/Butterfly/source/img/comment_bg.png","path":"img/comment_bg.png","modified":0,"renderable":1},{"_id":"themes/Butterfly/source/img/post_loadding.svg","path":"img/post_loadding.svg","modified":0,"renderable":1},{"_id":"themes/Butterfly/source/img/icp.png","path":"img/icp.png","modified":0,"renderable":1},{"_id":"themes/Butterfly/source/img/friend_404.gif","path":"img/friend_404.gif","modified":0,"renderable":1},{"_id":"themes/Butterfly/source/js/search/local-search.js","path":"js/search/local-search.js","modified":0,"renderable":1},{"_id":"themes/Butterfly/source/js/search/algolia.js","path":"js/search/algolia.js","modified":0,"renderable":1},{"_id":"themes/Butterfly/source/js/third-party/ClickShowText.js","path":"js/third-party/ClickShowText.js","modified":0,"renderable":1},{"_id":"themes/Butterfly/source/js/third-party/activate-power-mode.js","path":"js/third-party/activate-power-mode.js","modified":0,"renderable":1},{"_id":"themes/Butterfly/source/js/third-party/canvas-nest.js","path":"js/third-party/canvas-nest.js","modified":0,"renderable":1},{"_id":"themes/Butterfly/source/js/third-party/anime.min.js","path":"js/third-party/anime.min.js","modified":0,"renderable":1},{"_id":"themes/Butterfly/source/js/third-party/canvas-ribbon.js","path":"js/third-party/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/Butterfly/source/js/third-party/click_heart.js","path":"js/third-party/click_heart.js","modified":0,"renderable":1},{"_id":"themes/Butterfly/source/js/third-party/fireworks.js","path":"js/third-party/fireworks.js","modified":0,"renderable":1},{"_id":"themes/Butterfly/source/js/third-party/piao.js","path":"js/third-party/piao.js","modified":0,"renderable":1},{"_id":"themes/Butterfly/source/js/third-party/jquery.fancybox.min.js","path":"js/third-party/jquery.fancybox.min.js","modified":0,"renderable":1},{"_id":"themes/Butterfly/source/js/third-party/jquery.min.js","path":"js/third-party/jquery.min.js","modified":0,"renderable":1},{"_id":"source/images/avatar.png","path":"images/avatar.png","modified":0,"renderable":0},{"_id":"themes/Butterfly/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"source/images/load_shedding.png","path":"images/load_shedding.png","modified":0,"renderable":0},{"_id":"source/images/hive_arch.png","path":"images/hive_arch.png","modified":0,"renderable":0},{"_id":"source/images/hive_data_model.png","path":"images/hive_data_model.png","modified":0,"renderable":0},{"_id":"source/images/apache_hive_icon.png","path":"images/apache_hive_icon.png","modified":0,"renderable":0},{"_id":"source/images/lvmaoshuiguai.JPG","path":"images/lvmaoshuiguai.JPG","modified":0,"renderable":0},{"_id":"source/images/duras.jpg","path":"images/duras.jpg","modified":0,"renderable":0},{"_id":"source/images/liulizhuang.png","path":"images/liulizhuang.png","modified":0,"renderable":0}],"Cache":[{"_id":"source/CNAME","hash":"4d7851ef7a0d0ba790d03c1d21c674a0aac00707","modified":1576481825841},{"_id":"source/.DS_Store","hash":"8c0098181929b51f3dbba3494c8ea07e2eff9c63","modified":1582101335378},{"_id":"source/robots.txt","hash":"e1fade29c2e843828b371b146cc04c9254e3d025","modified":1577350191384},{"_id":"themes/Butterfly/README.md","hash":"cc28f3b9c9543872f9dd9c26c80518d79d4d993c","modified":1576199115769},{"_id":"themes/Butterfly/_config.yml","hash":"ad78cda9f23285cfd0d533fb8f533a046807e74f","modified":1576199115770},{"_id":"themes/Butterfly/LICENSE","hash":"c372b56b7553dafd2d8a8abf12d0dd71b4e2bfc0","modified":1576199115769},{"_id":"themes/Butterfly/package.json","hash":"bb2c0eaf4ef276de6cd0d343a3639b32d9e690e5","modified":1576199115781},{"_id":"source/_data/butterfly.yml","hash":"f3fc3667d5b848af7f1323cf30abfe71a8b0707c","modified":1577349327817},{"_id":"source/_posts/.DS_Store","hash":"e09eff6d39985c5b80c898011184486d06b54602","modified":1576481450602},{"_id":"source/_posts/Golang调度器原理解析.md","hash":"68969681acebef602a3a8ee0aa134364bd965184","modified":1577323977018},{"_id":"source/_posts/高并发系统的降级处理——减载.md","hash":"33d2d58e4b8488ae6cc13995379b90589073b105","modified":1577248588197},{"_id":"source/_posts/高并发系统的降级处理——熔断.md","hash":"0430e93739cca2a34199a3ad5538f8016e700ed6","modified":1577316869462},{"_id":"source/about/index.md","hash":"8ed6474949c969ad43950d4d8bfeb447152c7246","modified":1576481450603},{"_id":"source/categories/index.md","hash":"416fa9e3d1d74d3a228ec99327da38defb9c5cbc","modified":1576481450604},{"_id":"source/images/.DS_Store","hash":"afe3a7f93c92010a40597bb9f81e02219cd8936c","modified":1577323945541},{"_id":"source/images/circuit_breaker.png","hash":"f5912e355ce7359f7e307e1b83e08b6139e6b766","modified":1576481450607},{"_id":"source/images/leaky_bucket.jpeg","hash":"4568d4a7c4ff820acf9511128f6dddfc08728136","modified":1576481450607},{"_id":"source/_posts/高并发系统的降级处理——限流.md","hash":"70ff9e384c6b2c7d9d037baef52e2df5df08435b","modified":1577248710288},{"_id":"source/images/mpg_scheduler.jpg","hash":"21ab4f451345f0407b17b3486901f708ff0c37f2","modified":1577319419830},{"_id":"source/images/rate_limiter.png","hash":"cd055114dff18f7ab797bd577aeff73ac03afa1d","modified":1576481450607},{"_id":"source/images/syscall.jpg","hash":"2e276fca5fda66e4e8c5237212d614b9964bdc97","modified":1577321559594},{"_id":"source/images/token_bucket.gif","hash":"743b294d9484d41bfe18971e0be80ba7e6f87781","modified":1576481450608},{"_id":"source/tags/index.md","hash":"593d3ae5ff3418e0d7fb921326c6b6e0a58be3db","modified":1576481450609},{"_id":"source/images/sliding_window.jpeg","hash":"ba23065b7cb7bb040b5c91d955e9beed8279c384","modified":1576481450608},{"_id":"source/images/wechatpay.jpg","hash":"fd7d54a5f6f47d03d8933a893539ce5c872a8d5b","modified":1576481450609},{"_id":"themes/Butterfly/languages/default.yml","hash":"1a990cc62b7b8072122342778270f68b721e99d6","modified":1576199115770},{"_id":"themes/Butterfly/.github/ISSUE_TEMPLATE.md","hash":"6f7e5583ca1a141cd847a117715454175adfb61f","modified":1576199115768},{"_id":"source/images/adaptive_lifo.png","hash":"5a60c9b26959df70ae5650d390b5989cb50e997d","modified":1576823987288},{"_id":"themes/Butterfly/languages/en.yml","hash":"6bf2ae27e861889b2b55c443e624889f3efbb668","modified":1576199115771},{"_id":"themes/Butterfly/languages/zh-CN.yml","hash":"0453c3d86a49436ec30c9e6e45d3d909ab15e4f8","modified":1576199115771},{"_id":"themes/Butterfly/languages/zh-TW.yml","hash":"cd5b8be3bbf8368e69e6d83099547c54ac671307","modified":1576199115771},{"_id":"themes/Butterfly/layout/archive.pug","hash":"2a8b01d66fb0c1f4eed0cec831e356acfde1b4e7","modified":1576199115771},{"_id":"themes/Butterfly/layout/category.pug","hash":"42b9f24c6d8d7832338f67536456933126daf8e0","modified":1576199115771},{"_id":"themes/Butterfly/layout/flink.pug","hash":"b04fe6039a06c621f87d54f650fd9a5dd9a7b697","modified":1576199115771},{"_id":"themes/Butterfly/layout/index.pug","hash":"a027cfd8f61e29a623ed8ba977032f165812d9b0","modified":1576199115780},{"_id":"themes/Butterfly/layout/page.pug","hash":"dc2c6fcaf21d6e6036c6ada5f8147853305886f6","modified":1576199115780},{"_id":"themes/Butterfly/layout/post.pug","hash":"4beb74df95f0e6965433f4d8a707ea2b3f2e59ea","modified":1576199115781},{"_id":"themes/Butterfly/layout/tag.pug","hash":"dfac75e6a8cb8ed3abfeb12f40944cb8e42f1328","modified":1576199115781},{"_id":"themes/Butterfly/scripts/gallery-tag.js","hash":"b9e7fe3e36336bec0e9dad7243456ac98ba63984","modified":1576199115781},{"_id":"themes/Butterfly/scripts/list_archives.js","hash":"099f49e5dd15c622fb24a96af9a20102cb05a205","modified":1576199115781},{"_id":"themes/Butterfly/scripts/note.js","hash":"03d608278de2dc9c6b2af69e8d36c77c0272e2bf","modified":1576199115781},{"_id":"themes/Butterfly/scripts/post-lazyload.js","hash":"4e773c705f5b7f5f7d1f6cca875a0a1817d028de","modified":1576199115782},{"_id":"themes/Butterfly/scripts/random_cover.js","hash":"81d1d2ebc4b5022d701182a98383969715f7ca53","modified":1576199115782},{"_id":"themes/Butterfly/scripts/related_post.js","hash":"8641947fdd1d4aecc980423600c293d07221079f","modified":1576199115783},{"_id":"themes/Butterfly/scripts/replace-config.js","hash":"4acb5a4519e1b5a29c23c83d1f70c1e298931e30","modified":1576199115783},{"_id":"themes/Butterfly/scripts/url_check.js","hash":"f3b533517dc5fc6d49dd34103f1ad91dcd6d0e87","modified":1576199115783},{"_id":"source/images/async_syscall.png","hash":"a03fe89dfc5e5ae4f5847d3d3f7e1795d5d2aeb2","modified":1577321834129},{"_id":"source/images/scheduler_concepts.png","hash":"7dc66a7e5264a9d971b90725f08d03b0bde8cd71","modified":1577323918513},{"_id":"themes/Butterfly/layout/includes/additional-js.pug","hash":"080a9688f97677512876c3b237d0aa4b6ef25638","modified":1576199115772},{"_id":"themes/Butterfly/layout/includes/aside.pug","hash":"6e421ec7964024f1e3ad10cb00d3808dc33c6c72","modified":1576199115772},{"_id":"themes/Butterfly/layout/includes/config.pug","hash":"0af86870edbb27dd13f572c6df7ceb5a183eec18","modified":1576199115773},{"_id":"themes/Butterfly/layout/includes/darkmode.pug","hash":"6e45c4dd45ed8037948639e30947886aff186f8b","modified":1576199115773},{"_id":"themes/Butterfly/layout/includes/footer.pug","hash":"2c099f1321bf5c8c8d6b4815a2f9e4f7e36dcd79","modified":1576199115773},{"_id":"themes/Butterfly/layout/includes/head.pug","hash":"6e99eec5b24fdc9833e6a1a9491136bb5440d9ea","modified":1576199115774},{"_id":"themes/Butterfly/layout/includes/header.pug","hash":"554fd01ed2e8bba4484b3c41918163766a6a9063","modified":1576199115774},{"_id":"themes/Butterfly/layout/includes/index-js.pug","hash":"ff80a1e6328db5c7202375752bf6cb3a4da8f5bb","modified":1576199115774},{"_id":"themes/Butterfly/layout/includes/layout.pug","hash":"df17fc6020dd2d384fc35ded6ae994f2382e0222","modified":1576199115774},{"_id":"themes/Butterfly/layout/includes/menu_item.pug","hash":"79d7cc492c00aecaffa262f9fc85d6960fcc1a15","modified":1576199115774},{"_id":"themes/Butterfly/layout/includes/mobile-sidebar.pug","hash":"d248b089e707665036935139a7a69114afd6a108","modified":1576199115775},{"_id":"themes/Butterfly/layout/includes/nav.pug","hash":"9163ac68fd16a1a7dde2544afd877ddf42c1da2c","modified":1576199115775},{"_id":"themes/Butterfly/layout/includes/page_tag.pug","hash":"77806405a67ce97801f5b74adaa4c62f96b05572","modified":1576199115775},{"_id":"themes/Butterfly/layout/includes/pagination.pug","hash":"9513eb607ca27d5f4a1542b9d900368eb0a4b984","modified":1576199115776},{"_id":"themes/Butterfly/layout/includes/recent-posts.pug","hash":"3f71c6d05144c072c132f3442c2d8b43e271c48e","modified":1576199115776},{"_id":"themes/Butterfly/layout/includes/reward.pug","hash":"ca8596e1ac8edff54be56d2996daadd104057e16","modified":1576199115776},{"_id":"themes/Butterfly/layout/includes/rightside.pug","hash":"8382eefaa4cef5b7e198f67d1a33489ec1ed80c8","modified":1576199115776},{"_id":"themes/Butterfly/layout/includes/sidebar.pug","hash":"b076fa6fd08dbcfd743a4f5982f89ad84791573a","modified":1576199115778},{"_id":"themes/Butterfly/source/css/index.styl","hash":"8ab00778fb1f9d688b8bfee50b98273f85769a09","modified":1576199115791},{"_id":"themes/Butterfly/source/js/main.js","hash":"bdcf3232456a179d7e5ce3ca211d10dd8a90513d","modified":1576199115796},{"_id":"themes/Butterfly/source/js/runtimeshow.js","hash":"f686d28d62b6f65de47713a9da70a461a683a45d","modified":1576199115796},{"_id":"themes/Butterfly/source/css/var.styl","hash":"6c67b8c4dcdb74da54acb5eaa9ce67f1db3f3a4a","modified":1576199115791},{"_id":"themes/Butterfly/source/js/baidupush.js","hash":"276a58782b574ec42bf434e4e8bea623437634d4","modified":1576199115796},{"_id":"themes/Butterfly/source/js/utils.js","hash":"95374853ae7293304091e60f87608e659e217abe","modified":1576199115799},{"_id":"themes/Butterfly/source/js/tw_cn.js","hash":"602944743365332d3918c77f678f8ba45a665540","modified":1576199115799},{"_id":"themes/Butterfly/source/img/algolia.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1576199115792},{"_id":"themes/Butterfly/source/img/404.jpg","hash":"8cb144815552af8ca374dda8a11c14f6223cea29","modified":1576199115792},{"_id":"themes/Butterfly/source/img/favicon.ico","hash":"47877628a0f0e0f06430845b0e3a75e0ba1361ce","modified":1576199115794},{"_id":"themes/Butterfly/source/img/comment_bg.png","hash":"dfc93d24081884fbc58cab0f8fd19e77d31d6123","modified":1576199115794},{"_id":"themes/Butterfly/source/img/post_loadding.svg","hash":"549c58cd09dbeefd573ce10646c49ded8bcc48ec","modified":1576199115795},{"_id":"themes/Butterfly/source/img/icp.png","hash":"29c400bc3b89f6085766dac4e0330ded5cb73d52","modified":1576199115795},{"_id":"themes/Butterfly/source/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1576199115795},{"_id":"themes/Butterfly/layout/includes/comments/disqus.pug","hash":"37357152952f1d8f7f9eac390baaae29647e8b69","modified":1576199115772},{"_id":"themes/Butterfly/layout/includes/comments/gitalk.pug","hash":"fde38da051e2e46bafd74ccf8039322ee7cb072c","modified":1576199115772},{"_id":"themes/Butterfly/layout/includes/comments/index.pug","hash":"6e90c1c0862b8a052ff26c67e6d7e7b31f1bd74d","modified":1576199115773},{"_id":"themes/Butterfly/layout/includes/comments/laibili.pug","hash":"97de1d1fb0459e7a2394ac2f5e449adf9b6986cb","modified":1576199115773},{"_id":"themes/Butterfly/layout/includes/comments/valine.pug","hash":"c9bd1dbde21e179678e056236fe93700b2c64bc6","modified":1576199115773},{"_id":"themes/Butterfly/layout/includes/mixins/UI.pug","hash":"06134b88b95d3d68e7d05e51b95de109b7ca45f1","modified":1576199115775},{"_id":"themes/Butterfly/layout/includes/mixins/article-sort.pug","hash":"9909860d04248979313bed53e4979cee1acc99f8","modified":1576199115775},{"_id":"themes/Butterfly/layout/includes/search/algolia.pug","hash":"44d5a061df53a276d22b3855652645d90117d0b6","modified":1576199115776},{"_id":"themes/Butterfly/layout/includes/search/index.pug","hash":"b01828b37d789797aeb5433f1705cff3c540a4d5","modified":1576199115776},{"_id":"themes/Butterfly/layout/includes/search/local-search.pug","hash":"bc3d9694f3f3f3d4d95e8ccadbf6e27a61093c6d","modified":1576199115777},{"_id":"themes/Butterfly/layout/includes/share/add-this.pug","hash":"2980f1889226ca981aa23b8eb1853fde26dcf89a","modified":1576199115777},{"_id":"themes/Butterfly/layout/includes/share/addtoany.pug","hash":"bbf5b70460b17c4fecb9ee6880aa71cdb2d807a8","modified":1576199115777},{"_id":"themes/Butterfly/layout/includes/share/index.pug","hash":"c341aaa00113681b22f945f5004e6b22c8a0ca69","modified":1576199115777},{"_id":"themes/Butterfly/layout/includes/share/share-js.pug","hash":"8ab8fc87104dfe1de8107ec984b35c821813e310","modified":1576199115777},{"_id":"themes/Butterfly/layout/includes/third-party/canvas-nest.pug","hash":"3d7a3654ae03fd2665ea355ee9eac48af0ee82af","modified":1576199115778},{"_id":"themes/Butterfly/layout/includes/third-party/canvas-ribbon-piao.pug","hash":"001f28c633d2ec2d5ef9ca047fb1fe61ffefd66f","modified":1576199115778},{"_id":"themes/Butterfly/layout/includes/third-party/canvas-ribbon.pug","hash":"47892d5cec13b047bd38d1101574d47836bf67e9","modified":1576199115778},{"_id":"themes/Butterfly/layout/includes/third-party/katex.pug","hash":"73356f1068c7426597e268d6c4aefa2b0ac3a1d9","modified":1576199115779},{"_id":"themes/Butterfly/layout/includes/third-party/mathjax.pug","hash":"6ccfaa776fc913ccf8b34825d918ab2b4d457434","modified":1576199115779},{"_id":"themes/Butterfly/layout/includes/widget/card_announcement.pug","hash":"531fde2c1409d638989615e906dea6ac1dd09fab","modified":1576199115779},{"_id":"themes/Butterfly/layout/includes/widget/card_archives.pug","hash":"ddd750cc1655980b4cf30393c84c34101f7f1e0d","modified":1576199115779},{"_id":"themes/Butterfly/layout/includes/widget/card_author.pug","hash":"8b7fe70bcc1da9bf696b78fdc862441cbae04c0c","modified":1576199115779},{"_id":"themes/Butterfly/layout/includes/widget/card_categories.pug","hash":"2ca228a61fba9046e8bf327ac340c50757b4a7d1","modified":1576199115779},{"_id":"themes/Butterfly/layout/includes/widget/card_recent_post.pug","hash":"b74b3e8138e4d3fb816667512f3c7438aa2ffaf6","modified":1576199115779},{"_id":"themes/Butterfly/layout/includes/widget/card_tags.pug","hash":"8ebd3686e9377cc7cc0899ad991eb3dd061aca06","modified":1576199115780},{"_id":"themes/Butterfly/layout/includes/widget/card_webinfo.pug","hash":"30e3dbedbd65b10942df90a21e1f635c852f555c","modified":1576199115780},{"_id":"themes/Butterfly/source/css/_highlight/diff.styl","hash":"b0079f6da761935b720d70dafd826ef62fad86d2","modified":1576199115784},{"_id":"themes/Butterfly/source/css/_global/index.styl","hash":"80b6acc7ba33b2608470b5de5625f7580eba0251","modified":1576199115784},{"_id":"themes/Butterfly/source/css/_layout/category.styl","hash":"f4901636997913ccd8beafc14d9c5eb0d0bedf16","modified":1576199115785},{"_id":"themes/Butterfly/source/css/_layout/aside.styl","hash":"3a28e61810fa7411e4b2e90619675691e1753348","modified":1576199115785},{"_id":"themes/Butterfly/source/css/_layout/comments.styl","hash":"fb2f8277fe8a23701072d69b63055a30ad8a30f3","modified":1576199115786},{"_id":"themes/Butterfly/source/css/_layout/flink.styl","hash":"a08837208f4e95e179fcb3382f518b0ec401e72f","modified":1576199115786},{"_id":"themes/Butterfly/source/css/_layout/footer.styl","hash":"fe00dd1cf2d7c7baa73da8d22269b5706bf37331","modified":1576199115786},{"_id":"themes/Butterfly/source/css/_layout/mobile-sidebar.styl","hash":"0cc4f7231f47268057f3e194daa53eccc0665544","modified":1576199115787},{"_id":"themes/Butterfly/source/css/_layout/head.styl","hash":"23304388d54088242d3df97ba963461f8b093413","modified":1576199115786},{"_id":"themes/Butterfly/source/css/_layout/note.styl","hash":"e897f0df4e0adb4f13f2633cb36c441c3ea31ee2","modified":1576199115788},{"_id":"themes/Butterfly/source/css/_layout/page.styl","hash":"ae57ac6d531b754a38aef16b3bf41ac683a8606a","modified":1576199115788},{"_id":"themes/Butterfly/source/css/_layout/pagination.styl","hash":"cbd9f79941482d137be4e8675ea75494d7fa5a92","modified":1576199115788},{"_id":"themes/Butterfly/source/css/_layout/readmode.styl","hash":"3e4bae0c800207614b7d63cf98b4439795f19e6d","modified":1576199115788},{"_id":"themes/Butterfly/source/css/_layout/post.styl","hash":"e3a19cf539e7de0b60d8b4f5aa9d8c52a6079b1c","modified":1576199115788},{"_id":"themes/Butterfly/source/css/_layout/relatedposts.styl","hash":"12d2dddd3dd330f5aaebd544c08c3669bab8ccc2","modified":1576199115789},{"_id":"themes/Butterfly/source/css/_layout/reward.styl","hash":"b6b58c836118d02d514cf901b49d31d9f0e895b5","modified":1576199115789},{"_id":"themes/Butterfly/source/css/_layout/rightside.styl","hash":"a4be553093aa910a68a3b7924e89889f53e679b5","modified":1576199115789},{"_id":"themes/Butterfly/source/css/_layout/sidebar.styl","hash":"b694f390f071441430179e9e0bf66b59b60c9f28","modified":1576199115789},{"_id":"themes/Butterfly/source/css/_layout/z-darkmode.styl","hash":"ea1eb9d961537c5cce1ee222cc43aa8f5dd06966","modified":1576199115790},{"_id":"themes/Butterfly/source/css/_highlight/highlight.styl","hash":"59235990acf34492f3d611f2623492f72d472e9a","modified":1576199115785},{"_id":"themes/Butterfly/source/css/_highlight/theme.styl","hash":"7d85860927afa1d93b4a39febff3d95a73de4c36","modified":1576199115785},{"_id":"themes/Butterfly/source/css/_third-party/normalize.min.css","hash":"e12eef6d6811c132f4f2fcf6c936be384191bcaf","modified":1576199115791},{"_id":"themes/Butterfly/source/css/_third-party/jquery.fancybox.min.css","hash":"f9c94ec04062a1bfe1ef894c49e6ec33fa121778","modified":1576199115791},{"_id":"themes/Butterfly/source/css/_search/index.styl","hash":"63cae4465ac54b71361c1795206534c7f2e6e5b1","modified":1576199115790},{"_id":"themes/Butterfly/source/css/_search/algolia.styl","hash":"79d6df0b5345b36c03188722da706ad4df137c49","modified":1576199115790},{"_id":"themes/Butterfly/source/css/_search/local-search.styl","hash":"0d082691551dd1d618945bb5029844b293450f47","modified":1576199115790},{"_id":"themes/Butterfly/source/js/search/local-search.js","hash":"70a3e44f5e83cb11f2c1fd5fd4515f5169ef57c7","modified":1576199115796},{"_id":"themes/Butterfly/source/js/search/algolia.js","hash":"09ef14408f98725970886e2851347596673f761e","modified":1576199115796},{"_id":"themes/Butterfly/source/js/third-party/ClickShowText.js","hash":"466a78f63eda0469701881b97560d8b488ef3ea9","modified":1576199115796},{"_id":"themes/Butterfly/source/js/third-party/activate-power-mode.js","hash":"e7ee1a178d613ba6293e4b622ea1b6ae16b0da45","modified":1576199115797},{"_id":"themes/Butterfly/source/js/third-party/canvas-nest.js","hash":"978402a16f3ceebe453806e3e25a5905a89776be","modified":1576199115797},{"_id":"themes/Butterfly/source/js/third-party/anime.min.js","hash":"3c46c9597c721644a515c1c54ab13f46406657f7","modified":1576199115797},{"_id":"themes/Butterfly/source/js/third-party/canvas-ribbon.js","hash":"05fc79ebcf673e2d257583554eef62d162ade5e8","modified":1576199115797},{"_id":"themes/Butterfly/source/js/third-party/click_heart.js","hash":"7d577520a2afbe9a02f2f16455b6fd902ce58c75","modified":1576199115797},{"_id":"themes/Butterfly/source/js/third-party/fireworks.js","hash":"411ced4031a856a5b87f7c62d3800027d12bacec","modified":1576199115797},{"_id":"themes/Butterfly/source/js/third-party/piao.js","hash":"05da3437664bb335e2336a52be8587e7719f7b89","modified":1576199115798},{"_id":"themes/Butterfly/source/js/third-party/jquery.fancybox.min.js","hash":"2ec3ef6c31b971ba5e58eb4a0c5ede902bbdd4af","modified":1576199115798},{"_id":"themes/Butterfly/source/js/third-party/jquery.min.js","hash":"1055018c28ab41087ef9ccefe411606893dabea2","modified":1576199115798},{"_id":"source/images/avatar.png","hash":"f37ece731078fe285b73489c6b5655da7a413c6d","modified":1576481450606},{"_id":"themes/Butterfly/source/img/avatar.png","hash":"dd1a6f2463665a2d3b89329f0fa2cde5ee823a2a","modified":1576199115794},{"_id":"source/images/load_shedding.png","hash":"6d48d60c20a6c84cf808caff231b6d1d8318fb06","modified":1576827669482},{"_id":"public/search.xml","hash":"114862e6f00d2486f67e656a92fcbab240f604e0","modified":1583136025333},{"_id":"public/baidusitemap.xml","hash":"c8ee9f6f974296e64a6c9e1b75c669c66db9d424","modified":1583136025333},{"_id":"public/sitemap.xml","hash":"638a82a996d61db3e01288804a0b17d821489a06","modified":1583136025333},{"_id":"public/about/index.html","hash":"7621887ddb7d0b7964869dfb326d059966c5a56e","modified":1583136025333},{"_id":"public/categories/index.html","hash":"16c53c6dacbfcf5525b44e7e8fba7e800870faa5","modified":1583136025333},{"_id":"public/tags/index.html","hash":"e8abf7239d3ffbbb5d4d6958cb53717393f11783","modified":1583136109082},{"_id":"public/2019/12/25/Golang调度器原理解析/index.html","hash":"c03e04e2bb084f1dec9ef52605a9964556f66eda","modified":1583136025333},{"_id":"public/2019/12/19/高并发系统的降级处理——减载/index.html","hash":"50bbce71e26421d8c60dcbc247d29f292779c8eb","modified":1583136025333},{"_id":"public/2019/12/15/高并发系统的降级处理——熔断/index.html","hash":"43442b612407389a90e8e873dfd09639525164c1","modified":1583136025333},{"_id":"public/2019/12/11/高并发系统的降级处理——限流/index.html","hash":"f035a64d4af23c0f8f54937f1e4af00b39024572","modified":1583136025333},{"_id":"public/categories/编程语言/index.html","hash":"fe1af2cba51fc7eb45701d211e3816913de59e21","modified":1583136025333},{"_id":"public/categories/系统设计/index.html","hash":"21db62a4fa37e5bba3e26dbe3da237ab0190f113","modified":1583136025333},{"_id":"public/index.html","hash":"8e571857f38a84aa777ce696dfbe5cbb8e2803a1","modified":1583136025333},{"_id":"public/tags/高并发/index.html","hash":"3667bcf1dad4df236b1367357a7c99f1a2f3fbe7","modified":1583136025333},{"_id":"public/archives/index.html","hash":"f5503c64fb33d9703e44ebeb9feda6a7d57c1c33","modified":1583136025333},{"_id":"public/archives/2019/index.html","hash":"39104f912469616e6dd6f19d541a5419a0313689","modified":1583136025333},{"_id":"public/archives/2019/12/index.html","hash":"055d3ab31680ac058f4ddf288b29dca6276fce91","modified":1583136025333},{"_id":"public/robots.txt","hash":"e1fade29c2e843828b371b146cc04c9254e3d025","modified":1577350883937},{"_id":"public/CNAME","hash":"4d7851ef7a0d0ba790d03c1d21c674a0aac00707","modified":1577350883937},{"_id":"public/images/circuit_breaker.png","hash":"f5912e355ce7359f7e307e1b83e08b6139e6b766","modified":1577350883937},{"_id":"public/images/leaky_bucket.jpeg","hash":"4568d4a7c4ff820acf9511128f6dddfc08728136","modified":1577350883937},{"_id":"public/images/mpg_scheduler.jpg","hash":"21ab4f451345f0407b17b3486901f708ff0c37f2","modified":1577350883937},{"_id":"public/images/rate_limiter.png","hash":"cd055114dff18f7ab797bd577aeff73ac03afa1d","modified":1577350883937},{"_id":"public/images/syscall.jpg","hash":"2e276fca5fda66e4e8c5237212d614b9964bdc97","modified":1577350883937},{"_id":"public/images/token_bucket.gif","hash":"743b294d9484d41bfe18971e0be80ba7e6f87781","modified":1577350883937},{"_id":"public/img/algolia.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1577350883937},{"_id":"public/img/favicon.ico","hash":"47877628a0f0e0f06430845b0e3a75e0ba1361ce","modified":1577350883937},{"_id":"public/img/post_loadding.svg","hash":"549c58cd09dbeefd573ce10646c49ded8bcc48ec","modified":1577350883937},{"_id":"public/img/comment_bg.png","hash":"dfc93d24081884fbc58cab0f8fd19e77d31d6123","modified":1577350883937},{"_id":"public/img/404.jpg","hash":"8cb144815552af8ca374dda8a11c14f6223cea29","modified":1577350883937},{"_id":"public/img/icp.png","hash":"29c400bc3b89f6085766dac4e0330ded5cb73d52","modified":1577350883937},{"_id":"public/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1577350883937},{"_id":"public/images/sliding_window.jpeg","hash":"ba23065b7cb7bb040b5c91d955e9beed8279c384","modified":1577350883937},{"_id":"public/images/adaptive_lifo.png","hash":"5a60c9b26959df70ae5650d390b5989cb50e997d","modified":1577350883937},{"_id":"public/images/wechatpay.jpg","hash":"fd7d54a5f6f47d03d8933a893539ce5c872a8d5b","modified":1577350883937},{"_id":"public/js/runtimeshow.js","hash":"f686d28d62b6f65de47713a9da70a461a683a45d","modified":1577350883937},{"_id":"public/css/var.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1577350883937},{"_id":"public/js/baidupush.js","hash":"276a58782b574ec42bf434e4e8bea623437634d4","modified":1577350883937},{"_id":"public/js/utils.js","hash":"95374853ae7293304091e60f87608e659e217abe","modified":1577350883937},{"_id":"public/js/search/local-search.js","hash":"70a3e44f5e83cb11f2c1fd5fd4515f5169ef57c7","modified":1577350883937},{"_id":"public/js/search/algolia.js","hash":"09ef14408f98725970886e2851347596673f761e","modified":1577350883937},{"_id":"public/js/third-party/ClickShowText.js","hash":"466a78f63eda0469701881b97560d8b488ef3ea9","modified":1577350883937},{"_id":"public/js/third-party/activate-power-mode.js","hash":"e7ee1a178d613ba6293e4b622ea1b6ae16b0da45","modified":1577350883937},{"_id":"public/js/third-party/canvas-nest.js","hash":"978402a16f3ceebe453806e3e25a5905a89776be","modified":1577350883937},{"_id":"public/js/third-party/anime.min.js","hash":"3c46c9597c721644a515c1c54ab13f46406657f7","modified":1577350883937},{"_id":"public/js/third-party/canvas-ribbon.js","hash":"05fc79ebcf673e2d257583554eef62d162ade5e8","modified":1577350883937},{"_id":"public/js/third-party/click_heart.js","hash":"7d577520a2afbe9a02f2f16455b6fd902ce58c75","modified":1577350883937},{"_id":"public/js/third-party/fireworks.js","hash":"411ced4031a856a5b87f7c62d3800027d12bacec","modified":1577350883937},{"_id":"public/js/third-party/piao.js","hash":"05da3437664bb335e2336a52be8587e7719f7b89","modified":1577350883937},{"_id":"public/js/main.js","hash":"bdcf3232456a179d7e5ce3ca211d10dd8a90513d","modified":1577350883937},{"_id":"public/css/index.css","hash":"1f7634e53e895662dd6b11ee2df1bede241e8796","modified":1577350883937},{"_id":"public/js/tw_cn.js","hash":"602944743365332d3918c77f678f8ba45a665540","modified":1577350883937},{"_id":"public/js/third-party/jquery.min.js","hash":"1055018c28ab41087ef9ccefe411606893dabea2","modified":1577350883937},{"_id":"public/js/third-party/jquery.fancybox.min.js","hash":"2ec3ef6c31b971ba5e58eb4a0c5ede902bbdd4af","modified":1577350883937},{"_id":"public/images/scheduler_concepts.png","hash":"7dc66a7e5264a9d971b90725f08d03b0bde8cd71","modified":1577350883937},{"_id":"public/images/async_syscall.png","hash":"a03fe89dfc5e5ae4f5847d3d3f7e1795d5d2aeb2","modified":1577350883937},{"_id":"public/img/avatar.png","hash":"dd1a6f2463665a2d3b89329f0fa2cde5ee823a2a","modified":1577350883937},{"_id":"public/images/avatar.png","hash":"f37ece731078fe285b73489c6b5655da7a413c6d","modified":1577350883937},{"_id":"public/images/load_shedding.png","hash":"6d48d60c20a6c84cf808caff231b6d1d8318fb06","modified":1577350883937},{"_id":"source/_posts/如何从Hive中获取最大分区数据.md","hash":"cbd4f7dc06a0b1a959faf5511840cdee3219377f","modified":1577576201435},{"_id":"source/images/hive_arch.png","hash":"27aabab097c4aacbd632dcc2aaa8a44707385d8f","modified":1577573257741},{"_id":"source/images/hive_data_model.png","hash":"350d5b4aac501d524b760031989a5f57eb0282c3","modified":1577574854490},{"_id":"public/2019/12/28/如何从Hive中获取最大分区数据/index.html","hash":"cddd063beea0b0f1a212f3632fcaec9800e1d029","modified":1583136025333},{"_id":"public/categories/数据库/index.html","hash":"137b9bb1a17e1a9db06f065cfd0cbaf8acf840c6","modified":1583136025333},{"_id":"public/tags/Apache-Spark/index.html","hash":"9bc62f5618d045dc09a0be87fe5f6cf3a85f920b","modified":1583136025333},{"_id":"public/tags/Hive/index.html","hash":"0beea888bbf2b7c0fa1a8c88511c462de114df40","modified":1583136025333},{"_id":"public/images/hive_arch.png","hash":"27aabab097c4aacbd632dcc2aaa8a44707385d8f","modified":1577575996274},{"_id":"public/images/hive_data_model.png","hash":"350d5b4aac501d524b760031989a5f57eb0282c3","modified":1577575996274},{"_id":"source/images/apache_hive_icon.png","hash":"079b70205607ef1d2e19822dea93bb0e26aa7565","modified":1577576158143},{"_id":"public/images/apache_hive_icon.png","hash":"079b70205607ef1d2e19822dea93bb0e26aa7565","modified":1577576239963},{"_id":"source/_posts/这个月看的书-2020-01.md","hash":"198771f07f4700d9cb54bcc033493af6575f6a06","modified":1582101309817},{"_id":"source/images/qingren.JPG","hash":"cedb487822e54ea62f09d8a3bfe71ceb2bb00c0b","modified":1582100704000},{"_id":"source/images/lvmaoshuiguai.JPG","hash":"6da4bab09eec10b236311ab57f56679c7f7ff60c","modified":1582100689000},{"_id":"source/images/duras.jpg","hash":"17692d2be4ff6d743fe76721e3af17aad038f317","modified":1582101228381},{"_id":"public/2020/02/17/这个月看的书-2020-01/index.html","hash":"e7df5cedc307a3a69e36caf413be6f65c6ca5154","modified":1583136025333},{"_id":"public/archives/2020/index.html","hash":"24b7f86027fe0a2d6f6a89819c9cb16773186229","modified":1583136025333},{"_id":"public/archives/2020/02/index.html","hash":"d0f043b3f4e8553c87a3b40649655673a533af2c","modified":1583136025333},{"_id":"public/categories/这个月看的书/index.html","hash":"aa3e73175f96af331ebae11fca2fdc4a0941f4bf","modified":1583136025333},{"_id":"public/tags/读书笔记/index.html","hash":"ca4a04ae15df66fac024ac0993f1f6b2b2a289bf","modified":1583136025333},{"_id":"public/images/duras.jpg","hash":"17692d2be4ff6d743fe76721e3af17aad038f317","modified":1582101321454},{"_id":"public/images/lvmaoshuiguai.JPG","hash":"6da4bab09eec10b236311ab57f56679c7f7ff60c","modified":1582101321454},{"_id":"source/_posts/这个月看的书-2020-02.md","hash":"cbacd52d591d3b34e72316180e1a597c1209a1e2","modified":1583136008075},{"_id":"source/images/liulizhuang.png","hash":"c9eca71e8c788ca8eeff9885ce8c7dc08b53b0be","modified":1583135888869},{"_id":"public/2020/03/01/这个月看的书-2020-02/index.html","hash":"d69cce21a1d951f23c04fe2ca2754b4ca7ee755c","modified":1583136025333},{"_id":"public/archives/2020/03/index.html","hash":"47487aaff76c4328db68d70893603bc4c7024862","modified":1583136025333},{"_id":"public/images/liulizhuang.png","hash":"c9eca71e8c788ca8eeff9885ce8c7dc08b53b0be","modified":1583136025333}],"Category":[{"name":"编程语言","_id":"ck4mhzf6m00044a92bwrxcvmn"},{"name":"系统设计","_id":"ck4mhzf6r00084a92dkzq0teu"},{"name":"数据处理","_id":"ck4q1yt1300035r92b7s983ah"},{"name":"数据酷","_id":"ck4q7grbr000e5r920xk6dac5"},{"name":"数据库","_id":"ck4q7gszj000g5r929x70bkgw"},{"name":"这个月看的书","_id":"ck6rn5b8s0000e1921wm432h7"}],"Data":[{"_id":"butterfly","data":{"menu":{"首页":"/ || fa fa-home","归档":"/archives/ || fa fa-archive","标签":"/tags/ || fa fa-tags","分类":"/categories/ || fa fa-folder-open","关于":"/about/ || fa fa-heart"},"favicon":"/img/favicon.ico","highlight_theme":"light","highlight_copy":true,"highlight_lang":true,"highlight_shrink":false,"code_word_wrap":true,"copy":{"enable":true,"copyright":false},"social":{"fa fa-github":"https://github.com/DavidCorn","fa fa-envelope":"mailto:qiyaoq@gmail.com"},"algolia_search":{"enable":false,"hits":{"per_page":6},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}"}},"mathjax":{"enable":false},"katex":{"enable":false,"hide_scrollbar":true},"google_analytics":null,"avatar":"/images/avatar.png","top_img":"https://i.loli.net/2019/05/22/5ce53eb6dc82757840.jpg","default_top_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/top_img_index.jpg","default_cover":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/cover/default_bg.png","archive_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/Photo/archive.jpg","tag_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/tag-bg.png","category_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/category-bg","movies_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN/Photo/movie.jpg","lodding_bg":{"flink":"/img/friend_404.gif","post_page":"/img/404.jpg"},"post_meta":{"date_type":"both","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":true},"auto_open_sidebar":{"enable":true},"post_copyright":{"enable":false,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":false,"length":150},"addThis":{"enable":false,"pubid":null},"sharejs":{"enable":false,"sites":"facebook,twitter,wechat,weibo,qq"},"addtoany":{"enable":false,"item":["facebook","twitter","wechat","sina_weibo","facebook_messenger","email","copy_link"]},"disqus":{"enable":true,"shortname":"qinqiyao"},"valine":{"enable":false,"appId":null,"appKey":null,"notify":false,"verify":false,"pageSize":10,"avatar":"monsterid","lang":"en","placeholder":"Please leave your footprints","guest_info":"nick,mail,link","bg":"/img/comment_bg.png"},"since":2019,"footer_custom_text":"嗝。","footer_copyright":{"enable":false},"ICP":{"enable":false,"url":null,"text":null,"icon":"/img/icp.png"},"google_site_verification":"PWQ1yLiuc_CfANusvurPYyvSg56SLMe3Ar6XvPcn5fw","bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"Flink":{"headline":"友情鏈接","info_headline":"我的Blog資料","name":"Blog 名字： JerryC","address":"Blog 地址： https://jerryc.me/","avatar":"Blog 頭像： https://jerryc.me/img/avatar.png","info":"Blog 簡介： 今日事,今日畢","comment":"如果需要交換友鏈,請留言"},"reward":{"enable":true,"QR_code":[{"itemlist":{"img":"/images/wechatpay.jpg","text":"微信"}}]},"related_post":{"enable":true,"limit":6},"index_site_info_top":null,"index_top_img_height":null,"category_ui":null,"tag_ui":null,"background":null,"footer_bg":true,"canvas_ribbon":{"enable":false,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false,"mobile":false},"canvas_ribbon_piao":{"enable":false,"mobile":false},"canvas_nest":{"enable":true,"color":"0,0,255","opacity":0.7,"zIndex":-1,"count":99,"mobile":false},"activate_power_mode":{"enable":false},"fireworks":{"enable":false},"click_heart":{"enable":false},"ClickShowText":{"enable":false,"text":["富强","民主","文明","和谐","自由","平等","公正","法治","爱国","敬业","诚信","友善"],"fontSize":"15px"},"avatar_effect":false,"display_mode":"light","post_beautify":{"enable":false,"title-prefix-icon":"\\f0c1","title-prefix-icon-color":"#F47466"},"font":{"enable":false,"font-family":"Lato, Helvetica Neue For Number, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, PingFang SC, Hiragino Sans GB, MicrMicrosoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif","code-font":"consolas, Menlo, \"PingFang SC\", \"Microsoft YaHei\", monospace, Helvetica Neue For Number"},"blog_title_font":{"font_link":"https://fonts.googleapis.com/css?family=Titillium+Web","font-family":"Titillium Web, PingFang SC, Hiragino Sans GB, \"Microsoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif"},"hr":{"enable":false,"icon":"\\f21c","icon-top":"-20px"},"subtitle":{"enable":true,"source":false,"sub":["Tech&#44;","Live&#44;","Fun&#44;","etc."]},"aside":{"position":"right","card_author":true,"card_announcement":true,"card_recent_post":true,"card_categories":true,"card_tags":true,"card_archives":true,"card_webinfo":true},"announcement":{"content":"欢迎留言，打赏，转载么么哒"},"busuanzi":{"site_uv":true,"site_pv":true,"page_pv":true},"runtimeshow":{"enable":true,"start_date":"12/11/2019 00:00:00"},"translate":{"enable":false,"default":"繁","defaultEncoding":2,"translateDelay":0,"cookieDomain":"https://xxx/","msgToTraditionalChinese":"繁","msgToSimplifiedChinese":"简"},"readmode":{"enable":true},"darkmode":{"enable":true},"autoChangeMode":1,"medium_zoom":{"enable":true},"snackbar":{"enable":false,"position":"bottom-left","bg_light":"#49b1f5","bg_dark":"#2d3035"},"baidu_push":{"enable":false},"instantpage":{"enable":true},"note":{"style":"flat","icons":true,"border_radius":3,"light_bg_offset":0},"lazyload":{"enable":true},"canonical":true,"disable_baidu_transformation":true,"twitter_meta":true,"Open_Graph_meta":true,"CDN_USE":{"css":["/css/index.css","https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"],"js":["https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","/js/utils.js","/js/main.js"]},"CDN":{"blueimp_md5":"https://cdn.jsdelivr.net/npm/blueimp-md5@2.10.0/js/md5.min.js","gitalk":"https://cdn.jsdelivr.net/npm/gitalk@latest/dist/gitalk.min.js","gitalk_css":"https://cdn.jsdelivr.net/npm/gitalk/dist/gitalk.min.css","valine":"https://cdn.jsdelivr.net/npm/valine/dist/Valine.min.js","addtoany":"https://static.addtoany.com/menu/page.js","sharejs":"https://cdn.jsdelivr.net/npm/social-share.js@1.0.16/dist/js/social-share.min.js","sharejs_css":"https://cdn.jsdelivr.net/npm/social-share.js@1.0.16/dist/css/share.min.css","algolia_search":"https://cdn.jsdelivr.net/npm/instantsearch.js@2.1.1/dist/instantsearch.min.js","algolia_search_css":"https://cdn.jsdelivr.net/npm/instantsearch.js@2.1.1/dist/instantsearch.min.css","algolia_js":"/js/search/algolia.js","local_search":"/js/search/local-search.js","mathjax":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML","katex":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css","katex_copytex":"https://cdn.jsdelivr.net/npm/katex-copytex@latest/dist/katex-copytex.min.js","katex_copytex_css":"https://cdn.jsdelivr.net/npm/katex-copytex@latest/dist/katex-copytex.min.css","busuanzi":"//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js","canvas_ribbon":"/js/third-party/canvas-ribbon.js","canvas_ribbon_piao":"/js/third-party/piao.js","canvas_nest":"/js/third-party/canvas-nest.js","lazyload":"https://cdn.jsdelivr.net/npm/lazysizes@latest/lazysizes.min.js","instantpage":"https://cdn.jsdelivr.net/npm/instant.page@latest/instantpage.min.js","typed":"https://cdn.jsdelivr.net/npm/typed.js","js_cookies":"https://cdn.jsdelivr.net/npm/js-cookie/dist/js.cookie.min.js","fancybox_css":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.css","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","medium_zoom":"https://cdn.jsdelivr.net/npm/medium-zoom/dist/medium-zoom.min.js","snackbar_css":"https://cdn.jsdelivr.net/npm/node-snackbar@0.1.15/dist/snackbar.min.css","snackbar":"https://cdn.jsdelivr.net/npm/node-snackbar@0.1.15/dist/snackbar.min.js","anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","activate_power_mode":"/js/third-party/activate-power-mode.js","fireworks":"/js/third-party/fireworks.js","click_heart":"/js/third-party/click_heart.js","ClickShowText":"/js/third-party/ClickShowText.js","translate":"/js/tw_cn.js","runtimeshow":"js/runtimeshow.js"}}}],"Page":[{"title":"about","date":"2019-12-11T04:48:32.000Z","comments":0,"_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2019-12-10 20:48:32\ncomments: false\n---\n","updated":"2019-12-16T07:30:50.603Z","path":"about/index.html","layout":"page","_id":"ck4mhzf6i00014a92ctb01b57","content":"","site":{"data":{"butterfly":{"menu":{"首页":"/ || fa fa-home","归档":"/archives/ || fa fa-archive","标签":"/tags/ || fa fa-tags","分类":"/categories/ || fa fa-folder-open","关于":"/about/ || fa fa-heart"},"favicon":"/img/favicon.ico","highlight_theme":"light","highlight_copy":true,"highlight_lang":true,"highlight_shrink":false,"code_word_wrap":true,"copy":{"enable":true,"copyright":false},"social":{"fa fa-github":"https://github.com/DavidCorn","fa fa-envelope":"mailto:qiyaoq@gmail.com"},"algolia_search":{"enable":false,"hits":{"per_page":6},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}"}},"mathjax":{"enable":false},"katex":{"enable":false,"hide_scrollbar":true},"google_analytics":null,"avatar":"/images/avatar.png","top_img":"https://i.loli.net/2019/05/22/5ce53eb6dc82757840.jpg","default_top_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/top_img_index.jpg","default_cover":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/cover/default_bg.png","archive_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/Photo/archive.jpg","tag_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/tag-bg.png","category_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/category-bg","movies_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN/Photo/movie.jpg","lodding_bg":{"flink":"/img/friend_404.gif","post_page":"/img/404.jpg"},"post_meta":{"date_type":"both","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":true},"auto_open_sidebar":{"enable":true},"post_copyright":{"enable":false,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":false,"length":150},"addThis":{"enable":false,"pubid":null},"sharejs":{"enable":false,"sites":"facebook,twitter,wechat,weibo,qq"},"addtoany":{"enable":false,"item":["facebook","twitter","wechat","sina_weibo","facebook_messenger","email","copy_link"]},"disqus":{"enable":true,"shortname":"qinqiyao"},"valine":{"enable":false,"appId":null,"appKey":null,"notify":false,"verify":false,"pageSize":10,"avatar":"monsterid","lang":"en","placeholder":"Please leave your footprints","guest_info":"nick,mail,link","bg":"/img/comment_bg.png"},"since":2019,"footer_custom_text":"嗝。","footer_copyright":{"enable":false},"ICP":{"enable":false,"url":null,"text":null,"icon":"/img/icp.png"},"google_site_verification":"PWQ1yLiuc_CfANusvurPYyvSg56SLMe3Ar6XvPcn5fw","bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"Flink":{"headline":"友情鏈接","info_headline":"我的Blog資料","name":"Blog 名字： JerryC","address":"Blog 地址： https://jerryc.me/","avatar":"Blog 頭像： https://jerryc.me/img/avatar.png","info":"Blog 簡介： 今日事,今日畢","comment":"如果需要交換友鏈,請留言"},"reward":{"enable":true,"QR_code":[{"itemlist":{"img":"/images/wechatpay.jpg","text":"微信"}}]},"related_post":{"enable":true,"limit":6},"index_site_info_top":null,"index_top_img_height":null,"category_ui":null,"tag_ui":null,"background":null,"footer_bg":true,"canvas_ribbon":{"enable":false,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false,"mobile":false},"canvas_ribbon_piao":{"enable":false,"mobile":false},"canvas_nest":{"enable":true,"color":"0,0,255","opacity":0.7,"zIndex":-1,"count":99,"mobile":false},"activate_power_mode":{"enable":false},"fireworks":{"enable":false},"click_heart":{"enable":false},"ClickShowText":{"enable":false,"text":["富强","民主","文明","和谐","自由","平等","公正","法治","爱国","敬业","诚信","友善"],"fontSize":"15px"},"avatar_effect":false,"display_mode":"light","post_beautify":{"enable":false,"title-prefix-icon":"\\f0c1","title-prefix-icon-color":"#F47466"},"font":{"enable":false,"font-family":"Lato, Helvetica Neue For Number, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, PingFang SC, Hiragino Sans GB, MicrMicrosoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif","code-font":"consolas, Menlo, \"PingFang SC\", \"Microsoft YaHei\", monospace, Helvetica Neue For Number"},"blog_title_font":{"font_link":"https://fonts.googleapis.com/css?family=Titillium+Web","font-family":"Titillium Web, PingFang SC, Hiragino Sans GB, \"Microsoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif"},"hr":{"enable":false,"icon":"\\f21c","icon-top":"-20px"},"subtitle":{"enable":true,"source":false,"sub":["Tech&#44;","Live&#44;","Fun&#44;","etc."]},"aside":{"position":"right","card_author":true,"card_announcement":true,"card_recent_post":true,"card_categories":true,"card_tags":true,"card_archives":true,"card_webinfo":true},"announcement":{"content":"欢迎留言，打赏，转载么么哒"},"busuanzi":{"site_uv":true,"site_pv":true,"page_pv":true},"runtimeshow":{"enable":true,"start_date":"12/11/2019 00:00:00"},"translate":{"enable":false,"default":"繁","defaultEncoding":2,"translateDelay":0,"cookieDomain":"https://xxx/","msgToTraditionalChinese":"繁","msgToSimplifiedChinese":"简"},"readmode":{"enable":true},"darkmode":{"enable":true},"autoChangeMode":1,"medium_zoom":{"enable":true},"snackbar":{"enable":false,"position":"bottom-left","bg_light":"#49b1f5","bg_dark":"#2d3035"},"baidu_push":{"enable":false},"instantpage":{"enable":true},"note":{"style":"flat","icons":true,"border_radius":3,"light_bg_offset":0},"lazyload":{"enable":true},"canonical":true,"disable_baidu_transformation":true,"twitter_meta":true,"Open_Graph_meta":true,"CDN_USE":{"css":["/css/index.css","https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"],"js":["https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","/js/utils.js","/js/main.js"]},"CDN":{"blueimp_md5":"https://cdn.jsdelivr.net/npm/blueimp-md5@2.10.0/js/md5.min.js","gitalk":"https://cdn.jsdelivr.net/npm/gitalk@latest/dist/gitalk.min.js","gitalk_css":"https://cdn.jsdelivr.net/npm/gitalk/dist/gitalk.min.css","valine":"https://cdn.jsdelivr.net/npm/valine/dist/Valine.min.js","addtoany":"https://static.addtoany.com/menu/page.js","sharejs":"https://cdn.jsdelivr.net/npm/social-share.js@1.0.16/dist/js/social-share.min.js","sharejs_css":"https://cdn.jsdelivr.net/npm/social-share.js@1.0.16/dist/css/share.min.css","algolia_search":"https://cdn.jsdelivr.net/npm/instantsearch.js@2.1.1/dist/instantsearch.min.js","algolia_search_css":"https://cdn.jsdelivr.net/npm/instantsearch.js@2.1.1/dist/instantsearch.min.css","algolia_js":"/js/search/algolia.js","local_search":"/js/search/local-search.js","mathjax":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML","katex":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css","katex_copytex":"https://cdn.jsdelivr.net/npm/katex-copytex@latest/dist/katex-copytex.min.js","katex_copytex_css":"https://cdn.jsdelivr.net/npm/katex-copytex@latest/dist/katex-copytex.min.css","busuanzi":"//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js","canvas_ribbon":"/js/third-party/canvas-ribbon.js","canvas_ribbon_piao":"/js/third-party/piao.js","canvas_nest":"/js/third-party/canvas-nest.js","lazyload":"https://cdn.jsdelivr.net/npm/lazysizes@latest/lazysizes.min.js","instantpage":"https://cdn.jsdelivr.net/npm/instant.page@latest/instantpage.min.js","typed":"https://cdn.jsdelivr.net/npm/typed.js","js_cookies":"https://cdn.jsdelivr.net/npm/js-cookie/dist/js.cookie.min.js","fancybox_css":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.css","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","medium_zoom":"https://cdn.jsdelivr.net/npm/medium-zoom/dist/medium-zoom.min.js","snackbar_css":"https://cdn.jsdelivr.net/npm/node-snackbar@0.1.15/dist/snackbar.min.css","snackbar":"https://cdn.jsdelivr.net/npm/node-snackbar@0.1.15/dist/snackbar.min.js","anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","activate_power_mode":"/js/third-party/activate-power-mode.js","fireworks":"/js/third-party/fireworks.js","click_heart":"/js/third-party/click_heart.js","ClickShowText":"/js/third-party/ClickShowText.js","translate":"/js/tw_cn.js","runtimeshow":"js/runtimeshow.js"}}}},"cover":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/cover/default_bg.png","excerpt":"","more":""},{"title":"分类","type":"categories","date":"2019-12-11T04:47:04.000Z","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ntype: \"categories\"\ndate: 2019-12-10 20:47:04\ncomments: false\n---\n","updated":"2019-12-16T07:30:50.604Z","path":"categories/index.html","layout":"page","_id":"ck4mhzf6k00034a92dunb0887","content":"","site":{"data":{"butterfly":{"menu":{"首页":"/ || fa fa-home","归档":"/archives/ || fa fa-archive","标签":"/tags/ || fa fa-tags","分类":"/categories/ || fa fa-folder-open","关于":"/about/ || fa fa-heart"},"favicon":"/img/favicon.ico","highlight_theme":"light","highlight_copy":true,"highlight_lang":true,"highlight_shrink":false,"code_word_wrap":true,"copy":{"enable":true,"copyright":false},"social":{"fa fa-github":"https://github.com/DavidCorn","fa fa-envelope":"mailto:qiyaoq@gmail.com"},"algolia_search":{"enable":false,"hits":{"per_page":6},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}"}},"mathjax":{"enable":false},"katex":{"enable":false,"hide_scrollbar":true},"google_analytics":null,"avatar":"/images/avatar.png","top_img":"https://i.loli.net/2019/05/22/5ce53eb6dc82757840.jpg","default_top_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/top_img_index.jpg","default_cover":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/cover/default_bg.png","archive_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/Photo/archive.jpg","tag_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/tag-bg.png","category_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/category-bg","movies_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN/Photo/movie.jpg","lodding_bg":{"flink":"/img/friend_404.gif","post_page":"/img/404.jpg"},"post_meta":{"date_type":"both","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":true},"auto_open_sidebar":{"enable":true},"post_copyright":{"enable":false,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":false,"length":150},"addThis":{"enable":false,"pubid":null},"sharejs":{"enable":false,"sites":"facebook,twitter,wechat,weibo,qq"},"addtoany":{"enable":false,"item":["facebook","twitter","wechat","sina_weibo","facebook_messenger","email","copy_link"]},"disqus":{"enable":true,"shortname":"qinqiyao"},"valine":{"enable":false,"appId":null,"appKey":null,"notify":false,"verify":false,"pageSize":10,"avatar":"monsterid","lang":"en","placeholder":"Please leave your footprints","guest_info":"nick,mail,link","bg":"/img/comment_bg.png"},"since":2019,"footer_custom_text":"嗝。","footer_copyright":{"enable":false},"ICP":{"enable":false,"url":null,"text":null,"icon":"/img/icp.png"},"google_site_verification":"PWQ1yLiuc_CfANusvurPYyvSg56SLMe3Ar6XvPcn5fw","bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"Flink":{"headline":"友情鏈接","info_headline":"我的Blog資料","name":"Blog 名字： JerryC","address":"Blog 地址： https://jerryc.me/","avatar":"Blog 頭像： https://jerryc.me/img/avatar.png","info":"Blog 簡介： 今日事,今日畢","comment":"如果需要交換友鏈,請留言"},"reward":{"enable":true,"QR_code":[{"itemlist":{"img":"/images/wechatpay.jpg","text":"微信"}}]},"related_post":{"enable":true,"limit":6},"index_site_info_top":null,"index_top_img_height":null,"category_ui":null,"tag_ui":null,"background":null,"footer_bg":true,"canvas_ribbon":{"enable":false,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false,"mobile":false},"canvas_ribbon_piao":{"enable":false,"mobile":false},"canvas_nest":{"enable":true,"color":"0,0,255","opacity":0.7,"zIndex":-1,"count":99,"mobile":false},"activate_power_mode":{"enable":false},"fireworks":{"enable":false},"click_heart":{"enable":false},"ClickShowText":{"enable":false,"text":["富强","民主","文明","和谐","自由","平等","公正","法治","爱国","敬业","诚信","友善"],"fontSize":"15px"},"avatar_effect":false,"display_mode":"light","post_beautify":{"enable":false,"title-prefix-icon":"\\f0c1","title-prefix-icon-color":"#F47466"},"font":{"enable":false,"font-family":"Lato, Helvetica Neue For Number, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, PingFang SC, Hiragino Sans GB, MicrMicrosoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif","code-font":"consolas, Menlo, \"PingFang SC\", \"Microsoft YaHei\", monospace, Helvetica Neue For Number"},"blog_title_font":{"font_link":"https://fonts.googleapis.com/css?family=Titillium+Web","font-family":"Titillium Web, PingFang SC, Hiragino Sans GB, \"Microsoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif"},"hr":{"enable":false,"icon":"\\f21c","icon-top":"-20px"},"subtitle":{"enable":true,"source":false,"sub":["Tech&#44;","Live&#44;","Fun&#44;","etc."]},"aside":{"position":"right","card_author":true,"card_announcement":true,"card_recent_post":true,"card_categories":true,"card_tags":true,"card_archives":true,"card_webinfo":true},"announcement":{"content":"欢迎留言，打赏，转载么么哒"},"busuanzi":{"site_uv":true,"site_pv":true,"page_pv":true},"runtimeshow":{"enable":true,"start_date":"12/11/2019 00:00:00"},"translate":{"enable":false,"default":"繁","defaultEncoding":2,"translateDelay":0,"cookieDomain":"https://xxx/","msgToTraditionalChinese":"繁","msgToSimplifiedChinese":"简"},"readmode":{"enable":true},"darkmode":{"enable":true},"autoChangeMode":1,"medium_zoom":{"enable":true},"snackbar":{"enable":false,"position":"bottom-left","bg_light":"#49b1f5","bg_dark":"#2d3035"},"baidu_push":{"enable":false},"instantpage":{"enable":true},"note":{"style":"flat","icons":true,"border_radius":3,"light_bg_offset":0},"lazyload":{"enable":true},"canonical":true,"disable_baidu_transformation":true,"twitter_meta":true,"Open_Graph_meta":true,"CDN_USE":{"css":["/css/index.css","https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"],"js":["https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","/js/utils.js","/js/main.js"]},"CDN":{"blueimp_md5":"https://cdn.jsdelivr.net/npm/blueimp-md5@2.10.0/js/md5.min.js","gitalk":"https://cdn.jsdelivr.net/npm/gitalk@latest/dist/gitalk.min.js","gitalk_css":"https://cdn.jsdelivr.net/npm/gitalk/dist/gitalk.min.css","valine":"https://cdn.jsdelivr.net/npm/valine/dist/Valine.min.js","addtoany":"https://static.addtoany.com/menu/page.js","sharejs":"https://cdn.jsdelivr.net/npm/social-share.js@1.0.16/dist/js/social-share.min.js","sharejs_css":"https://cdn.jsdelivr.net/npm/social-share.js@1.0.16/dist/css/share.min.css","algolia_search":"https://cdn.jsdelivr.net/npm/instantsearch.js@2.1.1/dist/instantsearch.min.js","algolia_search_css":"https://cdn.jsdelivr.net/npm/instantsearch.js@2.1.1/dist/instantsearch.min.css","algolia_js":"/js/search/algolia.js","local_search":"/js/search/local-search.js","mathjax":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML","katex":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css","katex_copytex":"https://cdn.jsdelivr.net/npm/katex-copytex@latest/dist/katex-copytex.min.js","katex_copytex_css":"https://cdn.jsdelivr.net/npm/katex-copytex@latest/dist/katex-copytex.min.css","busuanzi":"//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js","canvas_ribbon":"/js/third-party/canvas-ribbon.js","canvas_ribbon_piao":"/js/third-party/piao.js","canvas_nest":"/js/third-party/canvas-nest.js","lazyload":"https://cdn.jsdelivr.net/npm/lazysizes@latest/lazysizes.min.js","instantpage":"https://cdn.jsdelivr.net/npm/instant.page@latest/instantpage.min.js","typed":"https://cdn.jsdelivr.net/npm/typed.js","js_cookies":"https://cdn.jsdelivr.net/npm/js-cookie/dist/js.cookie.min.js","fancybox_css":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.css","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","medium_zoom":"https://cdn.jsdelivr.net/npm/medium-zoom/dist/medium-zoom.min.js","snackbar_css":"https://cdn.jsdelivr.net/npm/node-snackbar@0.1.15/dist/snackbar.min.css","snackbar":"https://cdn.jsdelivr.net/npm/node-snackbar@0.1.15/dist/snackbar.min.js","anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","activate_power_mode":"/js/third-party/activate-power-mode.js","fireworks":"/js/third-party/fireworks.js","click_heart":"/js/third-party/click_heart.js","ClickShowText":"/js/third-party/ClickShowText.js","translate":"/js/tw_cn.js","runtimeshow":"js/runtimeshow.js"}}}},"cover":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/cover/default_bg.png","excerpt":"","more":""},{"title":"标签","type":"tags","date":"2019-12-11T04:36:40.000Z","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ntype: \"tags\"\ndate: 2019-12-10 20:36:40\ncomments: false\n---\n","updated":"2019-12-16T07:30:50.609Z","path":"tags/index.html","layout":"page","_id":"ck4mhzf77000l4a92cxfd19h6","content":"","site":{"data":{"butterfly":{"menu":{"首页":"/ || fa fa-home","归档":"/archives/ || fa fa-archive","标签":"/tags/ || fa fa-tags","分类":"/categories/ || fa fa-folder-open","关于":"/about/ || fa fa-heart"},"favicon":"/img/favicon.ico","highlight_theme":"light","highlight_copy":true,"highlight_lang":true,"highlight_shrink":false,"code_word_wrap":true,"copy":{"enable":true,"copyright":false},"social":{"fa fa-github":"https://github.com/DavidCorn","fa fa-envelope":"mailto:qiyaoq@gmail.com"},"algolia_search":{"enable":false,"hits":{"per_page":6},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}"}},"mathjax":{"enable":false},"katex":{"enable":false,"hide_scrollbar":true},"google_analytics":null,"avatar":"/images/avatar.png","top_img":"https://i.loli.net/2019/05/22/5ce53eb6dc82757840.jpg","default_top_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/top_img_index.jpg","default_cover":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/cover/default_bg.png","archive_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/Photo/archive.jpg","tag_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/tag-bg.png","category_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/category-bg","movies_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN/Photo/movie.jpg","lodding_bg":{"flink":"/img/friend_404.gif","post_page":"/img/404.jpg"},"post_meta":{"date_type":"both","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":true},"auto_open_sidebar":{"enable":true},"post_copyright":{"enable":false,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":false,"length":150},"addThis":{"enable":false,"pubid":null},"sharejs":{"enable":false,"sites":"facebook,twitter,wechat,weibo,qq"},"addtoany":{"enable":false,"item":["facebook","twitter","wechat","sina_weibo","facebook_messenger","email","copy_link"]},"disqus":{"enable":true,"shortname":"qinqiyao"},"valine":{"enable":false,"appId":null,"appKey":null,"notify":false,"verify":false,"pageSize":10,"avatar":"monsterid","lang":"en","placeholder":"Please leave your footprints","guest_info":"nick,mail,link","bg":"/img/comment_bg.png"},"since":2019,"footer_custom_text":"嗝。","footer_copyright":{"enable":false},"ICP":{"enable":false,"url":null,"text":null,"icon":"/img/icp.png"},"google_site_verification":"PWQ1yLiuc_CfANusvurPYyvSg56SLMe3Ar6XvPcn5fw","bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"Flink":{"headline":"友情鏈接","info_headline":"我的Blog資料","name":"Blog 名字： JerryC","address":"Blog 地址： https://jerryc.me/","avatar":"Blog 頭像： https://jerryc.me/img/avatar.png","info":"Blog 簡介： 今日事,今日畢","comment":"如果需要交換友鏈,請留言"},"reward":{"enable":true,"QR_code":[{"itemlist":{"img":"/images/wechatpay.jpg","text":"微信"}}]},"related_post":{"enable":true,"limit":6},"index_site_info_top":null,"index_top_img_height":null,"category_ui":null,"tag_ui":null,"background":null,"footer_bg":true,"canvas_ribbon":{"enable":false,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false,"mobile":false},"canvas_ribbon_piao":{"enable":false,"mobile":false},"canvas_nest":{"enable":true,"color":"0,0,255","opacity":0.7,"zIndex":-1,"count":99,"mobile":false},"activate_power_mode":{"enable":false},"fireworks":{"enable":false},"click_heart":{"enable":false},"ClickShowText":{"enable":false,"text":["富强","民主","文明","和谐","自由","平等","公正","法治","爱国","敬业","诚信","友善"],"fontSize":"15px"},"avatar_effect":false,"display_mode":"light","post_beautify":{"enable":false,"title-prefix-icon":"\\f0c1","title-prefix-icon-color":"#F47466"},"font":{"enable":false,"font-family":"Lato, Helvetica Neue For Number, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, PingFang SC, Hiragino Sans GB, MicrMicrosoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif","code-font":"consolas, Menlo, \"PingFang SC\", \"Microsoft YaHei\", monospace, Helvetica Neue For Number"},"blog_title_font":{"font_link":"https://fonts.googleapis.com/css?family=Titillium+Web","font-family":"Titillium Web, PingFang SC, Hiragino Sans GB, \"Microsoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif"},"hr":{"enable":false,"icon":"\\f21c","icon-top":"-20px"},"subtitle":{"enable":true,"source":false,"sub":["Tech&#44;","Live&#44;","Fun&#44;","etc."]},"aside":{"position":"right","card_author":true,"card_announcement":true,"card_recent_post":true,"card_categories":true,"card_tags":true,"card_archives":true,"card_webinfo":true},"announcement":{"content":"欢迎留言，打赏，转载么么哒"},"busuanzi":{"site_uv":true,"site_pv":true,"page_pv":true},"runtimeshow":{"enable":true,"start_date":"12/11/2019 00:00:00"},"translate":{"enable":false,"default":"繁","defaultEncoding":2,"translateDelay":0,"cookieDomain":"https://xxx/","msgToTraditionalChinese":"繁","msgToSimplifiedChinese":"简"},"readmode":{"enable":true},"darkmode":{"enable":true},"autoChangeMode":1,"medium_zoom":{"enable":true},"snackbar":{"enable":false,"position":"bottom-left","bg_light":"#49b1f5","bg_dark":"#2d3035"},"baidu_push":{"enable":false},"instantpage":{"enable":true},"note":{"style":"flat","icons":true,"border_radius":3,"light_bg_offset":0},"lazyload":{"enable":true},"canonical":true,"disable_baidu_transformation":true,"twitter_meta":true,"Open_Graph_meta":true,"CDN_USE":{"css":["/css/index.css","https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"],"js":["https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","/js/utils.js","/js/main.js"]},"CDN":{"blueimp_md5":"https://cdn.jsdelivr.net/npm/blueimp-md5@2.10.0/js/md5.min.js","gitalk":"https://cdn.jsdelivr.net/npm/gitalk@latest/dist/gitalk.min.js","gitalk_css":"https://cdn.jsdelivr.net/npm/gitalk/dist/gitalk.min.css","valine":"https://cdn.jsdelivr.net/npm/valine/dist/Valine.min.js","addtoany":"https://static.addtoany.com/menu/page.js","sharejs":"https://cdn.jsdelivr.net/npm/social-share.js@1.0.16/dist/js/social-share.min.js","sharejs_css":"https://cdn.jsdelivr.net/npm/social-share.js@1.0.16/dist/css/share.min.css","algolia_search":"https://cdn.jsdelivr.net/npm/instantsearch.js@2.1.1/dist/instantsearch.min.js","algolia_search_css":"https://cdn.jsdelivr.net/npm/instantsearch.js@2.1.1/dist/instantsearch.min.css","algolia_js":"/js/search/algolia.js","local_search":"/js/search/local-search.js","mathjax":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML","katex":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css","katex_copytex":"https://cdn.jsdelivr.net/npm/katex-copytex@latest/dist/katex-copytex.min.js","katex_copytex_css":"https://cdn.jsdelivr.net/npm/katex-copytex@latest/dist/katex-copytex.min.css","busuanzi":"//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js","canvas_ribbon":"/js/third-party/canvas-ribbon.js","canvas_ribbon_piao":"/js/third-party/piao.js","canvas_nest":"/js/third-party/canvas-nest.js","lazyload":"https://cdn.jsdelivr.net/npm/lazysizes@latest/lazysizes.min.js","instantpage":"https://cdn.jsdelivr.net/npm/instant.page@latest/instantpage.min.js","typed":"https://cdn.jsdelivr.net/npm/typed.js","js_cookies":"https://cdn.jsdelivr.net/npm/js-cookie/dist/js.cookie.min.js","fancybox_css":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.css","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","medium_zoom":"https://cdn.jsdelivr.net/npm/medium-zoom/dist/medium-zoom.min.js","snackbar_css":"https://cdn.jsdelivr.net/npm/node-snackbar@0.1.15/dist/snackbar.min.css","snackbar":"https://cdn.jsdelivr.net/npm/node-snackbar@0.1.15/dist/snackbar.min.js","anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","activate_power_mode":"/js/third-party/activate-power-mode.js","fireworks":"/js/third-party/fireworks.js","click_heart":"/js/third-party/click_heart.js","ClickShowText":"/js/third-party/ClickShowText.js","translate":"/js/tw_cn.js","runtimeshow":"js/runtimeshow.js"}}}},"cover":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/cover/default_bg.png","excerpt":"","more":""}],"Post":[{"title":"Golang调度器原理解析","date":"2019-12-25T23:28:40.000Z","description":"调度器 (Scheduler) 使得多个Goroutine可以在多个内核线程 (thread) 上运行。大部分Goroutine的切换没有OS线程切换时的开销，使得整体运行效率比OS线程调度效率高很多。","cover":"/images/scheduler_concepts.png","_content":"\n## 前置知识\n### 什么是Goroutine\nGoroutine可以看作是轻量级的抽象thread。在编写Go代码的时候，我们会对Goroutine进行操作而不是针对thread。对于操作系统而言，thread是最小的调度单位。所以可以认为goroutine是用户层面的线程抽象。\n\n### Goroutine和thread的区别\nGoroutine与thread之间的区别<sup>[1]</sup>主要可以从三个方面出发，如下表所示：\n\n 区别 | Goroutine  | Thread\n------------- | ------------- | -------------\n内存占用 | 占用2KB栈内存，根据需要在运行中扩容  | 占用1MB左右内存，同时创建guard page与其他线程隔离\n创建和销毁 |  Go runtime负责管理，用户级资源，创建销毁消耗非常小 | 内核级，消耗很大\n切换成本 | 只需要保存三个寄存器 (register)，一般200ns左右 | 需要保存各种寄存器，消耗1000-1500ns\n\n### Scheduler\n关于调度器有三种基本模型：\n1. N:1。也就是多个用户线程对应一个系统线程。优势在于上下文切换快，缺点在于难以发挥多核处理器的优势；\n2. 1:1。也就是一个用户线程对应一个系统线程。牺牲上下文切换成本，充分利用多核处理器的优势；\n3. M:N。理论上能在上下文切换和多核处理器之间找到平衡。\n\nThread与Goroutine之间是一个M:N的关系。Go程序启动的时候，runtime会创建M个thread，之后创建的N个Goroutine会依附于这M个thread上执行。总的说来，Go runtime维护所有的Goroutine，通过scheduler进行调度。Goroutine与thread相互独立，但是Goroutine依托thread进行执行。\n\n同一时刻一个thread上只能有一个Goroutine被执行。这时候什么thread上执行哪一个Goroutine，如何进行上下文的切换需要有一个中间人Scheduler做调度。Scheduler的调度也是Go程序高效执行的关键之一。\n\n## 调度器（Scheduler）\n### 调度模型MPG\nGolang的scheduler主要由三个部分组成：\n\n1. M（Machine）代表OS thread；\n2. P（Processer）代表调度器（context for scheduling），通常P的数量等于CPU核数（**GOMAXPROCS**）；\n3. G （Goroutine）代表Goroutine。\n\n他们的具体关系如下图所示<sup>[2]</sup>:\n\n![MPG Model](/images/mpg_scheduler.jpg \"MPG Model\")\n\n上图揭示了几个要点<sup>[3]</sup>：\n\n1. G需要绑定在M上才能运行；\n2. M需要绑定在P上才能运行；\n3. 程序中多个M并不会同时处于运行状态，最多只有 *GOMAXPROCS* 个M在运行。\n\n在Go 1.1之前并没有P的存在。调度是由G与M共同完成。Global维护一个runqueue，当M需要G的时候便从runqueue中获取。这时候需要一个全局所来保护调度对象。很明显，全局锁的存在严重影响了Goroutine的并发性能。Go 1.1之后Dmitry Vyukov<sup>[4]</sup>设计了Processor对原先的Go scheduling进行了改进，使得每一个M上绑定一个P，P会维护一个runnable状态的G队列（Local Runnable Queue, LRQ），解决了原先全局锁的问题。\n\n### 调度算法（Work-stealing）\n通过引入P，实现的work-stealing调度算法如下：\n1. 每一个P维护一个可运行队列LRQ；\n2. 当一个G生成时将其放入一个P的LRQ中；\n3. 当一个G执行结束时P会从队列中把G取出，如果P队列为空则会随机选择另外一个P偷取他一半的G；\n\nWork-stealing本质上来讲是一个负载均衡的算法。除了LRQ之外runttime也会维护一个GRQ（Global Runnable Queue）存放没有被分配具体P的G。\n\n### 同步系统调度（Blocking System Call）\n之所以P存在，是当有M被sysCall block的时候，我们能够把整个P交给另外一个M继续执行。当sysCall执行完毕后M会偷取其他的P，如果无法找到合适的P，M会进入线程池休眠。\n\n![Blocking System Call](/images/syscall.jpg \"Blocking System Call\")\n\n### 异步系统调度（Asyn System Call）\n如果是异步调用，M不会被阻塞。如图所示，G1的异步请求会被Network Poll接手，M此时会继续执行G2，当G1异步请求完成，会自动放回P的LRQ中，整个过程如下图所示<sup>[5]</sup>。\n\n![Async System Call](/images/async_syscall.png \"Async System Call\")\n\n### 抢占式调度（Takeover）\nGoroutine的执行是可以被抢占<sup>[3]</sup>的。简单来说，如果一个Goroutine占用CPU时间过长（> 10ms），P长时间没有进行调度，runtime会将其抢占，把CPU时间交给其他Goroutine。\n\n具体来看，runtime启动时，程序会创建一个系统线程，运行`sysmon()`函数，负责监控所有Goroutine的状态同时判断是否需要进行垃圾回收。如果G执行时间过长，`sysmon()`会对这个G进行标记，下一次函数调用的时候会自动失败，并且和对应的M解除绑定关系并移送全局可执行队列GRQ中，然后为P设置新的可执行G。\n\n## 总结\nGo并发效率如此之高，我们可以做一个简单的总结：\n\n1. Goroutine相较线程来看更为轻量，创建、销毁以及上下文切换开销小很多；\n2. Scheduler实现了M:N的调度模式（并行能力由GOMAXPROCS决定，也就是多少个Processor），兼顾N:1，1:1调度模型优点，整体运行效率比线程调度高很多。\n\n\n## Reference\n* [1] <https://blog.nindalf.com/posts/how-goroutines-work/> \"How Goroutines Work\"\n* [2] <https://morsmachine.dk/go-scheduler> \"The Go scheduler\"\n* [3] <https://cloud.tencent.com/developer/article/1165575> \"Go runtime scheduler\"\n* [4] <https://docs.google.com/document/d/1TTj4T2JO42uD5ID9e89oa0sLKhJYD0Y_kqxDv3I3XMw/edit> \"Scalable Go Scheduler Design Doc\"\n* [5] <https://qcrao.com/2019/09/02/dive-into-go-scheduler/> \"深度解密Go语言之scheduler\"","source":"_posts/Golang调度器原理解析.md","raw":"---\ntitle: Golang调度器原理解析\ndate: 2019-12-25 15:28:40\ntags: 高并发\ncategories: 编程语言\ndescription: 调度器 (Scheduler) 使得多个Goroutine可以在多个内核线程 (thread) 上运行。大部分Goroutine的切换没有OS线程切换时的开销，使得整体运行效率比OS线程调度效率高很多。\ncover: /images/scheduler_concepts.png\n---\n\n## 前置知识\n### 什么是Goroutine\nGoroutine可以看作是轻量级的抽象thread。在编写Go代码的时候，我们会对Goroutine进行操作而不是针对thread。对于操作系统而言，thread是最小的调度单位。所以可以认为goroutine是用户层面的线程抽象。\n\n### Goroutine和thread的区别\nGoroutine与thread之间的区别<sup>[1]</sup>主要可以从三个方面出发，如下表所示：\n\n 区别 | Goroutine  | Thread\n------------- | ------------- | -------------\n内存占用 | 占用2KB栈内存，根据需要在运行中扩容  | 占用1MB左右内存，同时创建guard page与其他线程隔离\n创建和销毁 |  Go runtime负责管理，用户级资源，创建销毁消耗非常小 | 内核级，消耗很大\n切换成本 | 只需要保存三个寄存器 (register)，一般200ns左右 | 需要保存各种寄存器，消耗1000-1500ns\n\n### Scheduler\n关于调度器有三种基本模型：\n1. N:1。也就是多个用户线程对应一个系统线程。优势在于上下文切换快，缺点在于难以发挥多核处理器的优势；\n2. 1:1。也就是一个用户线程对应一个系统线程。牺牲上下文切换成本，充分利用多核处理器的优势；\n3. M:N。理论上能在上下文切换和多核处理器之间找到平衡。\n\nThread与Goroutine之间是一个M:N的关系。Go程序启动的时候，runtime会创建M个thread，之后创建的N个Goroutine会依附于这M个thread上执行。总的说来，Go runtime维护所有的Goroutine，通过scheduler进行调度。Goroutine与thread相互独立，但是Goroutine依托thread进行执行。\n\n同一时刻一个thread上只能有一个Goroutine被执行。这时候什么thread上执行哪一个Goroutine，如何进行上下文的切换需要有一个中间人Scheduler做调度。Scheduler的调度也是Go程序高效执行的关键之一。\n\n## 调度器（Scheduler）\n### 调度模型MPG\nGolang的scheduler主要由三个部分组成：\n\n1. M（Machine）代表OS thread；\n2. P（Processer）代表调度器（context for scheduling），通常P的数量等于CPU核数（**GOMAXPROCS**）；\n3. G （Goroutine）代表Goroutine。\n\n他们的具体关系如下图所示<sup>[2]</sup>:\n\n![MPG Model](/images/mpg_scheduler.jpg \"MPG Model\")\n\n上图揭示了几个要点<sup>[3]</sup>：\n\n1. G需要绑定在M上才能运行；\n2. M需要绑定在P上才能运行；\n3. 程序中多个M并不会同时处于运行状态，最多只有 *GOMAXPROCS* 个M在运行。\n\n在Go 1.1之前并没有P的存在。调度是由G与M共同完成。Global维护一个runqueue，当M需要G的时候便从runqueue中获取。这时候需要一个全局所来保护调度对象。很明显，全局锁的存在严重影响了Goroutine的并发性能。Go 1.1之后Dmitry Vyukov<sup>[4]</sup>设计了Processor对原先的Go scheduling进行了改进，使得每一个M上绑定一个P，P会维护一个runnable状态的G队列（Local Runnable Queue, LRQ），解决了原先全局锁的问题。\n\n### 调度算法（Work-stealing）\n通过引入P，实现的work-stealing调度算法如下：\n1. 每一个P维护一个可运行队列LRQ；\n2. 当一个G生成时将其放入一个P的LRQ中；\n3. 当一个G执行结束时P会从队列中把G取出，如果P队列为空则会随机选择另外一个P偷取他一半的G；\n\nWork-stealing本质上来讲是一个负载均衡的算法。除了LRQ之外runttime也会维护一个GRQ（Global Runnable Queue）存放没有被分配具体P的G。\n\n### 同步系统调度（Blocking System Call）\n之所以P存在，是当有M被sysCall block的时候，我们能够把整个P交给另外一个M继续执行。当sysCall执行完毕后M会偷取其他的P，如果无法找到合适的P，M会进入线程池休眠。\n\n![Blocking System Call](/images/syscall.jpg \"Blocking System Call\")\n\n### 异步系统调度（Asyn System Call）\n如果是异步调用，M不会被阻塞。如图所示，G1的异步请求会被Network Poll接手，M此时会继续执行G2，当G1异步请求完成，会自动放回P的LRQ中，整个过程如下图所示<sup>[5]</sup>。\n\n![Async System Call](/images/async_syscall.png \"Async System Call\")\n\n### 抢占式调度（Takeover）\nGoroutine的执行是可以被抢占<sup>[3]</sup>的。简单来说，如果一个Goroutine占用CPU时间过长（> 10ms），P长时间没有进行调度，runtime会将其抢占，把CPU时间交给其他Goroutine。\n\n具体来看，runtime启动时，程序会创建一个系统线程，运行`sysmon()`函数，负责监控所有Goroutine的状态同时判断是否需要进行垃圾回收。如果G执行时间过长，`sysmon()`会对这个G进行标记，下一次函数调用的时候会自动失败，并且和对应的M解除绑定关系并移送全局可执行队列GRQ中，然后为P设置新的可执行G。\n\n## 总结\nGo并发效率如此之高，我们可以做一个简单的总结：\n\n1. Goroutine相较线程来看更为轻量，创建、销毁以及上下文切换开销小很多；\n2. Scheduler实现了M:N的调度模式（并行能力由GOMAXPROCS决定，也就是多少个Processor），兼顾N:1，1:1调度模型优点，整体运行效率比线程调度高很多。\n\n\n## Reference\n* [1] <https://blog.nindalf.com/posts/how-goroutines-work/> \"How Goroutines Work\"\n* [2] <https://morsmachine.dk/go-scheduler> \"The Go scheduler\"\n* [3] <https://cloud.tencent.com/developer/article/1165575> \"Go runtime scheduler\"\n* [4] <https://docs.google.com/document/d/1TTj4T2JO42uD5ID9e89oa0sLKhJYD0Y_kqxDv3I3XMw/edit> \"Scalable Go Scheduler Design Doc\"\n* [5] <https://qcrao.com/2019/09/02/dive-into-go-scheduler/> \"深度解密Go语言之scheduler\"","slug":"Golang调度器原理解析","published":1,"updated":"2019-12-26T01:32:57.018Z","_id":"ck4mhzf6e00004a921rlehbvi","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"前置知识\"><a href=\"#前置知识\" class=\"headerlink\" title=\"前置知识\"></a>前置知识</h2><h3 id=\"什么是Goroutine\"><a href=\"#什么是Goroutine\" class=\"headerlink\" title=\"什么是Goroutine\"></a>什么是Goroutine</h3><p>Goroutine可以看作是轻量级的抽象thread。在编写Go代码的时候，我们会对Goroutine进行操作而不是针对thread。对于操作系统而言，thread是最小的调度单位。所以可以认为goroutine是用户层面的线程抽象。</p>\n<h3 id=\"Goroutine和thread的区别\"><a href=\"#Goroutine和thread的区别\" class=\"headerlink\" title=\"Goroutine和thread的区别\"></a>Goroutine和thread的区别</h3><p>Goroutine与thread之间的区别<sup>[1]</sup>主要可以从三个方面出发，如下表所示：</p>\n<table>\n<thead>\n<tr>\n<th>区别</th>\n<th>Goroutine</th>\n<th>Thread</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>内存占用</td>\n<td>占用2KB栈内存，根据需要在运行中扩容</td>\n<td>占用1MB左右内存，同时创建guard page与其他线程隔离</td>\n</tr>\n<tr>\n<td>创建和销毁</td>\n<td>Go runtime负责管理，用户级资源，创建销毁消耗非常小</td>\n<td>内核级，消耗很大</td>\n</tr>\n<tr>\n<td>切换成本</td>\n<td>只需要保存三个寄存器 (register)，一般200ns左右</td>\n<td>需要保存各种寄存器，消耗1000-1500ns</td>\n</tr>\n</tbody></table>\n<h3 id=\"Scheduler\"><a href=\"#Scheduler\" class=\"headerlink\" title=\"Scheduler\"></a>Scheduler</h3><p>关于调度器有三种基本模型：</p>\n<ol>\n<li>N:1。也就是多个用户线程对应一个系统线程。优势在于上下文切换快，缺点在于难以发挥多核处理器的优势；</li>\n<li>1:1。也就是一个用户线程对应一个系统线程。牺牲上下文切换成本，充分利用多核处理器的优势；</li>\n<li>M:N。理论上能在上下文切换和多核处理器之间找到平衡。</li>\n</ol>\n<p>Thread与Goroutine之间是一个M:N的关系。Go程序启动的时候，runtime会创建M个thread，之后创建的N个Goroutine会依附于这M个thread上执行。总的说来，Go runtime维护所有的Goroutine，通过scheduler进行调度。Goroutine与thread相互独立，但是Goroutine依托thread进行执行。</p>\n<p>同一时刻一个thread上只能有一个Goroutine被执行。这时候什么thread上执行哪一个Goroutine，如何进行上下文的切换需要有一个中间人Scheduler做调度。Scheduler的调度也是Go程序高效执行的关键之一。</p>\n<h2 id=\"调度器（Scheduler）\"><a href=\"#调度器（Scheduler）\" class=\"headerlink\" title=\"调度器（Scheduler）\"></a>调度器（Scheduler）</h2><h3 id=\"调度模型MPG\"><a href=\"#调度模型MPG\" class=\"headerlink\" title=\"调度模型MPG\"></a>调度模型MPG</h3><p>Golang的scheduler主要由三个部分组成：</p>\n<ol>\n<li>M（Machine）代表OS thread；</li>\n<li>P（Processer）代表调度器（context for scheduling），通常P的数量等于CPU核数（<strong>GOMAXPROCS</strong>）；</li>\n<li>G （Goroutine）代表Goroutine。</li>\n</ol>\n<p>他们的具体关系如下图所示<sup>[2]</sup>:</p>\n<p><img alt=\"MPG Model\" title=\"MPG Model\" data-src=\"/images/mpg_scheduler.jpg\" class=\"lazyload\"></p>\n<p>上图揭示了几个要点<sup>[3]</sup>：</p>\n<ol>\n<li>G需要绑定在M上才能运行；</li>\n<li>M需要绑定在P上才能运行；</li>\n<li>程序中多个M并不会同时处于运行状态，最多只有 <em>GOMAXPROCS</em> 个M在运行。</li>\n</ol>\n<p>在Go 1.1之前并没有P的存在。调度是由G与M共同完成。Global维护一个runqueue，当M需要G的时候便从runqueue中获取。这时候需要一个全局所来保护调度对象。很明显，全局锁的存在严重影响了Goroutine的并发性能。Go 1.1之后Dmitry Vyukov<sup>[4]</sup>设计了Processor对原先的Go scheduling进行了改进，使得每一个M上绑定一个P，P会维护一个runnable状态的G队列（Local Runnable Queue, LRQ），解决了原先全局锁的问题。</p>\n<h3 id=\"调度算法（Work-stealing）\"><a href=\"#调度算法（Work-stealing）\" class=\"headerlink\" title=\"调度算法（Work-stealing）\"></a>调度算法（Work-stealing）</h3><p>通过引入P，实现的work-stealing调度算法如下：</p>\n<ol>\n<li>每一个P维护一个可运行队列LRQ；</li>\n<li>当一个G生成时将其放入一个P的LRQ中；</li>\n<li>当一个G执行结束时P会从队列中把G取出，如果P队列为空则会随机选择另外一个P偷取他一半的G；</li>\n</ol>\n<p>Work-stealing本质上来讲是一个负载均衡的算法。除了LRQ之外runttime也会维护一个GRQ（Global Runnable Queue）存放没有被分配具体P的G。</p>\n<h3 id=\"同步系统调度（Blocking-System-Call）\"><a href=\"#同步系统调度（Blocking-System-Call）\" class=\"headerlink\" title=\"同步系统调度（Blocking System Call）\"></a>同步系统调度（Blocking System Call）</h3><p>之所以P存在，是当有M被sysCall block的时候，我们能够把整个P交给另外一个M继续执行。当sysCall执行完毕后M会偷取其他的P，如果无法找到合适的P，M会进入线程池休眠。</p>\n<p><img alt=\"Blocking System Call\" title=\"Blocking System Call\" data-src=\"/images/syscall.jpg\" class=\"lazyload\"></p>\n<h3 id=\"异步系统调度（Asyn-System-Call）\"><a href=\"#异步系统调度（Asyn-System-Call）\" class=\"headerlink\" title=\"异步系统调度（Asyn System Call）\"></a>异步系统调度（Asyn System Call）</h3><p>如果是异步调用，M不会被阻塞。如图所示，G1的异步请求会被Network Poll接手，M此时会继续执行G2，当G1异步请求完成，会自动放回P的LRQ中，整个过程如下图所示<sup>[5]</sup>。</p>\n<p><img alt=\"Async System Call\" title=\"Async System Call\" data-src=\"/images/async_syscall.png\" class=\"lazyload\"></p>\n<h3 id=\"抢占式调度（Takeover）\"><a href=\"#抢占式调度（Takeover）\" class=\"headerlink\" title=\"抢占式调度（Takeover）\"></a>抢占式调度（Takeover）</h3><p>Goroutine的执行是可以被抢占<sup>[3]</sup>的。简单来说，如果一个Goroutine占用CPU时间过长（&gt; 10ms），P长时间没有进行调度，runtime会将其抢占，把CPU时间交给其他Goroutine。</p>\n<p>具体来看，runtime启动时，程序会创建一个系统线程，运行<code>sysmon()</code>函数，负责监控所有Goroutine的状态同时判断是否需要进行垃圾回收。如果G执行时间过长，<code>sysmon()</code>会对这个G进行标记，下一次函数调用的时候会自动失败，并且和对应的M解除绑定关系并移送全局可执行队列GRQ中，然后为P设置新的可执行G。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>Go并发效率如此之高，我们可以做一个简单的总结：</p>\n<ol>\n<li>Goroutine相较线程来看更为轻量，创建、销毁以及上下文切换开销小很多；</li>\n<li>Scheduler实现了M:N的调度模式（并行能力由GOMAXPROCS决定，也就是多少个Processor），兼顾N:1，1:1调度模型优点，整体运行效率比线程调度高很多。</li>\n</ol>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><ul>\n<li>[1] <a href=\"https://blog.nindalf.com/posts/how-goroutines-work/\" target=\"_blank\" rel=\"noopener\">https://blog.nindalf.com/posts/how-goroutines-work/</a> “How Goroutines Work”</li>\n<li>[2] <a href=\"https://morsmachine.dk/go-scheduler\" target=\"_blank\" rel=\"noopener\">https://morsmachine.dk/go-scheduler</a> “The Go scheduler”</li>\n<li>[3] <a href=\"https://cloud.tencent.com/developer/article/1165575\" target=\"_blank\" rel=\"noopener\">https://cloud.tencent.com/developer/article/1165575</a> “Go runtime scheduler”</li>\n<li>[4] <a href=\"https://docs.google.com/document/d/1TTj4T2JO42uD5ID9e89oa0sLKhJYD0Y_kqxDv3I3XMw/edit\" target=\"_blank\" rel=\"noopener\">https://docs.google.com/document/d/1TTj4T2JO42uD5ID9e89oa0sLKhJYD0Y_kqxDv3I3XMw/edit</a> “Scalable Go Scheduler Design Doc”</li>\n<li>[5] <a href=\"https://qcrao.com/2019/09/02/dive-into-go-scheduler/\" target=\"_blank\" rel=\"noopener\">https://qcrao.com/2019/09/02/dive-into-go-scheduler/</a> “深度解密Go语言之scheduler”</li>\n</ul>\n","site":{"data":{"butterfly":{"menu":{"首页":"/ || fa fa-home","归档":"/archives/ || fa fa-archive","标签":"/tags/ || fa fa-tags","分类":"/categories/ || fa fa-folder-open","关于":"/about/ || fa fa-heart"},"favicon":"/img/favicon.ico","highlight_theme":"light","highlight_copy":true,"highlight_lang":true,"highlight_shrink":false,"code_word_wrap":true,"copy":{"enable":true,"copyright":false},"social":{"fa fa-github":"https://github.com/DavidCorn","fa fa-envelope":"mailto:qiyaoq@gmail.com"},"algolia_search":{"enable":false,"hits":{"per_page":6},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}"}},"mathjax":{"enable":false},"katex":{"enable":false,"hide_scrollbar":true},"google_analytics":null,"avatar":"/images/avatar.png","top_img":"https://i.loli.net/2019/05/22/5ce53eb6dc82757840.jpg","default_top_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/top_img_index.jpg","default_cover":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/cover/default_bg.png","archive_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/Photo/archive.jpg","tag_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/tag-bg.png","category_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/category-bg","movies_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN/Photo/movie.jpg","lodding_bg":{"flink":"/img/friend_404.gif","post_page":"/img/404.jpg"},"post_meta":{"date_type":"both","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":true},"auto_open_sidebar":{"enable":true},"post_copyright":{"enable":false,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":false,"length":150},"addThis":{"enable":false,"pubid":null},"sharejs":{"enable":false,"sites":"facebook,twitter,wechat,weibo,qq"},"addtoany":{"enable":false,"item":["facebook","twitter","wechat","sina_weibo","facebook_messenger","email","copy_link"]},"disqus":{"enable":true,"shortname":"qinqiyao"},"valine":{"enable":false,"appId":null,"appKey":null,"notify":false,"verify":false,"pageSize":10,"avatar":"monsterid","lang":"en","placeholder":"Please leave your footprints","guest_info":"nick,mail,link","bg":"/img/comment_bg.png"},"since":2019,"footer_custom_text":"嗝。","footer_copyright":{"enable":false},"ICP":{"enable":false,"url":null,"text":null,"icon":"/img/icp.png"},"google_site_verification":"PWQ1yLiuc_CfANusvurPYyvSg56SLMe3Ar6XvPcn5fw","bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"Flink":{"headline":"友情鏈接","info_headline":"我的Blog資料","name":"Blog 名字： JerryC","address":"Blog 地址： https://jerryc.me/","avatar":"Blog 頭像： https://jerryc.me/img/avatar.png","info":"Blog 簡介： 今日事,今日畢","comment":"如果需要交換友鏈,請留言"},"reward":{"enable":true,"QR_code":[{"itemlist":{"img":"/images/wechatpay.jpg","text":"微信"}}]},"related_post":{"enable":true,"limit":6},"index_site_info_top":null,"index_top_img_height":null,"category_ui":null,"tag_ui":null,"background":null,"footer_bg":true,"canvas_ribbon":{"enable":false,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false,"mobile":false},"canvas_ribbon_piao":{"enable":false,"mobile":false},"canvas_nest":{"enable":true,"color":"0,0,255","opacity":0.7,"zIndex":-1,"count":99,"mobile":false},"activate_power_mode":{"enable":false},"fireworks":{"enable":false},"click_heart":{"enable":false},"ClickShowText":{"enable":false,"text":["富强","民主","文明","和谐","自由","平等","公正","法治","爱国","敬业","诚信","友善"],"fontSize":"15px"},"avatar_effect":false,"display_mode":"light","post_beautify":{"enable":false,"title-prefix-icon":"\\f0c1","title-prefix-icon-color":"#F47466"},"font":{"enable":false,"font-family":"Lato, Helvetica Neue For Number, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, PingFang SC, Hiragino Sans GB, MicrMicrosoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif","code-font":"consolas, Menlo, \"PingFang SC\", \"Microsoft YaHei\", monospace, Helvetica Neue For Number"},"blog_title_font":{"font_link":"https://fonts.googleapis.com/css?family=Titillium+Web","font-family":"Titillium Web, PingFang SC, Hiragino Sans GB, \"Microsoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif"},"hr":{"enable":false,"icon":"\\f21c","icon-top":"-20px"},"subtitle":{"enable":true,"source":false,"sub":["Tech&#44;","Live&#44;","Fun&#44;","etc."]},"aside":{"position":"right","card_author":true,"card_announcement":true,"card_recent_post":true,"card_categories":true,"card_tags":true,"card_archives":true,"card_webinfo":true},"announcement":{"content":"欢迎留言，打赏，转载么么哒"},"busuanzi":{"site_uv":true,"site_pv":true,"page_pv":true},"runtimeshow":{"enable":true,"start_date":"12/11/2019 00:00:00"},"translate":{"enable":false,"default":"繁","defaultEncoding":2,"translateDelay":0,"cookieDomain":"https://xxx/","msgToTraditionalChinese":"繁","msgToSimplifiedChinese":"简"},"readmode":{"enable":true},"darkmode":{"enable":true},"autoChangeMode":1,"medium_zoom":{"enable":true},"snackbar":{"enable":false,"position":"bottom-left","bg_light":"#49b1f5","bg_dark":"#2d3035"},"baidu_push":{"enable":false},"instantpage":{"enable":true},"note":{"style":"flat","icons":true,"border_radius":3,"light_bg_offset":0},"lazyload":{"enable":true},"canonical":true,"disable_baidu_transformation":true,"twitter_meta":true,"Open_Graph_meta":true,"CDN_USE":{"css":["/css/index.css","https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"],"js":["https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","/js/utils.js","/js/main.js"]},"CDN":{"blueimp_md5":"https://cdn.jsdelivr.net/npm/blueimp-md5@2.10.0/js/md5.min.js","gitalk":"https://cdn.jsdelivr.net/npm/gitalk@latest/dist/gitalk.min.js","gitalk_css":"https://cdn.jsdelivr.net/npm/gitalk/dist/gitalk.min.css","valine":"https://cdn.jsdelivr.net/npm/valine/dist/Valine.min.js","addtoany":"https://static.addtoany.com/menu/page.js","sharejs":"https://cdn.jsdelivr.net/npm/social-share.js@1.0.16/dist/js/social-share.min.js","sharejs_css":"https://cdn.jsdelivr.net/npm/social-share.js@1.0.16/dist/css/share.min.css","algolia_search":"https://cdn.jsdelivr.net/npm/instantsearch.js@2.1.1/dist/instantsearch.min.js","algolia_search_css":"https://cdn.jsdelivr.net/npm/instantsearch.js@2.1.1/dist/instantsearch.min.css","algolia_js":"/js/search/algolia.js","local_search":"/js/search/local-search.js","mathjax":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML","katex":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css","katex_copytex":"https://cdn.jsdelivr.net/npm/katex-copytex@latest/dist/katex-copytex.min.js","katex_copytex_css":"https://cdn.jsdelivr.net/npm/katex-copytex@latest/dist/katex-copytex.min.css","busuanzi":"//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js","canvas_ribbon":"/js/third-party/canvas-ribbon.js","canvas_ribbon_piao":"/js/third-party/piao.js","canvas_nest":"/js/third-party/canvas-nest.js","lazyload":"https://cdn.jsdelivr.net/npm/lazysizes@latest/lazysizes.min.js","instantpage":"https://cdn.jsdelivr.net/npm/instant.page@latest/instantpage.min.js","typed":"https://cdn.jsdelivr.net/npm/typed.js","js_cookies":"https://cdn.jsdelivr.net/npm/js-cookie/dist/js.cookie.min.js","fancybox_css":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.css","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","medium_zoom":"https://cdn.jsdelivr.net/npm/medium-zoom/dist/medium-zoom.min.js","snackbar_css":"https://cdn.jsdelivr.net/npm/node-snackbar@0.1.15/dist/snackbar.min.css","snackbar":"https://cdn.jsdelivr.net/npm/node-snackbar@0.1.15/dist/snackbar.min.js","anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","activate_power_mode":"/js/third-party/activate-power-mode.js","fireworks":"/js/third-party/fireworks.js","click_heart":"/js/third-party/click_heart.js","ClickShowText":"/js/third-party/ClickShowText.js","translate":"/js/tw_cn.js","runtimeshow":"js/runtimeshow.js"},"rootConfig":{"title":"秦少年的博客","subtitle":"","description":"Tech, live, fun, etc.","author":"Qiyao Qin","language":"zh-CN","timezone":"","url":"http://qinqiyao.com","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true,"trailing_html":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":"","wrap":true,"hljs":false},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","use_date_for_updated":false,"per_page":10,"pagination_dir":"page","theme":"Butterfly","deploy":{"type":"git","repo":"git@github.com:DavidCorn/DavidCorn.github.io.git","branch":"master"},"ignore":null,"meta_generator":true,"keywords":null,"index_generator":{"per_page":10,"order_by":"-date","path":""},"include":null,"exclude":null,"Plugins":["hexo-generator-baidu-sitemap","hexo-generator-sitemap"],"baidusitemap":{"path":"baidusitemap.xml"},"sitemap":{"path":"sitemap.xml","rel":false},"search":{"path":"search.xml","field":"post","content":true,"format":"html","limit":10000},"archive_generator":{"per_page":10,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":10},"marked":{"gfm":true,"pedantic":false,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true,"sanitizeUrl":false,"headerIds":true},"server":{"port":4000,"log":false,"compress":false,"header":true},"tag_generator":{"per_page":10}}}}},"excerpt":"","more":"<h2 id=\"前置知识\"><a href=\"#前置知识\" class=\"headerlink\" title=\"前置知识\"></a>前置知识</h2><h3 id=\"什么是Goroutine\"><a href=\"#什么是Goroutine\" class=\"headerlink\" title=\"什么是Goroutine\"></a>什么是Goroutine</h3><p>Goroutine可以看作是轻量级的抽象thread。在编写Go代码的时候，我们会对Goroutine进行操作而不是针对thread。对于操作系统而言，thread是最小的调度单位。所以可以认为goroutine是用户层面的线程抽象。</p>\n<h3 id=\"Goroutine和thread的区别\"><a href=\"#Goroutine和thread的区别\" class=\"headerlink\" title=\"Goroutine和thread的区别\"></a>Goroutine和thread的区别</h3><p>Goroutine与thread之间的区别<sup>[1]</sup>主要可以从三个方面出发，如下表所示：</p>\n<table>\n<thead>\n<tr>\n<th>区别</th>\n<th>Goroutine</th>\n<th>Thread</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>内存占用</td>\n<td>占用2KB栈内存，根据需要在运行中扩容</td>\n<td>占用1MB左右内存，同时创建guard page与其他线程隔离</td>\n</tr>\n<tr>\n<td>创建和销毁</td>\n<td>Go runtime负责管理，用户级资源，创建销毁消耗非常小</td>\n<td>内核级，消耗很大</td>\n</tr>\n<tr>\n<td>切换成本</td>\n<td>只需要保存三个寄存器 (register)，一般200ns左右</td>\n<td>需要保存各种寄存器，消耗1000-1500ns</td>\n</tr>\n</tbody></table>\n<h3 id=\"Scheduler\"><a href=\"#Scheduler\" class=\"headerlink\" title=\"Scheduler\"></a>Scheduler</h3><p>关于调度器有三种基本模型：</p>\n<ol>\n<li>N:1。也就是多个用户线程对应一个系统线程。优势在于上下文切换快，缺点在于难以发挥多核处理器的优势；</li>\n<li>1:1。也就是一个用户线程对应一个系统线程。牺牲上下文切换成本，充分利用多核处理器的优势；</li>\n<li>M:N。理论上能在上下文切换和多核处理器之间找到平衡。</li>\n</ol>\n<p>Thread与Goroutine之间是一个M:N的关系。Go程序启动的时候，runtime会创建M个thread，之后创建的N个Goroutine会依附于这M个thread上执行。总的说来，Go runtime维护所有的Goroutine，通过scheduler进行调度。Goroutine与thread相互独立，但是Goroutine依托thread进行执行。</p>\n<p>同一时刻一个thread上只能有一个Goroutine被执行。这时候什么thread上执行哪一个Goroutine，如何进行上下文的切换需要有一个中间人Scheduler做调度。Scheduler的调度也是Go程序高效执行的关键之一。</p>\n<h2 id=\"调度器（Scheduler）\"><a href=\"#调度器（Scheduler）\" class=\"headerlink\" title=\"调度器（Scheduler）\"></a>调度器（Scheduler）</h2><h3 id=\"调度模型MPG\"><a href=\"#调度模型MPG\" class=\"headerlink\" title=\"调度模型MPG\"></a>调度模型MPG</h3><p>Golang的scheduler主要由三个部分组成：</p>\n<ol>\n<li>M（Machine）代表OS thread；</li>\n<li>P（Processer）代表调度器（context for scheduling），通常P的数量等于CPU核数（<strong>GOMAXPROCS</strong>）；</li>\n<li>G （Goroutine）代表Goroutine。</li>\n</ol>\n<p>他们的具体关系如下图所示<sup>[2]</sup>:</p>\n<p><img src=\"/images/mpg_scheduler.jpg\" alt=\"MPG Model\" title=\"MPG Model\"></p>\n<p>上图揭示了几个要点<sup>[3]</sup>：</p>\n<ol>\n<li>G需要绑定在M上才能运行；</li>\n<li>M需要绑定在P上才能运行；</li>\n<li>程序中多个M并不会同时处于运行状态，最多只有 <em>GOMAXPROCS</em> 个M在运行。</li>\n</ol>\n<p>在Go 1.1之前并没有P的存在。调度是由G与M共同完成。Global维护一个runqueue，当M需要G的时候便从runqueue中获取。这时候需要一个全局所来保护调度对象。很明显，全局锁的存在严重影响了Goroutine的并发性能。Go 1.1之后Dmitry Vyukov<sup>[4]</sup>设计了Processor对原先的Go scheduling进行了改进，使得每一个M上绑定一个P，P会维护一个runnable状态的G队列（Local Runnable Queue, LRQ），解决了原先全局锁的问题。</p>\n<h3 id=\"调度算法（Work-stealing）\"><a href=\"#调度算法（Work-stealing）\" class=\"headerlink\" title=\"调度算法（Work-stealing）\"></a>调度算法（Work-stealing）</h3><p>通过引入P，实现的work-stealing调度算法如下：</p>\n<ol>\n<li>每一个P维护一个可运行队列LRQ；</li>\n<li>当一个G生成时将其放入一个P的LRQ中；</li>\n<li>当一个G执行结束时P会从队列中把G取出，如果P队列为空则会随机选择另外一个P偷取他一半的G；</li>\n</ol>\n<p>Work-stealing本质上来讲是一个负载均衡的算法。除了LRQ之外runttime也会维护一个GRQ（Global Runnable Queue）存放没有被分配具体P的G。</p>\n<h3 id=\"同步系统调度（Blocking-System-Call）\"><a href=\"#同步系统调度（Blocking-System-Call）\" class=\"headerlink\" title=\"同步系统调度（Blocking System Call）\"></a>同步系统调度（Blocking System Call）</h3><p>之所以P存在，是当有M被sysCall block的时候，我们能够把整个P交给另外一个M继续执行。当sysCall执行完毕后M会偷取其他的P，如果无法找到合适的P，M会进入线程池休眠。</p>\n<p><img src=\"/images/syscall.jpg\" alt=\"Blocking System Call\" title=\"Blocking System Call\"></p>\n<h3 id=\"异步系统调度（Asyn-System-Call）\"><a href=\"#异步系统调度（Asyn-System-Call）\" class=\"headerlink\" title=\"异步系统调度（Asyn System Call）\"></a>异步系统调度（Asyn System Call）</h3><p>如果是异步调用，M不会被阻塞。如图所示，G1的异步请求会被Network Poll接手，M此时会继续执行G2，当G1异步请求完成，会自动放回P的LRQ中，整个过程如下图所示<sup>[5]</sup>。</p>\n<p><img src=\"/images/async_syscall.png\" alt=\"Async System Call\" title=\"Async System Call\"></p>\n<h3 id=\"抢占式调度（Takeover）\"><a href=\"#抢占式调度（Takeover）\" class=\"headerlink\" title=\"抢占式调度（Takeover）\"></a>抢占式调度（Takeover）</h3><p>Goroutine的执行是可以被抢占<sup>[3]</sup>的。简单来说，如果一个Goroutine占用CPU时间过长（&gt; 10ms），P长时间没有进行调度，runtime会将其抢占，把CPU时间交给其他Goroutine。</p>\n<p>具体来看，runtime启动时，程序会创建一个系统线程，运行<code>sysmon()</code>函数，负责监控所有Goroutine的状态同时判断是否需要进行垃圾回收。如果G执行时间过长，<code>sysmon()</code>会对这个G进行标记，下一次函数调用的时候会自动失败，并且和对应的M解除绑定关系并移送全局可执行队列GRQ中，然后为P设置新的可执行G。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>Go并发效率如此之高，我们可以做一个简单的总结：</p>\n<ol>\n<li>Goroutine相较线程来看更为轻量，创建、销毁以及上下文切换开销小很多；</li>\n<li>Scheduler实现了M:N的调度模式（并行能力由GOMAXPROCS决定，也就是多少个Processor），兼顾N:1，1:1调度模型优点，整体运行效率比线程调度高很多。</li>\n</ol>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><ul>\n<li>[1] <a href=\"https://blog.nindalf.com/posts/how-goroutines-work/\" target=\"_blank\" rel=\"noopener\">https://blog.nindalf.com/posts/how-goroutines-work/</a> “How Goroutines Work”</li>\n<li>[2] <a href=\"https://morsmachine.dk/go-scheduler\" target=\"_blank\" rel=\"noopener\">https://morsmachine.dk/go-scheduler</a> “The Go scheduler”</li>\n<li>[3] <a href=\"https://cloud.tencent.com/developer/article/1165575\" target=\"_blank\" rel=\"noopener\">https://cloud.tencent.com/developer/article/1165575</a> “Go runtime scheduler”</li>\n<li>[4] <a href=\"https://docs.google.com/document/d/1TTj4T2JO42uD5ID9e89oa0sLKhJYD0Y_kqxDv3I3XMw/edit\" target=\"_blank\" rel=\"noopener\">https://docs.google.com/document/d/1TTj4T2JO42uD5ID9e89oa0sLKhJYD0Y_kqxDv3I3XMw/edit</a> “Scalable Go Scheduler Design Doc”</li>\n<li>[5] <a href=\"https://qcrao.com/2019/09/02/dive-into-go-scheduler/\" target=\"_blank\" rel=\"noopener\">https://qcrao.com/2019/09/02/dive-into-go-scheduler/</a> “深度解密Go语言之scheduler”</li>\n</ul>\n"},{"title":"高并发系统的降级处理——熔断","date":"2019-12-15T23:50:09.000Z","description":"熔断（Circuit breaker）的作用是阻止服务发送过多可能失败的请求。本文从开源代码sony/gobreaker出发，介绍熔断器的工作原理和机制。","_content":"\n在服务器流量波动的情况下，我们需要根据下游服务器容量、业务要求等等对系统进行策略性的保护。保护策略有很多种，包括：\n\n1. 限流（Rate limit）：限制系统输入输出以达到维持服务稳定的目的；\n2. 熔断（Circuit break）：在系统受到过多failing response的时候，拒绝系统输出；\n3. 减载（Load shedding）：在系统输入请求响应时间过长的时候，拒绝系统输入。\n\n熔断的作用是阻止服务发送过多可能失败的请求 (The Circuit Breaker pattern prevents an application from performing an operation that is likely to fail)。本文从开源代码 [sony/gobreaker](https://github.com/sony/gobreaker) <sup>[1]</sup>出发，介绍熔断器的工作原理和机制。\n\n# 设计要求 (Requirements)\n分布式系统中，一般的故障场景例如网络波动（slow network connection），请求超时（timeout）或者过载（overload）等等都可能是暂时性的问题，能够通过系统自修复或者云系统的延展性（horizontal/vertical scaling）等等方式解决。熔断器（Circuit Breaker）是为了解决一些不可预测、难以自修复的故障，比如系统下游服务不可用，数据库宕机等等。另外，熔断器也能有效地阻止连锁反应（cascading failure）的发生。比如当网关（gateway）某一个下游服务不可用，系统不断发送请求并不断重试，可能会导致网关服务占用过多资源内存导致整体崩溃；下游服务如果只是部分不可用，过多的失败请求也会导致下游服务崩溃。\n\n设计一个熔断器要求能够在故障时迅速反应，并且在故障恢复后能够自动恢复。\n\n# 状态机 (State machine)\n熔断器其实是一个小型的状态机，随着请求返回状态码动态进行状态的调整。状态可以分为三类：闭合（Closed），开启（Open），半开（Half-open）。相互关系如下图<sup>[2]</sup>所示。\n\n![Circuit breaker state machine](/images/circuit_breaker.png \"Circuit breaker state machine\")\n\n每次请求到来的时候熔断器会有两个内置函数`before_request`以及`after_request`。`before_request`在请求前进行调用，根据状态决定是否截断请求，并记录请求数量。`after_request`作用在请求结束之后，负责根据请求返回状态码进行状态和计数器的更新。\n\n```go\n// Execute runs the given request if the CircuitBreaker accepts it.\n// Execute returns an error instantly if the CircuitBreaker rejects the request.\n// Otherwise, Execute returns the result of the request.\n// If a panic occurs in the request, the CircuitBreaker handles it as an error\n// and causes the same panic again.\nfunc (cb *CircuitBreaker) Execute(req func() (interface{}, error)) (interface{}, error) {\n\tgeneration, err := cb.beforeRequest()\n\t//...\n\t\n\tdefer func() {\n\t\te := recover()\n\t\tif e != nil {\n\t\t\tcb.afterRequest(generation, false)\n\t\t\tpanic(e)\n\t\t}\n\t}()\n\n\tcb.afterRequest(generation, err == nil)\n\t// ...\n}\n```\n\n## 闭合（Closed）\n熔断器闭合时系统能够正常发送请求，闭合状态下熔断器会维护一个最近失败的请求数量。\n\n```go\n// Counts holds the numbers of requests and their successes/failures.\n// CircuitBreaker clears the internal Counts either\n// on the change of the state or at the closed-state intervals.\n// Counts ignores the results of the requests sent before clearing.\ntype Counts struct {\n\tRequests             uint32\n\tTotalSuccesses       uint32\n\tTotalFailures        uint32\n\tConsecutiveSuccesses uint32\n\tConsecutiveFailures  uint32\n}\n```\n\n每次请求到来时将会更新成功或者失败状态的数量。一旦请求失败数量超过某一个阈值，熔断器将会进入开启（Open）状态。\n\n```go\nfunc (cb *CircuitBreaker) onFailure(state State, now time.Time) {\n\tswitch state {\n\tcase StateClosed:\n\t\tcb.counts.onFailure()\n\t\tif cb.readyToTrip(cb.counts) {\n\t\t\tcb.setState(StateOpen, now)\n\t\t}\n\t// ...\n\t}\n}\n```\n\n## 开启（Open）\n熔断器开启后所有请求立刻失败并抛出异常。系统在设定开启状态时会给熔断器设置一个`expire time`，一旦熔断器处于开启状态时间超过`expire time`，将会自动转入半开状态。这样做的好处是可以让断路器自行检查下游服务可用性。\n\n## 半开（Half open）\n一旦断路器开启状态超时便会进入半开状态。在半开状态下系统会限量发送请求，一旦请求连续成功达到某一个阈值，熔断器将会恢复闭合状态并发送所有请求。一旦有请求失败熔断器将回滚至开启状态并重置计时器。\n\n```go\nfunc (cb *CircuitBreaker) onSuccess(state State, now time.Time) {\n\t//...\n\tcase StateHalfOpen:\n\t\tcb.counts.onSuccess()\n\t\tif cb.counts.ConsecutiveSuccesses >= cb.maxRequests {\n\t\t\tcb.setState(StateClosed, now)\n\t\t}\n\t}\n}\n```\n\n# Reference\n* [1] <https://github.com/sony/gobreaker> \"Circuit Breaker implemented in Go\"\n* [2] <https://docs.microsoft.com/en-us/previous-versions/msp-n-p/dn589784(v=pandp.10)?redirectedfrom=MSDN> \"Circuit Breaker Pattern\"\n\n\n","source":"_posts/高并发系统的降级处理——熔断.md","raw":"---\ntitle: 高并发系统的降级处理——熔断\ndate: 2019-12-15 15:50:09\ndescription: 熔断（Circuit breaker）的作用是阻止服务发送过多可能失败的请求。本文从开源代码sony/gobreaker出发，介绍熔断器的工作原理和机制。\ntags: 高并发\ncategories: 系统设计\n---\n\n在服务器流量波动的情况下，我们需要根据下游服务器容量、业务要求等等对系统进行策略性的保护。保护策略有很多种，包括：\n\n1. 限流（Rate limit）：限制系统输入输出以达到维持服务稳定的目的；\n2. 熔断（Circuit break）：在系统受到过多failing response的时候，拒绝系统输出；\n3. 减载（Load shedding）：在系统输入请求响应时间过长的时候，拒绝系统输入。\n\n熔断的作用是阻止服务发送过多可能失败的请求 (The Circuit Breaker pattern prevents an application from performing an operation that is likely to fail)。本文从开源代码 [sony/gobreaker](https://github.com/sony/gobreaker) <sup>[1]</sup>出发，介绍熔断器的工作原理和机制。\n\n# 设计要求 (Requirements)\n分布式系统中，一般的故障场景例如网络波动（slow network connection），请求超时（timeout）或者过载（overload）等等都可能是暂时性的问题，能够通过系统自修复或者云系统的延展性（horizontal/vertical scaling）等等方式解决。熔断器（Circuit Breaker）是为了解决一些不可预测、难以自修复的故障，比如系统下游服务不可用，数据库宕机等等。另外，熔断器也能有效地阻止连锁反应（cascading failure）的发生。比如当网关（gateway）某一个下游服务不可用，系统不断发送请求并不断重试，可能会导致网关服务占用过多资源内存导致整体崩溃；下游服务如果只是部分不可用，过多的失败请求也会导致下游服务崩溃。\n\n设计一个熔断器要求能够在故障时迅速反应，并且在故障恢复后能够自动恢复。\n\n# 状态机 (State machine)\n熔断器其实是一个小型的状态机，随着请求返回状态码动态进行状态的调整。状态可以分为三类：闭合（Closed），开启（Open），半开（Half-open）。相互关系如下图<sup>[2]</sup>所示。\n\n![Circuit breaker state machine](/images/circuit_breaker.png \"Circuit breaker state machine\")\n\n每次请求到来的时候熔断器会有两个内置函数`before_request`以及`after_request`。`before_request`在请求前进行调用，根据状态决定是否截断请求，并记录请求数量。`after_request`作用在请求结束之后，负责根据请求返回状态码进行状态和计数器的更新。\n\n```go\n// Execute runs the given request if the CircuitBreaker accepts it.\n// Execute returns an error instantly if the CircuitBreaker rejects the request.\n// Otherwise, Execute returns the result of the request.\n// If a panic occurs in the request, the CircuitBreaker handles it as an error\n// and causes the same panic again.\nfunc (cb *CircuitBreaker) Execute(req func() (interface{}, error)) (interface{}, error) {\n\tgeneration, err := cb.beforeRequest()\n\t//...\n\t\n\tdefer func() {\n\t\te := recover()\n\t\tif e != nil {\n\t\t\tcb.afterRequest(generation, false)\n\t\t\tpanic(e)\n\t\t}\n\t}()\n\n\tcb.afterRequest(generation, err == nil)\n\t// ...\n}\n```\n\n## 闭合（Closed）\n熔断器闭合时系统能够正常发送请求，闭合状态下熔断器会维护一个最近失败的请求数量。\n\n```go\n// Counts holds the numbers of requests and their successes/failures.\n// CircuitBreaker clears the internal Counts either\n// on the change of the state or at the closed-state intervals.\n// Counts ignores the results of the requests sent before clearing.\ntype Counts struct {\n\tRequests             uint32\n\tTotalSuccesses       uint32\n\tTotalFailures        uint32\n\tConsecutiveSuccesses uint32\n\tConsecutiveFailures  uint32\n}\n```\n\n每次请求到来时将会更新成功或者失败状态的数量。一旦请求失败数量超过某一个阈值，熔断器将会进入开启（Open）状态。\n\n```go\nfunc (cb *CircuitBreaker) onFailure(state State, now time.Time) {\n\tswitch state {\n\tcase StateClosed:\n\t\tcb.counts.onFailure()\n\t\tif cb.readyToTrip(cb.counts) {\n\t\t\tcb.setState(StateOpen, now)\n\t\t}\n\t// ...\n\t}\n}\n```\n\n## 开启（Open）\n熔断器开启后所有请求立刻失败并抛出异常。系统在设定开启状态时会给熔断器设置一个`expire time`，一旦熔断器处于开启状态时间超过`expire time`，将会自动转入半开状态。这样做的好处是可以让断路器自行检查下游服务可用性。\n\n## 半开（Half open）\n一旦断路器开启状态超时便会进入半开状态。在半开状态下系统会限量发送请求，一旦请求连续成功达到某一个阈值，熔断器将会恢复闭合状态并发送所有请求。一旦有请求失败熔断器将回滚至开启状态并重置计时器。\n\n```go\nfunc (cb *CircuitBreaker) onSuccess(state State, now time.Time) {\n\t//...\n\tcase StateHalfOpen:\n\t\tcb.counts.onSuccess()\n\t\tif cb.counts.ConsecutiveSuccesses >= cb.maxRequests {\n\t\t\tcb.setState(StateClosed, now)\n\t\t}\n\t}\n}\n```\n\n# Reference\n* [1] <https://github.com/sony/gobreaker> \"Circuit Breaker implemented in Go\"\n* [2] <https://docs.microsoft.com/en-us/previous-versions/msp-n-p/dn589784(v=pandp.10)?redirectedfrom=MSDN> \"Circuit Breaker Pattern\"\n\n\n","slug":"高并发系统的降级处理——熔断","published":1,"updated":"2019-12-25T23:34:29.462Z","_id":"ck4mhzf6j00024a928295f3di","comments":1,"layout":"post","photos":[],"link":"","content":"<p>在服务器流量波动的情况下，我们需要根据下游服务器容量、业务要求等等对系统进行策略性的保护。保护策略有很多种，包括：</p>\n<ol>\n<li>限流（Rate limit）：限制系统输入输出以达到维持服务稳定的目的；</li>\n<li>熔断（Circuit break）：在系统受到过多failing response的时候，拒绝系统输出；</li>\n<li>减载（Load shedding）：在系统输入请求响应时间过长的时候，拒绝系统输入。</li>\n</ol>\n<p>熔断的作用是阻止服务发送过多可能失败的请求 (The Circuit Breaker pattern prevents an application from performing an operation that is likely to fail)。本文从开源代码 <a href=\"https://github.com/sony/gobreaker\" target=\"_blank\" rel=\"noopener\">sony/gobreaker</a> <sup>[1]</sup>出发，介绍熔断器的工作原理和机制。</p>\n<h1 id=\"设计要求-Requirements\"><a href=\"#设计要求-Requirements\" class=\"headerlink\" title=\"设计要求 (Requirements)\"></a>设计要求 (Requirements)</h1><p>分布式系统中，一般的故障场景例如网络波动（slow network connection），请求超时（timeout）或者过载（overload）等等都可能是暂时性的问题，能够通过系统自修复或者云系统的延展性（horizontal/vertical scaling）等等方式解决。熔断器（Circuit Breaker）是为了解决一些不可预测、难以自修复的故障，比如系统下游服务不可用，数据库宕机等等。另外，熔断器也能有效地阻止连锁反应（cascading failure）的发生。比如当网关（gateway）某一个下游服务不可用，系统不断发送请求并不断重试，可能会导致网关服务占用过多资源内存导致整体崩溃；下游服务如果只是部分不可用，过多的失败请求也会导致下游服务崩溃。</p>\n<p>设计一个熔断器要求能够在故障时迅速反应，并且在故障恢复后能够自动恢复。</p>\n<h1 id=\"状态机-State-machine\"><a href=\"#状态机-State-machine\" class=\"headerlink\" title=\"状态机 (State machine)\"></a>状态机 (State machine)</h1><p>熔断器其实是一个小型的状态机，随着请求返回状态码动态进行状态的调整。状态可以分为三类：闭合（Closed），开启（Open），半开（Half-open）。相互关系如下图<sup>[2]</sup>所示。</p>\n<p><img alt=\"Circuit breaker state machine\" title=\"Circuit breaker state machine\" data-src=\"/images/circuit_breaker.png\" class=\"lazyload\"></p>\n<p>每次请求到来的时候熔断器会有两个内置函数<code>before_request</code>以及<code>after_request</code>。<code>before_request</code>在请求前进行调用，根据状态决定是否截断请求，并记录请求数量。<code>after_request</code>作用在请求结束之后，负责根据请求返回状态码进行状态和计数器的更新。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Execute runs the given request if the CircuitBreaker accepts it.</span></span><br><span class=\"line\"><span class=\"comment\">// Execute returns an error instantly if the CircuitBreaker rejects the request.</span></span><br><span class=\"line\"><span class=\"comment\">// Otherwise, Execute returns the result of the request.</span></span><br><span class=\"line\"><span class=\"comment\">// If a panic occurs in the request, the CircuitBreaker handles it as an error</span></span><br><span class=\"line\"><span class=\"comment\">// and causes the same panic again.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(cb *CircuitBreaker)</span> <span class=\"title\">Execute</span><span class=\"params\">(req <span class=\"keyword\">func</span>()</span> <span class=\"params\">(<span class=\"keyword\">interface</span>&#123;&#125;, error)</span>) <span class=\"params\">(<span class=\"keyword\">interface</span>&#123;&#125;, error)</span></span> &#123;</span><br><span class=\"line\">\tgeneration, err := cb.beforeRequest()</span><br><span class=\"line\">\t<span class=\"comment\">//...</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\te := <span class=\"built_in\">recover</span>()</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> e != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\tcb.afterRequest(generation, <span class=\"literal\">false</span>)</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">panic</span>(e)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\"></span><br><span class=\"line\">\tcb.afterRequest(generation, err == <span class=\"literal\">nil</span>)</span><br><span class=\"line\">\t<span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"闭合（Closed）\"><a href=\"#闭合（Closed）\" class=\"headerlink\" title=\"闭合（Closed）\"></a>闭合（Closed）</h2><p>熔断器闭合时系统能够正常发送请求，闭合状态下熔断器会维护一个最近失败的请求数量。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Counts holds the numbers of requests and their successes/failures.</span></span><br><span class=\"line\"><span class=\"comment\">// CircuitBreaker clears the internal Counts either</span></span><br><span class=\"line\"><span class=\"comment\">// on the change of the state or at the closed-state intervals.</span></span><br><span class=\"line\"><span class=\"comment\">// Counts ignores the results of the requests sent before clearing.</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Counts <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tRequests             <span class=\"keyword\">uint32</span></span><br><span class=\"line\">\tTotalSuccesses       <span class=\"keyword\">uint32</span></span><br><span class=\"line\">\tTotalFailures        <span class=\"keyword\">uint32</span></span><br><span class=\"line\">\tConsecutiveSuccesses <span class=\"keyword\">uint32</span></span><br><span class=\"line\">\tConsecutiveFailures  <span class=\"keyword\">uint32</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>每次请求到来时将会更新成功或者失败状态的数量。一旦请求失败数量超过某一个阈值，熔断器将会进入开启（Open）状态。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(cb *CircuitBreaker)</span> <span class=\"title\">onFailure</span><span class=\"params\">(state State, now time.Time)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">switch</span> state &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> StateClosed:</span><br><span class=\"line\">\t\tcb.counts.onFailure()</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> cb.readyToTrip(cb.counts) &#123;</span><br><span class=\"line\">\t\t\tcb.setState(StateOpen, now)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// ...</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"开启（Open）\"><a href=\"#开启（Open）\" class=\"headerlink\" title=\"开启（Open）\"></a>开启（Open）</h2><p>熔断器开启后所有请求立刻失败并抛出异常。系统在设定开启状态时会给熔断器设置一个<code>expire time</code>，一旦熔断器处于开启状态时间超过<code>expire time</code>，将会自动转入半开状态。这样做的好处是可以让断路器自行检查下游服务可用性。</p>\n<h2 id=\"半开（Half-open）\"><a href=\"#半开（Half-open）\" class=\"headerlink\" title=\"半开（Half open）\"></a>半开（Half open）</h2><p>一旦断路器开启状态超时便会进入半开状态。在半开状态下系统会限量发送请求，一旦请求连续成功达到某一个阈值，熔断器将会恢复闭合状态并发送所有请求。一旦有请求失败熔断器将回滚至开启状态并重置计时器。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(cb *CircuitBreaker)</span> <span class=\"title\">onSuccess</span><span class=\"params\">(state State, now time.Time)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//...</span></span><br><span class=\"line\">\t<span class=\"keyword\">case</span> StateHalfOpen:</span><br><span class=\"line\">\t\tcb.counts.onSuccess()</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> cb.counts.ConsecutiveSuccesses &gt;= cb.maxRequests &#123;</span><br><span class=\"line\">\t\t\tcb.setState(StateClosed, now)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h1><ul>\n<li>[1] <a href=\"https://github.com/sony/gobreaker\" target=\"_blank\" rel=\"noopener\">https://github.com/sony/gobreaker</a> “Circuit Breaker implemented in Go”</li>\n<li>[2] <a href=\"https://docs.microsoft.com/en-us/previous-versions/msp-n-p/dn589784(v=pandp.10)?redirectedfrom=MSDN\" target=\"_blank\" rel=\"noopener\">https://docs.microsoft.com/en-us/previous-versions/msp-n-p/dn589784(v=pandp.10)?redirectedfrom=MSDN</a> “Circuit Breaker Pattern”</li>\n</ul>\n","site":{"data":{"butterfly":{"menu":{"首页":"/ || fa fa-home","归档":"/archives/ || fa fa-archive","标签":"/tags/ || fa fa-tags","分类":"/categories/ || fa fa-folder-open","关于":"/about/ || fa fa-heart"},"favicon":"/img/favicon.ico","highlight_theme":"light","highlight_copy":true,"highlight_lang":true,"highlight_shrink":false,"code_word_wrap":true,"copy":{"enable":true,"copyright":false},"social":{"fa fa-github":"https://github.com/DavidCorn","fa fa-envelope":"mailto:qiyaoq@gmail.com"},"algolia_search":{"enable":false,"hits":{"per_page":6},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}"}},"mathjax":{"enable":false},"katex":{"enable":false,"hide_scrollbar":true},"google_analytics":null,"avatar":"/images/avatar.png","top_img":"https://i.loli.net/2019/05/22/5ce53eb6dc82757840.jpg","default_top_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/top_img_index.jpg","default_cover":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/cover/default_bg.png","archive_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/Photo/archive.jpg","tag_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/tag-bg.png","category_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/category-bg","movies_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN/Photo/movie.jpg","lodding_bg":{"flink":"/img/friend_404.gif","post_page":"/img/404.jpg"},"post_meta":{"date_type":"both","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":true},"auto_open_sidebar":{"enable":true},"post_copyright":{"enable":false,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":false,"length":150},"addThis":{"enable":false,"pubid":null},"sharejs":{"enable":false,"sites":"facebook,twitter,wechat,weibo,qq"},"addtoany":{"enable":false,"item":["facebook","twitter","wechat","sina_weibo","facebook_messenger","email","copy_link"]},"disqus":{"enable":true,"shortname":"qinqiyao"},"valine":{"enable":false,"appId":null,"appKey":null,"notify":false,"verify":false,"pageSize":10,"avatar":"monsterid","lang":"en","placeholder":"Please leave your footprints","guest_info":"nick,mail,link","bg":"/img/comment_bg.png"},"since":2019,"footer_custom_text":"嗝。","footer_copyright":{"enable":false},"ICP":{"enable":false,"url":null,"text":null,"icon":"/img/icp.png"},"google_site_verification":"PWQ1yLiuc_CfANusvurPYyvSg56SLMe3Ar6XvPcn5fw","bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"Flink":{"headline":"友情鏈接","info_headline":"我的Blog資料","name":"Blog 名字： JerryC","address":"Blog 地址： https://jerryc.me/","avatar":"Blog 頭像： https://jerryc.me/img/avatar.png","info":"Blog 簡介： 今日事,今日畢","comment":"如果需要交換友鏈,請留言"},"reward":{"enable":true,"QR_code":[{"itemlist":{"img":"/images/wechatpay.jpg","text":"微信"}}]},"related_post":{"enable":true,"limit":6},"index_site_info_top":null,"index_top_img_height":null,"category_ui":null,"tag_ui":null,"background":null,"footer_bg":true,"canvas_ribbon":{"enable":false,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false,"mobile":false},"canvas_ribbon_piao":{"enable":false,"mobile":false},"canvas_nest":{"enable":true,"color":"0,0,255","opacity":0.7,"zIndex":-1,"count":99,"mobile":false},"activate_power_mode":{"enable":false},"fireworks":{"enable":false},"click_heart":{"enable":false},"ClickShowText":{"enable":false,"text":["富强","民主","文明","和谐","自由","平等","公正","法治","爱国","敬业","诚信","友善"],"fontSize":"15px"},"avatar_effect":false,"display_mode":"light","post_beautify":{"enable":false,"title-prefix-icon":"\\f0c1","title-prefix-icon-color":"#F47466"},"font":{"enable":false,"font-family":"Lato, Helvetica Neue For Number, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, PingFang SC, Hiragino Sans GB, MicrMicrosoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif","code-font":"consolas, Menlo, \"PingFang SC\", \"Microsoft YaHei\", monospace, Helvetica Neue For Number"},"blog_title_font":{"font_link":"https://fonts.googleapis.com/css?family=Titillium+Web","font-family":"Titillium Web, PingFang SC, Hiragino Sans GB, \"Microsoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif"},"hr":{"enable":false,"icon":"\\f21c","icon-top":"-20px"},"subtitle":{"enable":true,"source":false,"sub":["Tech&#44;","Live&#44;","Fun&#44;","etc."]},"aside":{"position":"right","card_author":true,"card_announcement":true,"card_recent_post":true,"card_categories":true,"card_tags":true,"card_archives":true,"card_webinfo":true},"announcement":{"content":"欢迎留言，打赏，转载么么哒"},"busuanzi":{"site_uv":true,"site_pv":true,"page_pv":true},"runtimeshow":{"enable":true,"start_date":"12/11/2019 00:00:00"},"translate":{"enable":false,"default":"繁","defaultEncoding":2,"translateDelay":0,"cookieDomain":"https://xxx/","msgToTraditionalChinese":"繁","msgToSimplifiedChinese":"简"},"readmode":{"enable":true},"darkmode":{"enable":true},"autoChangeMode":1,"medium_zoom":{"enable":true},"snackbar":{"enable":false,"position":"bottom-left","bg_light":"#49b1f5","bg_dark":"#2d3035"},"baidu_push":{"enable":false},"instantpage":{"enable":true},"note":{"style":"flat","icons":true,"border_radius":3,"light_bg_offset":0},"lazyload":{"enable":true},"canonical":true,"disable_baidu_transformation":true,"twitter_meta":true,"Open_Graph_meta":true,"CDN_USE":{"css":["/css/index.css","https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"],"js":["https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","/js/utils.js","/js/main.js"]},"CDN":{"blueimp_md5":"https://cdn.jsdelivr.net/npm/blueimp-md5@2.10.0/js/md5.min.js","gitalk":"https://cdn.jsdelivr.net/npm/gitalk@latest/dist/gitalk.min.js","gitalk_css":"https://cdn.jsdelivr.net/npm/gitalk/dist/gitalk.min.css","valine":"https://cdn.jsdelivr.net/npm/valine/dist/Valine.min.js","addtoany":"https://static.addtoany.com/menu/page.js","sharejs":"https://cdn.jsdelivr.net/npm/social-share.js@1.0.16/dist/js/social-share.min.js","sharejs_css":"https://cdn.jsdelivr.net/npm/social-share.js@1.0.16/dist/css/share.min.css","algolia_search":"https://cdn.jsdelivr.net/npm/instantsearch.js@2.1.1/dist/instantsearch.min.js","algolia_search_css":"https://cdn.jsdelivr.net/npm/instantsearch.js@2.1.1/dist/instantsearch.min.css","algolia_js":"/js/search/algolia.js","local_search":"/js/search/local-search.js","mathjax":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML","katex":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css","katex_copytex":"https://cdn.jsdelivr.net/npm/katex-copytex@latest/dist/katex-copytex.min.js","katex_copytex_css":"https://cdn.jsdelivr.net/npm/katex-copytex@latest/dist/katex-copytex.min.css","busuanzi":"//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js","canvas_ribbon":"/js/third-party/canvas-ribbon.js","canvas_ribbon_piao":"/js/third-party/piao.js","canvas_nest":"/js/third-party/canvas-nest.js","lazyload":"https://cdn.jsdelivr.net/npm/lazysizes@latest/lazysizes.min.js","instantpage":"https://cdn.jsdelivr.net/npm/instant.page@latest/instantpage.min.js","typed":"https://cdn.jsdelivr.net/npm/typed.js","js_cookies":"https://cdn.jsdelivr.net/npm/js-cookie/dist/js.cookie.min.js","fancybox_css":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.css","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","medium_zoom":"https://cdn.jsdelivr.net/npm/medium-zoom/dist/medium-zoom.min.js","snackbar_css":"https://cdn.jsdelivr.net/npm/node-snackbar@0.1.15/dist/snackbar.min.css","snackbar":"https://cdn.jsdelivr.net/npm/node-snackbar@0.1.15/dist/snackbar.min.js","anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","activate_power_mode":"/js/third-party/activate-power-mode.js","fireworks":"/js/third-party/fireworks.js","click_heart":"/js/third-party/click_heart.js","ClickShowText":"/js/third-party/ClickShowText.js","translate":"/js/tw_cn.js","runtimeshow":"js/runtimeshow.js"},"rootConfig":{"title":"土豆不加冰","subtitle":"","description":"Tech, live, fun, etc.","author":"Qiyao Qin","language":"zh-CN","timezone":"","url":"http://qinqiyao.com","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true,"trailing_html":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":"","wrap":true,"hljs":false,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","use_date_for_updated":false,"per_page":10,"pagination_dir":"page","theme":"Butterfly","deploy":{"type":"git","repo":"git@github.com:DavidCorn/DavidCorn.github.io.git","branch":"master"},"ignore":null,"meta_generator":true,"keywords":null,"index_generator":{"per_page":10,"order_by":"-date","path":""},"include":null,"exclude":null,"Plugins":["hexo-generator-baidu-sitemap","hexo-generator-sitemap"],"baidusitemap":{"path":"baidusitemap.xml"},"sitemap":{"path":"sitemap.xml","rel":false},"search":{"path":"search.xml","field":"post","content":true,"format":"html","limit":10000},"category_generator":{"per_page":10},"archive_generator":{"per_page":10,"yearly":true,"monthly":true,"daily":false},"tag_generator":{"per_page":10},"marked":{"gfm":true,"pedantic":false,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true,"sanitizeUrl":false,"headerIds":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"cover":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/cover/default_bg.png","excerpt":"","more":"<p>在服务器流量波动的情况下，我们需要根据下游服务器容量、业务要求等等对系统进行策略性的保护。保护策略有很多种，包括：</p>\n<ol>\n<li>限流（Rate limit）：限制系统输入输出以达到维持服务稳定的目的；</li>\n<li>熔断（Circuit break）：在系统受到过多failing response的时候，拒绝系统输出；</li>\n<li>减载（Load shedding）：在系统输入请求响应时间过长的时候，拒绝系统输入。</li>\n</ol>\n<p>熔断的作用是阻止服务发送过多可能失败的请求 (The Circuit Breaker pattern prevents an application from performing an operation that is likely to fail)。本文从开源代码 <a href=\"https://github.com/sony/gobreaker\" target=\"_blank\" rel=\"noopener\">sony/gobreaker</a> <sup>[1]</sup>出发，介绍熔断器的工作原理和机制。</p>\n<h1 id=\"设计要求-Requirements\"><a href=\"#设计要求-Requirements\" class=\"headerlink\" title=\"设计要求 (Requirements)\"></a>设计要求 (Requirements)</h1><p>分布式系统中，一般的故障场景例如网络波动（slow network connection），请求超时（timeout）或者过载（overload）等等都可能是暂时性的问题，能够通过系统自修复或者云系统的延展性（horizontal/vertical scaling）等等方式解决。熔断器（Circuit Breaker）是为了解决一些不可预测、难以自修复的故障，比如系统下游服务不可用，数据库宕机等等。另外，熔断器也能有效地阻止连锁反应（cascading failure）的发生。比如当网关（gateway）某一个下游服务不可用，系统不断发送请求并不断重试，可能会导致网关服务占用过多资源内存导致整体崩溃；下游服务如果只是部分不可用，过多的失败请求也会导致下游服务崩溃。</p>\n<p>设计一个熔断器要求能够在故障时迅速反应，并且在故障恢复后能够自动恢复。</p>\n<h1 id=\"状态机-State-machine\"><a href=\"#状态机-State-machine\" class=\"headerlink\" title=\"状态机 (State machine)\"></a>状态机 (State machine)</h1><p>熔断器其实是一个小型的状态机，随着请求返回状态码动态进行状态的调整。状态可以分为三类：闭合（Closed），开启（Open），半开（Half-open）。相互关系如下图<sup>[2]</sup>所示。</p>\n<p><img src=\"/images/circuit_breaker.png\" alt=\"Circuit breaker state machine\" title=\"Circuit breaker state machine\"></p>\n<p>每次请求到来的时候熔断器会有两个内置函数<code>before_request</code>以及<code>after_request</code>。<code>before_request</code>在请求前进行调用，根据状态决定是否截断请求，并记录请求数量。<code>after_request</code>作用在请求结束之后，负责根据请求返回状态码进行状态和计数器的更新。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Execute runs the given request if the CircuitBreaker accepts it.</span></span><br><span class=\"line\"><span class=\"comment\">// Execute returns an error instantly if the CircuitBreaker rejects the request.</span></span><br><span class=\"line\"><span class=\"comment\">// Otherwise, Execute returns the result of the request.</span></span><br><span class=\"line\"><span class=\"comment\">// If a panic occurs in the request, the CircuitBreaker handles it as an error</span></span><br><span class=\"line\"><span class=\"comment\">// and causes the same panic again.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(cb *CircuitBreaker)</span> <span class=\"title\">Execute</span><span class=\"params\">(req <span class=\"keyword\">func</span>()</span> <span class=\"params\">(<span class=\"keyword\">interface</span>&#123;&#125;, error)</span>) <span class=\"params\">(<span class=\"keyword\">interface</span>&#123;&#125;, error)</span></span> &#123;</span><br><span class=\"line\">\tgeneration, err := cb.beforeRequest()</span><br><span class=\"line\">\t<span class=\"comment\">//...</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\te := <span class=\"built_in\">recover</span>()</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> e != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\tcb.afterRequest(generation, <span class=\"literal\">false</span>)</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">panic</span>(e)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\"></span><br><span class=\"line\">\tcb.afterRequest(generation, err == <span class=\"literal\">nil</span>)</span><br><span class=\"line\">\t<span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"闭合（Closed）\"><a href=\"#闭合（Closed）\" class=\"headerlink\" title=\"闭合（Closed）\"></a>闭合（Closed）</h2><p>熔断器闭合时系统能够正常发送请求，闭合状态下熔断器会维护一个最近失败的请求数量。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Counts holds the numbers of requests and their successes/failures.</span></span><br><span class=\"line\"><span class=\"comment\">// CircuitBreaker clears the internal Counts either</span></span><br><span class=\"line\"><span class=\"comment\">// on the change of the state or at the closed-state intervals.</span></span><br><span class=\"line\"><span class=\"comment\">// Counts ignores the results of the requests sent before clearing.</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Counts <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tRequests             <span class=\"keyword\">uint32</span></span><br><span class=\"line\">\tTotalSuccesses       <span class=\"keyword\">uint32</span></span><br><span class=\"line\">\tTotalFailures        <span class=\"keyword\">uint32</span></span><br><span class=\"line\">\tConsecutiveSuccesses <span class=\"keyword\">uint32</span></span><br><span class=\"line\">\tConsecutiveFailures  <span class=\"keyword\">uint32</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>每次请求到来时将会更新成功或者失败状态的数量。一旦请求失败数量超过某一个阈值，熔断器将会进入开启（Open）状态。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(cb *CircuitBreaker)</span> <span class=\"title\">onFailure</span><span class=\"params\">(state State, now time.Time)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">switch</span> state &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> StateClosed:</span><br><span class=\"line\">\t\tcb.counts.onFailure()</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> cb.readyToTrip(cb.counts) &#123;</span><br><span class=\"line\">\t\t\tcb.setState(StateOpen, now)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// ...</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"开启（Open）\"><a href=\"#开启（Open）\" class=\"headerlink\" title=\"开启（Open）\"></a>开启（Open）</h2><p>熔断器开启后所有请求立刻失败并抛出异常。系统在设定开启状态时会给熔断器设置一个<code>expire time</code>，一旦熔断器处于开启状态时间超过<code>expire time</code>，将会自动转入半开状态。这样做的好处是可以让断路器自行检查下游服务可用性。</p>\n<h2 id=\"半开（Half-open）\"><a href=\"#半开（Half-open）\" class=\"headerlink\" title=\"半开（Half open）\"></a>半开（Half open）</h2><p>一旦断路器开启状态超时便会进入半开状态。在半开状态下系统会限量发送请求，一旦请求连续成功达到某一个阈值，熔断器将会恢复闭合状态并发送所有请求。一旦有请求失败熔断器将回滚至开启状态并重置计时器。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(cb *CircuitBreaker)</span> <span class=\"title\">onSuccess</span><span class=\"params\">(state State, now time.Time)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//...</span></span><br><span class=\"line\">\t<span class=\"keyword\">case</span> StateHalfOpen:</span><br><span class=\"line\">\t\tcb.counts.onSuccess()</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> cb.counts.ConsecutiveSuccesses &gt;= cb.maxRequests &#123;</span><br><span class=\"line\">\t\t\tcb.setState(StateClosed, now)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h1><ul>\n<li>[1] <a href=\"https://github.com/sony/gobreaker\" target=\"_blank\" rel=\"noopener\">https://github.com/sony/gobreaker</a> “Circuit Breaker implemented in Go”</li>\n<li>[2] <a href=\"https://docs.microsoft.com/en-us/previous-versions/msp-n-p/dn589784(v=pandp.10)?redirectedfrom=MSDN\" target=\"_blank\" rel=\"noopener\">https://docs.microsoft.com/en-us/previous-versions/msp-n-p/dn589784(v=pandp.10)?redirectedfrom=MSDN</a> “Circuit Breaker Pattern”</li>\n</ul>\n"},{"title":"高并发系统的降级处理——减载","date":"2019-12-20T04:53:08.000Z","description":"减载（Load shedding）的作用是当系统响应变慢时限制甚至拒绝接收请求，减轻服务器内存压力。","cover":"/images/load_shedding.png","_content":"\n在服务器流量波动的情况下，我们需要根据下游服务器容量、业务要求等等对系统进行策略性的保护。保护策略有很多种，包括：\n\n1. 限流（Rate limit）：限制系统输入输出以达到维持服务稳定的目的；\n2. 熔断（Circuit break）：在系统受到过多failing response的时候，拒绝系统输出；\n3. 减载（Load shedding）：在系统输入请求响应时间过长的时候，拒绝系统输入。\n\n一旦系统处理速度小于系统每秒接收的请求数量（processing speed < QPS），内存队列中的请求将逐渐累积，当请求不断增加没有及时释放，系统会遇到延迟增高，阻塞，内存溢出等等问题。因此系统可以建立一种机制，在响应时间变长时拒绝接收请求防止系统过载。\n\nFacebook 有一篇非常有名的paper <sup>[1]</sup>提供了集中策略来设计系统减载方案（loadshedding）。主要里用到的技术包含Control Delay（CoDel）和Adaptive LIFO。\n\n# Control Delay\n一般来说服务器会有内存或者资源池数量的限制，并将没有来得及处理的请求放在缓冲区。一旦处理请求的速度跟不上到来的请求，队列将会越来越大并且最终超过使用闲置。Facebook根据CoDel的启发设计了一套算法：\n\n1. 当内存缓冲队列在过去的N毫秒内没有被清空，则queue中请求的timeout则被设置为M毫秒（一般为10-30ms）；\n2. (Optional) 当内存缓冲队列在过去的N毫秒内被清空，则queue中请求的timeout被设置成N毫秒。\n\n伪代码如下：\n\n```python\ndef onNewRequest(req, queue):\n\n  if (queue.lastEmptyTime() < (now - N seconds)) {\n     timeout = M ms\n  } else {\n     timeout = N seconds;\n  }\n  queue.enqueue(req, timeout)\n```\n\n# Adaptive LIFO\n大部分系统处理请求遵循FIFO (First In Last Out) 原则。在峰值流量太大时，后来的请求可能会因为先来请求的阻塞而导致请求耗时更长。对此Facebook提出的方案是adaptive LIFO (Last In First Out) ，当系统出现队列请求积压的时候，将队列模式自动切换为LIFO，后到的请求首先执行，最大限度上增加了请求成功的可能性。\n\nAdaptive LIFO与CoDel能够非常好的兼容，如下图所示。CoDel设置较短timeout，防止队列积压过多请求，adaptive LIFO将后入的请求率先处理，最大限度增加请求成功的概率。Facebook的PHP runtime virtual machine <sup>[2]</sup>以及thrift <sup>[3]</sup> framework都用到了这种算法。\n\n![Adaptive LIFO](/images/adaptive_lifo.png \"Adaptive LIFO\")\n\n# Reference\n* [1] <https://queue.acm.org/detail.cfm?id=2839461> \"Fail at Scale\"\n* [2] <https://github.com/facebook/hhvm/blob/43c20856239cedf842b2560fd768038f52b501db/hphp/util/job-queue.h#L75> \"A virtual machine for executing programs written in Hack\"\n* [3] <https://github.com/facebook/fbthrift> \"Facebook Thrift\"","source":"_posts/高并发系统的降级处理——减载.md","raw":"---\ntitle: 高并发系统的降级处理——减载\ndate: 2019-12-19 20:53:08\ndescription: 减载（Load shedding）的作用是当系统响应变慢时限制甚至拒绝接收请求，减轻服务器内存压力。\ntags: 高并发\ncategories: 系统设计\ncover: /images/load_shedding.png\n---\n\n在服务器流量波动的情况下，我们需要根据下游服务器容量、业务要求等等对系统进行策略性的保护。保护策略有很多种，包括：\n\n1. 限流（Rate limit）：限制系统输入输出以达到维持服务稳定的目的；\n2. 熔断（Circuit break）：在系统受到过多failing response的时候，拒绝系统输出；\n3. 减载（Load shedding）：在系统输入请求响应时间过长的时候，拒绝系统输入。\n\n一旦系统处理速度小于系统每秒接收的请求数量（processing speed < QPS），内存队列中的请求将逐渐累积，当请求不断增加没有及时释放，系统会遇到延迟增高，阻塞，内存溢出等等问题。因此系统可以建立一种机制，在响应时间变长时拒绝接收请求防止系统过载。\n\nFacebook 有一篇非常有名的paper <sup>[1]</sup>提供了集中策略来设计系统减载方案（loadshedding）。主要里用到的技术包含Control Delay（CoDel）和Adaptive LIFO。\n\n# Control Delay\n一般来说服务器会有内存或者资源池数量的限制，并将没有来得及处理的请求放在缓冲区。一旦处理请求的速度跟不上到来的请求，队列将会越来越大并且最终超过使用闲置。Facebook根据CoDel的启发设计了一套算法：\n\n1. 当内存缓冲队列在过去的N毫秒内没有被清空，则queue中请求的timeout则被设置为M毫秒（一般为10-30ms）；\n2. (Optional) 当内存缓冲队列在过去的N毫秒内被清空，则queue中请求的timeout被设置成N毫秒。\n\n伪代码如下：\n\n```python\ndef onNewRequest(req, queue):\n\n  if (queue.lastEmptyTime() < (now - N seconds)) {\n     timeout = M ms\n  } else {\n     timeout = N seconds;\n  }\n  queue.enqueue(req, timeout)\n```\n\n# Adaptive LIFO\n大部分系统处理请求遵循FIFO (First In Last Out) 原则。在峰值流量太大时，后来的请求可能会因为先来请求的阻塞而导致请求耗时更长。对此Facebook提出的方案是adaptive LIFO (Last In First Out) ，当系统出现队列请求积压的时候，将队列模式自动切换为LIFO，后到的请求首先执行，最大限度上增加了请求成功的可能性。\n\nAdaptive LIFO与CoDel能够非常好的兼容，如下图所示。CoDel设置较短timeout，防止队列积压过多请求，adaptive LIFO将后入的请求率先处理，最大限度增加请求成功的概率。Facebook的PHP runtime virtual machine <sup>[2]</sup>以及thrift <sup>[3]</sup> framework都用到了这种算法。\n\n![Adaptive LIFO](/images/adaptive_lifo.png \"Adaptive LIFO\")\n\n# Reference\n* [1] <https://queue.acm.org/detail.cfm?id=2839461> \"Fail at Scale\"\n* [2] <https://github.com/facebook/hhvm/blob/43c20856239cedf842b2560fd768038f52b501db/hphp/util/job-queue.h#L75> \"A virtual machine for executing programs written in Hack\"\n* [3] <https://github.com/facebook/fbthrift> \"Facebook Thrift\"","slug":"高并发系统的降级处理——减载","published":1,"updated":"2019-12-25T04:36:28.197Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck4mhzf6o00064a92fbm0gxvj","content":"<p>在服务器流量波动的情况下，我们需要根据下游服务器容量、业务要求等等对系统进行策略性的保护。保护策略有很多种，包括：</p>\n<ol>\n<li>限流（Rate limit）：限制系统输入输出以达到维持服务稳定的目的；</li>\n<li>熔断（Circuit break）：在系统受到过多failing response的时候，拒绝系统输出；</li>\n<li>减载（Load shedding）：在系统输入请求响应时间过长的时候，拒绝系统输入。</li>\n</ol>\n<p>一旦系统处理速度小于系统每秒接收的请求数量（processing speed &lt; QPS），内存队列中的请求将逐渐累积，当请求不断增加没有及时释放，系统会遇到延迟增高，阻塞，内存溢出等等问题。因此系统可以建立一种机制，在响应时间变长时拒绝接收请求防止系统过载。</p>\n<p>Facebook 有一篇非常有名的paper <sup>[1]</sup>提供了集中策略来设计系统减载方案（loadshedding）。主要里用到的技术包含Control Delay（CoDel）和Adaptive LIFO。</p>\n<h1 id=\"Control-Delay\"><a href=\"#Control-Delay\" class=\"headerlink\" title=\"Control Delay\"></a>Control Delay</h1><p>一般来说服务器会有内存或者资源池数量的限制，并将没有来得及处理的请求放在缓冲区。一旦处理请求的速度跟不上到来的请求，队列将会越来越大并且最终超过使用闲置。Facebook根据CoDel的启发设计了一套算法：</p>\n<ol>\n<li>当内存缓冲队列在过去的N毫秒内没有被清空，则queue中请求的timeout则被设置为M毫秒（一般为10-30ms）；</li>\n<li>(Optional) 当内存缓冲队列在过去的N毫秒内被清空，则queue中请求的timeout被设置成N毫秒。</li>\n</ol>\n<p>伪代码如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">onNewRequest</span><span class=\"params\">(req, queue)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (queue.lastEmptyTime() &lt; (now - N seconds)) &#123;</span><br><span class=\"line\">     timeout = M ms</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">     timeout = N seconds;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  queue.enqueue(req, timeout)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Adaptive-LIFO\"><a href=\"#Adaptive-LIFO\" class=\"headerlink\" title=\"Adaptive LIFO\"></a>Adaptive LIFO</h1><p>大部分系统处理请求遵循FIFO (First In Last Out) 原则。在峰值流量太大时，后来的请求可能会因为先来请求的阻塞而导致请求耗时更长。对此Facebook提出的方案是adaptive LIFO (Last In First Out) ，当系统出现队列请求积压的时候，将队列模式自动切换为LIFO，后到的请求首先执行，最大限度上增加了请求成功的可能性。</p>\n<p>Adaptive LIFO与CoDel能够非常好的兼容，如下图所示。CoDel设置较短timeout，防止队列积压过多请求，adaptive LIFO将后入的请求率先处理，最大限度增加请求成功的概率。Facebook的PHP runtime virtual machine <sup>[2]</sup>以及thrift <sup>[3]</sup> framework都用到了这种算法。</p>\n<p><img alt=\"Adaptive LIFO\" title=\"Adaptive LIFO\" data-src=\"/images/adaptive_lifo.png\" class=\"lazyload\"></p>\n<h1 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h1><ul>\n<li>[1] <a href=\"https://queue.acm.org/detail.cfm?id=2839461\" target=\"_blank\" rel=\"noopener\">https://queue.acm.org/detail.cfm?id=2839461</a> “Fail at Scale”</li>\n<li>[2] <a href=\"https://github.com/facebook/hhvm/blob/43c20856239cedf842b2560fd768038f52b501db/hphp/util/job-queue.h#L75\" target=\"_blank\" rel=\"noopener\">https://github.com/facebook/hhvm/blob/43c20856239cedf842b2560fd768038f52b501db/hphp/util/job-queue.h#L75</a> “A virtual machine for executing programs written in Hack”</li>\n<li>[3] <a href=\"https://github.com/facebook/fbthrift\" target=\"_blank\" rel=\"noopener\">https://github.com/facebook/fbthrift</a> “Facebook Thrift”</li>\n</ul>\n","site":{"data":{"butterfly":{"menu":{"首页":"/ || fa fa-home","归档":"/archives/ || fa fa-archive","标签":"/tags/ || fa fa-tags","分类":"/categories/ || fa fa-folder-open","关于":"/about/ || fa fa-heart"},"favicon":"/img/favicon.ico","highlight_theme":"light","highlight_copy":true,"highlight_lang":true,"highlight_shrink":false,"code_word_wrap":true,"copy":{"enable":true,"copyright":false},"social":{"fa fa-github":"https://github.com/DavidCorn","fa fa-envelope":"mailto:qiyaoq@gmail.com"},"algolia_search":{"enable":false,"hits":{"per_page":6},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}"}},"mathjax":{"enable":false},"katex":{"enable":false,"hide_scrollbar":true},"google_analytics":null,"avatar":"/images/avatar.png","top_img":"https://i.loli.net/2019/05/22/5ce53eb6dc82757840.jpg","default_top_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/top_img_index.jpg","default_cover":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/cover/default_bg.png","archive_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/Photo/archive.jpg","tag_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/tag-bg.png","category_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/category-bg","movies_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN/Photo/movie.jpg","lodding_bg":{"flink":"/img/friend_404.gif","post_page":"/img/404.jpg"},"post_meta":{"date_type":"both","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":true},"auto_open_sidebar":{"enable":true},"post_copyright":{"enable":false,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":false,"length":150},"addThis":{"enable":false,"pubid":null},"sharejs":{"enable":false,"sites":"facebook,twitter,wechat,weibo,qq"},"addtoany":{"enable":false,"item":["facebook","twitter","wechat","sina_weibo","facebook_messenger","email","copy_link"]},"disqus":{"enable":true,"shortname":"qinqiyao"},"valine":{"enable":false,"appId":null,"appKey":null,"notify":false,"verify":false,"pageSize":10,"avatar":"monsterid","lang":"en","placeholder":"Please leave your footprints","guest_info":"nick,mail,link","bg":"/img/comment_bg.png"},"since":2019,"footer_custom_text":"嗝。","footer_copyright":{"enable":false},"ICP":{"enable":false,"url":null,"text":null,"icon":"/img/icp.png"},"google_site_verification":"PWQ1yLiuc_CfANusvurPYyvSg56SLMe3Ar6XvPcn5fw","bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"Flink":{"headline":"友情鏈接","info_headline":"我的Blog資料","name":"Blog 名字： JerryC","address":"Blog 地址： https://jerryc.me/","avatar":"Blog 頭像： https://jerryc.me/img/avatar.png","info":"Blog 簡介： 今日事,今日畢","comment":"如果需要交換友鏈,請留言"},"reward":{"enable":true,"QR_code":[{"itemlist":{"img":"/images/wechatpay.jpg","text":"微信"}}]},"related_post":{"enable":true,"limit":6},"index_site_info_top":null,"index_top_img_height":null,"category_ui":null,"tag_ui":null,"background":null,"footer_bg":true,"canvas_ribbon":{"enable":false,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false,"mobile":false},"canvas_ribbon_piao":{"enable":false,"mobile":false},"canvas_nest":{"enable":true,"color":"0,0,255","opacity":0.7,"zIndex":-1,"count":99,"mobile":false},"activate_power_mode":{"enable":false},"fireworks":{"enable":false},"click_heart":{"enable":false},"ClickShowText":{"enable":false,"text":["富强","民主","文明","和谐","自由","平等","公正","法治","爱国","敬业","诚信","友善"],"fontSize":"15px"},"avatar_effect":false,"display_mode":"light","post_beautify":{"enable":false,"title-prefix-icon":"\\f0c1","title-prefix-icon-color":"#F47466"},"font":{"enable":false,"font-family":"Lato, Helvetica Neue For Number, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, PingFang SC, Hiragino Sans GB, MicrMicrosoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif","code-font":"consolas, Menlo, \"PingFang SC\", \"Microsoft YaHei\", monospace, Helvetica Neue For Number"},"blog_title_font":{"font_link":"https://fonts.googleapis.com/css?family=Titillium+Web","font-family":"Titillium Web, PingFang SC, Hiragino Sans GB, \"Microsoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif"},"hr":{"enable":false,"icon":"\\f21c","icon-top":"-20px"},"subtitle":{"enable":true,"source":false,"sub":["Tech&#44;","Live&#44;","Fun&#44;","etc."]},"aside":{"position":"right","card_author":true,"card_announcement":true,"card_recent_post":true,"card_categories":true,"card_tags":true,"card_archives":true,"card_webinfo":true},"announcement":{"content":"欢迎留言，打赏，转载么么哒"},"busuanzi":{"site_uv":true,"site_pv":true,"page_pv":true},"runtimeshow":{"enable":true,"start_date":"12/11/2019 00:00:00"},"translate":{"enable":false,"default":"繁","defaultEncoding":2,"translateDelay":0,"cookieDomain":"https://xxx/","msgToTraditionalChinese":"繁","msgToSimplifiedChinese":"简"},"readmode":{"enable":true},"darkmode":{"enable":true},"autoChangeMode":1,"medium_zoom":{"enable":true},"snackbar":{"enable":false,"position":"bottom-left","bg_light":"#49b1f5","bg_dark":"#2d3035"},"baidu_push":{"enable":false},"instantpage":{"enable":true},"note":{"style":"flat","icons":true,"border_radius":3,"light_bg_offset":0},"lazyload":{"enable":true},"canonical":true,"disable_baidu_transformation":true,"twitter_meta":true,"Open_Graph_meta":true,"CDN_USE":{"css":["/css/index.css","https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"],"js":["https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","/js/utils.js","/js/main.js"]},"CDN":{"blueimp_md5":"https://cdn.jsdelivr.net/npm/blueimp-md5@2.10.0/js/md5.min.js","gitalk":"https://cdn.jsdelivr.net/npm/gitalk@latest/dist/gitalk.min.js","gitalk_css":"https://cdn.jsdelivr.net/npm/gitalk/dist/gitalk.min.css","valine":"https://cdn.jsdelivr.net/npm/valine/dist/Valine.min.js","addtoany":"https://static.addtoany.com/menu/page.js","sharejs":"https://cdn.jsdelivr.net/npm/social-share.js@1.0.16/dist/js/social-share.min.js","sharejs_css":"https://cdn.jsdelivr.net/npm/social-share.js@1.0.16/dist/css/share.min.css","algolia_search":"https://cdn.jsdelivr.net/npm/instantsearch.js@2.1.1/dist/instantsearch.min.js","algolia_search_css":"https://cdn.jsdelivr.net/npm/instantsearch.js@2.1.1/dist/instantsearch.min.css","algolia_js":"/js/search/algolia.js","local_search":"/js/search/local-search.js","mathjax":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML","katex":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css","katex_copytex":"https://cdn.jsdelivr.net/npm/katex-copytex@latest/dist/katex-copytex.min.js","katex_copytex_css":"https://cdn.jsdelivr.net/npm/katex-copytex@latest/dist/katex-copytex.min.css","busuanzi":"//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js","canvas_ribbon":"/js/third-party/canvas-ribbon.js","canvas_ribbon_piao":"/js/third-party/piao.js","canvas_nest":"/js/third-party/canvas-nest.js","lazyload":"https://cdn.jsdelivr.net/npm/lazysizes@latest/lazysizes.min.js","instantpage":"https://cdn.jsdelivr.net/npm/instant.page@latest/instantpage.min.js","typed":"https://cdn.jsdelivr.net/npm/typed.js","js_cookies":"https://cdn.jsdelivr.net/npm/js-cookie/dist/js.cookie.min.js","fancybox_css":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.css","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","medium_zoom":"https://cdn.jsdelivr.net/npm/medium-zoom/dist/medium-zoom.min.js","snackbar_css":"https://cdn.jsdelivr.net/npm/node-snackbar@0.1.15/dist/snackbar.min.css","snackbar":"https://cdn.jsdelivr.net/npm/node-snackbar@0.1.15/dist/snackbar.min.js","anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","activate_power_mode":"/js/third-party/activate-power-mode.js","fireworks":"/js/third-party/fireworks.js","click_heart":"/js/third-party/click_heart.js","ClickShowText":"/js/third-party/ClickShowText.js","translate":"/js/tw_cn.js","runtimeshow":"js/runtimeshow.js"}}}},"excerpt":"","more":"<p>在服务器流量波动的情况下，我们需要根据下游服务器容量、业务要求等等对系统进行策略性的保护。保护策略有很多种，包括：</p>\n<ol>\n<li>限流（Rate limit）：限制系统输入输出以达到维持服务稳定的目的；</li>\n<li>熔断（Circuit break）：在系统受到过多failing response的时候，拒绝系统输出；</li>\n<li>减载（Load shedding）：在系统输入请求响应时间过长的时候，拒绝系统输入。</li>\n</ol>\n<p>一旦系统处理速度小于系统每秒接收的请求数量（processing speed &lt; QPS），内存队列中的请求将逐渐累积，当请求不断增加没有及时释放，系统会遇到延迟增高，阻塞，内存溢出等等问题。因此系统可以建立一种机制，在响应时间变长时拒绝接收请求防止系统过载。</p>\n<p>Facebook 有一篇非常有名的paper <sup>[1]</sup>提供了集中策略来设计系统减载方案（loadshedding）。主要里用到的技术包含Control Delay（CoDel）和Adaptive LIFO。</p>\n<h1 id=\"Control-Delay\"><a href=\"#Control-Delay\" class=\"headerlink\" title=\"Control Delay\"></a>Control Delay</h1><p>一般来说服务器会有内存或者资源池数量的限制，并将没有来得及处理的请求放在缓冲区。一旦处理请求的速度跟不上到来的请求，队列将会越来越大并且最终超过使用闲置。Facebook根据CoDel的启发设计了一套算法：</p>\n<ol>\n<li>当内存缓冲队列在过去的N毫秒内没有被清空，则queue中请求的timeout则被设置为M毫秒（一般为10-30ms）；</li>\n<li>(Optional) 当内存缓冲队列在过去的N毫秒内被清空，则queue中请求的timeout被设置成N毫秒。</li>\n</ol>\n<p>伪代码如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">onNewRequest</span><span class=\"params\">(req, queue)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (queue.lastEmptyTime() &lt; (now - N seconds)) &#123;</span><br><span class=\"line\">     timeout = M ms</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">     timeout = N seconds;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  queue.enqueue(req, timeout)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Adaptive-LIFO\"><a href=\"#Adaptive-LIFO\" class=\"headerlink\" title=\"Adaptive LIFO\"></a>Adaptive LIFO</h1><p>大部分系统处理请求遵循FIFO (First In Last Out) 原则。在峰值流量太大时，后来的请求可能会因为先来请求的阻塞而导致请求耗时更长。对此Facebook提出的方案是adaptive LIFO (Last In First Out) ，当系统出现队列请求积压的时候，将队列模式自动切换为LIFO，后到的请求首先执行，最大限度上增加了请求成功的可能性。</p>\n<p>Adaptive LIFO与CoDel能够非常好的兼容，如下图所示。CoDel设置较短timeout，防止队列积压过多请求，adaptive LIFO将后入的请求率先处理，最大限度增加请求成功的概率。Facebook的PHP runtime virtual machine <sup>[2]</sup>以及thrift <sup>[3]</sup> framework都用到了这种算法。</p>\n<p><img src=\"/images/adaptive_lifo.png\" alt=\"Adaptive LIFO\" title=\"Adaptive LIFO\"></p>\n<h1 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h1><ul>\n<li>[1] <a href=\"https://queue.acm.org/detail.cfm?id=2839461\" target=\"_blank\" rel=\"noopener\">https://queue.acm.org/detail.cfm?id=2839461</a> “Fail at Scale”</li>\n<li>[2] <a href=\"https://github.com/facebook/hhvm/blob/43c20856239cedf842b2560fd768038f52b501db/hphp/util/job-queue.h#L75\" target=\"_blank\" rel=\"noopener\">https://github.com/facebook/hhvm/blob/43c20856239cedf842b2560fd768038f52b501db/hphp/util/job-queue.h#L75</a> “A virtual machine for executing programs written in Hack”</li>\n<li>[3] <a href=\"https://github.com/facebook/fbthrift\" target=\"_blank\" rel=\"noopener\">https://github.com/facebook/fbthrift</a> “Facebook Thrift”</li>\n</ul>\n"},{"title":"高并发系统的降级处理——限流","date":"2019-12-12T07:43:43.000Z","description":"一般来说，常见的限流（Rate limiting）算法有三种：滑动窗口（sliding window），漏桶（leaky bucket）以及令牌桶（token bucket）算法。","cover":"/images/rate_limiter.png","_content":"\n在服务器流量波动的情况下，我们需要根据下游服务器容量、业务要求等等对系统进行策略性的保护。保护策略有很多种，包括：\n1. 限流（Rate limit）：限制系统输入输出以达到维持服务稳定的目的；\n2. 熔断（Circuit break）：在系统收到过多failing response的时候，拒绝系统输出；\n3. 减载（Load shedding）：在系统输入请求响应时间过长的时候，拒绝系统输入。\n\n一般来说，常见的限流算法有三种：滑动窗口（sliding window），漏桶（leaky bucket）以及令牌桶（token bucket）算法。\n\n<!--more-->\n\n# 滑动窗口（Sliding Window）\n\n滑动窗口算法比较简单粗暴。比方说我们需要100 qps的限流，我们将1s分为十个100ms的格子，格子之间通过链表（linkedlist）的方式连接。然后我们设置一个1s的窗口，每100ms在链表尾部新加一个格子，然后删掉队头的格子，保证1s的窗口内始终有十个格子。\n\n每个格子内会记录到底的请求，请求到来的时候会首先查看当前1s内总访问量，如果超过100s则进入缓存等待或者丢弃，否则队尾格子进行计数。\n\n滑动窗口算法的优势在于实现简单，内存友好。存在的问题是精度由格子的粒度决定。格子细粒度越高，窗口滑动越平滑，限流统计就越精确。\n\n![Sliding Window 原理图](/images/sliding_window.jpeg \"Sliding Window 原理图\")\n\n# 漏桶（Leaky Bucket）\n漏桶算法<sup>[1]</sup>的核心逻辑为以下几点：\n1. 实现了一个固定容量的桶；\n2. 桶的输出速率保证恒定，一旦桶内请求为空则停止输出；\n3. 一旦桶溢出，则溢出流量会被丢弃。\n\n![Leaky Bucket 原理图](/images/leaky_bucket.jpeg \"Leaky Bucket 原理图\")\n\n漏桶的实现在单机上可以利用队列（queue）完成，分布式环境可以使用Redis或者其他消息中间件。\n\n# 令牌桶（Token Bucket）\n令牌桶<sup>[1]</sup>根据令牌的数量来控制请求速率。每秒钟会平均往桶内放n个令牌，每次请求到达会消耗掉桶内X个令牌，一旦桶内剩余令牌≤X则请求放入缓存区等待或者丢弃。\n\n![[Token Bucket 原理图](https://www.quora.com/What-is-the-difference-between-token-bucket-and-leaky-bucket-algorithms)](/images/token_bucket.gif \"Token Bucket 原理图\")\n\n令牌桶对于不同突发状况有比较好的处理能力，以Google的Java开源项目[Guava](https://github.com/google/guava/blob/master/guava/src/com/google/common/util/concurrent/RateLimiter.java)<sup>[4]</sup>为例，针对RateLimiter提供了两个实用的子类：平滑突发限流（SmoothBusrty）和平滑预热限流（SmoothWarmingUp）。\n\nSmoothBursty能够很好地应对突发流量。当流量突然变大的时候，会立刻消耗掉桶内令牌，之后流量输出取决于令牌自增速率，达到一个平缓的输出速率；当流量突然变小的时候，流量会立即消耗掉桶内令牌。输出流量会呈现一个逼近恒定速率的趋势，但是具体速率由实时系统流量和令牌自增速率共同**动态**决定。\n\nSmoothWarmingUp适用于**下游服务需要预热**的场景。创建限流器的时候可以设定参数如下：\n```java\n// 令牌自增速率为2个/秒，缓冲时间为3s\nRateLimiter r = RateLimiter.create(2,3,TimeUnit.SECONDS);\n```\n在这样的设置下，在前3s令牌不会每0.5s发放一次，而是会形成平缓线性下降的坡度。比方说1.5s发放第一个，0.9s发放第二个，0.6s发放第三个。在3s之后，发放速率会恢复设定的速率。\n\n# 漏桶 vs 令牌桶\n1. 漏桶输出速率恒定，令牌桶输出速率由令牌自增速率与输入流量决定。增加令牌自增速率能够提高限流器上限。有突发流量（burst）时令牌桶输出速率可以动态提高\n2. 当漏桶满了之后，输入流量会被丢弃。当令牌桶满了之后，输入可以被缓存或者丢弃；\n\n一般来说漏桶被用在traffic policing的场景中，即network需要满足某一个contract，一旦超过contract，traffic shaping就会拒绝多余的流量请求，保证传输带宽；令牌桶多用在rate limit的场景中，更加灵活和动态。Uber的批处理系统中对限流的处理就运用到了这种令牌桶的设计原理。\n\n# Reference\n* [1] <https://www.quora.com/What-is-the-difference-between-token-bucket-and-leaky-bucket-algorithms> \"What is the difference between token bucket and leaky bucket algorithms?\"\n* [2] <https://www.figma.com/blog/an-alternative-approach-to-rate-limiting/> \"An alternative approach to rate limiting\"\n* [3] <https://mp.weixin.qq.com/s/b4yqLSqNz7_vcGLRmhG0rw> \"高并发系统中的限流应该如何做？\"\n* [4] <https://github.com/google/guava> \"google/guava\"\n\n","source":"_posts/高并发系统的降级处理——限流.md","raw":"---\ntitle: 高并发系统的降级处理——限流\ndate: 2019-12-11 23:43:43\ndescription: 一般来说，常见的限流（Rate limiting）算法有三种：滑动窗口（sliding window），漏桶（leaky bucket）以及令牌桶（token bucket）算法。\ntags: 高并发\ncategories: 系统设计\ncover: /images/rate_limiter.png\n---\n\n在服务器流量波动的情况下，我们需要根据下游服务器容量、业务要求等等对系统进行策略性的保护。保护策略有很多种，包括：\n1. 限流（Rate limit）：限制系统输入输出以达到维持服务稳定的目的；\n2. 熔断（Circuit break）：在系统收到过多failing response的时候，拒绝系统输出；\n3. 减载（Load shedding）：在系统输入请求响应时间过长的时候，拒绝系统输入。\n\n一般来说，常见的限流算法有三种：滑动窗口（sliding window），漏桶（leaky bucket）以及令牌桶（token bucket）算法。\n\n<!--more-->\n\n# 滑动窗口（Sliding Window）\n\n滑动窗口算法比较简单粗暴。比方说我们需要100 qps的限流，我们将1s分为十个100ms的格子，格子之间通过链表（linkedlist）的方式连接。然后我们设置一个1s的窗口，每100ms在链表尾部新加一个格子，然后删掉队头的格子，保证1s的窗口内始终有十个格子。\n\n每个格子内会记录到底的请求，请求到来的时候会首先查看当前1s内总访问量，如果超过100s则进入缓存等待或者丢弃，否则队尾格子进行计数。\n\n滑动窗口算法的优势在于实现简单，内存友好。存在的问题是精度由格子的粒度决定。格子细粒度越高，窗口滑动越平滑，限流统计就越精确。\n\n![Sliding Window 原理图](/images/sliding_window.jpeg \"Sliding Window 原理图\")\n\n# 漏桶（Leaky Bucket）\n漏桶算法<sup>[1]</sup>的核心逻辑为以下几点：\n1. 实现了一个固定容量的桶；\n2. 桶的输出速率保证恒定，一旦桶内请求为空则停止输出；\n3. 一旦桶溢出，则溢出流量会被丢弃。\n\n![Leaky Bucket 原理图](/images/leaky_bucket.jpeg \"Leaky Bucket 原理图\")\n\n漏桶的实现在单机上可以利用队列（queue）完成，分布式环境可以使用Redis或者其他消息中间件。\n\n# 令牌桶（Token Bucket）\n令牌桶<sup>[1]</sup>根据令牌的数量来控制请求速率。每秒钟会平均往桶内放n个令牌，每次请求到达会消耗掉桶内X个令牌，一旦桶内剩余令牌≤X则请求放入缓存区等待或者丢弃。\n\n![[Token Bucket 原理图](https://www.quora.com/What-is-the-difference-between-token-bucket-and-leaky-bucket-algorithms)](/images/token_bucket.gif \"Token Bucket 原理图\")\n\n令牌桶对于不同突发状况有比较好的处理能力，以Google的Java开源项目[Guava](https://github.com/google/guava/blob/master/guava/src/com/google/common/util/concurrent/RateLimiter.java)<sup>[4]</sup>为例，针对RateLimiter提供了两个实用的子类：平滑突发限流（SmoothBusrty）和平滑预热限流（SmoothWarmingUp）。\n\nSmoothBursty能够很好地应对突发流量。当流量突然变大的时候，会立刻消耗掉桶内令牌，之后流量输出取决于令牌自增速率，达到一个平缓的输出速率；当流量突然变小的时候，流量会立即消耗掉桶内令牌。输出流量会呈现一个逼近恒定速率的趋势，但是具体速率由实时系统流量和令牌自增速率共同**动态**决定。\n\nSmoothWarmingUp适用于**下游服务需要预热**的场景。创建限流器的时候可以设定参数如下：\n```java\n// 令牌自增速率为2个/秒，缓冲时间为3s\nRateLimiter r = RateLimiter.create(2,3,TimeUnit.SECONDS);\n```\n在这样的设置下，在前3s令牌不会每0.5s发放一次，而是会形成平缓线性下降的坡度。比方说1.5s发放第一个，0.9s发放第二个，0.6s发放第三个。在3s之后，发放速率会恢复设定的速率。\n\n# 漏桶 vs 令牌桶\n1. 漏桶输出速率恒定，令牌桶输出速率由令牌自增速率与输入流量决定。增加令牌自增速率能够提高限流器上限。有突发流量（burst）时令牌桶输出速率可以动态提高\n2. 当漏桶满了之后，输入流量会被丢弃。当令牌桶满了之后，输入可以被缓存或者丢弃；\n\n一般来说漏桶被用在traffic policing的场景中，即network需要满足某一个contract，一旦超过contract，traffic shaping就会拒绝多余的流量请求，保证传输带宽；令牌桶多用在rate limit的场景中，更加灵活和动态。Uber的批处理系统中对限流的处理就运用到了这种令牌桶的设计原理。\n\n# Reference\n* [1] <https://www.quora.com/What-is-the-difference-between-token-bucket-and-leaky-bucket-algorithms> \"What is the difference between token bucket and leaky bucket algorithms?\"\n* [2] <https://www.figma.com/blog/an-alternative-approach-to-rate-limiting/> \"An alternative approach to rate limiting\"\n* [3] <https://mp.weixin.qq.com/s/b4yqLSqNz7_vcGLRmhG0rw> \"高并发系统中的限流应该如何做？\"\n* [4] <https://github.com/google/guava> \"google/guava\"\n\n","slug":"高并发系统的降级处理——限流","published":1,"updated":"2019-12-25T04:38:30.288Z","_id":"ck4mhzf6q00074a9291n9803t","comments":1,"layout":"post","photos":[],"link":"","content":"<p>在服务器流量波动的情况下，我们需要根据下游服务器容量、业务要求等等对系统进行策略性的保护。保护策略有很多种，包括：</p>\n<ol>\n<li>限流（Rate limit）：限制系统输入输出以达到维持服务稳定的目的；</li>\n<li>熔断（Circuit break）：在系统收到过多failing response的时候，拒绝系统输出；</li>\n<li>减载（Load shedding）：在系统输入请求响应时间过长的时候，拒绝系统输入。</li>\n</ol>\n<p>一般来说，常见的限流算法有三种：滑动窗口（sliding window），漏桶（leaky bucket）以及令牌桶（token bucket）算法。</p>\n<a id=\"more\"></a>\n\n<h1 id=\"滑动窗口（Sliding-Window）\"><a href=\"#滑动窗口（Sliding-Window）\" class=\"headerlink\" title=\"滑动窗口（Sliding Window）\"></a>滑动窗口（Sliding Window）</h1><p>滑动窗口算法比较简单粗暴。比方说我们需要100 qps的限流，我们将1s分为十个100ms的格子，格子之间通过链表（linkedlist）的方式连接。然后我们设置一个1s的窗口，每100ms在链表尾部新加一个格子，然后删掉队头的格子，保证1s的窗口内始终有十个格子。</p>\n<p>每个格子内会记录到底的请求，请求到来的时候会首先查看当前1s内总访问量，如果超过100s则进入缓存等待或者丢弃，否则队尾格子进行计数。</p>\n<p>滑动窗口算法的优势在于实现简单，内存友好。存在的问题是精度由格子的粒度决定。格子细粒度越高，窗口滑动越平滑，限流统计就越精确。</p>\n<p><img alt=\"Sliding Window 原理图\" title=\"Sliding Window 原理图\" data-src=\"/images/sliding_window.jpeg\" class=\"lazyload\"></p>\n<h1 id=\"漏桶（Leaky-Bucket）\"><a href=\"#漏桶（Leaky-Bucket）\" class=\"headerlink\" title=\"漏桶（Leaky Bucket）\"></a>漏桶（Leaky Bucket）</h1><p>漏桶算法<sup>[1]</sup>的核心逻辑为以下几点：</p>\n<ol>\n<li>实现了一个固定容量的桶；</li>\n<li>桶的输出速率保证恒定，一旦桶内请求为空则停止输出；</li>\n<li>一旦桶溢出，则溢出流量会被丢弃。</li>\n</ol>\n<p><img alt=\"Leaky Bucket 原理图\" title=\"Leaky Bucket 原理图\" data-src=\"/images/leaky_bucket.jpeg\" class=\"lazyload\"></p>\n<p>漏桶的实现在单机上可以利用队列（queue）完成，分布式环境可以使用Redis或者其他消息中间件。</p>\n<h1 id=\"令牌桶（Token-Bucket）\"><a href=\"#令牌桶（Token-Bucket）\" class=\"headerlink\" title=\"令牌桶（Token Bucket）\"></a>令牌桶（Token Bucket）</h1><p>令牌桶<sup>[1]</sup>根据令牌的数量来控制请求速率。每秒钟会平均往桶内放n个令牌，每次请求到达会消耗掉桶内X个令牌，一旦桶内剩余令牌≤X则请求放入缓存区等待或者丢弃。</p>\n<p><img alt=\"[Token Bucket 原理图](https://www.quora.com/What-is-the-difference-between-token-bucket-and-leaky-bucket-algorithms)\" title=\"Token Bucket 原理图\" data-src=\"/images/token_bucket.gif\" class=\"lazyload\"></p>\n<p>令牌桶对于不同突发状况有比较好的处理能力，以Google的Java开源项目<a href=\"https://github.com/google/guava/blob/master/guava/src/com/google/common/util/concurrent/RateLimiter.java\" target=\"_blank\" rel=\"noopener\">Guava</a><sup>[4]</sup>为例，针对RateLimiter提供了两个实用的子类：平滑突发限流（SmoothBusrty）和平滑预热限流（SmoothWarmingUp）。</p>\n<p>SmoothBursty能够很好地应对突发流量。当流量突然变大的时候，会立刻消耗掉桶内令牌，之后流量输出取决于令牌自增速率，达到一个平缓的输出速率；当流量突然变小的时候，流量会立即消耗掉桶内令牌。输出流量会呈现一个逼近恒定速率的趋势，但是具体速率由实时系统流量和令牌自增速率共同<strong>动态</strong>决定。</p>\n<p>SmoothWarmingUp适用于<strong>下游服务需要预热</strong>的场景。创建限流器的时候可以设定参数如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 令牌自增速率为2个/秒，缓冲时间为3s</span></span><br><span class=\"line\">RateLimiter r = RateLimiter.create(<span class=\"number\">2</span>,<span class=\"number\">3</span>,TimeUnit.SECONDS);</span><br></pre></td></tr></table></figure>\n<p>在这样的设置下，在前3s令牌不会每0.5s发放一次，而是会形成平缓线性下降的坡度。比方说1.5s发放第一个，0.9s发放第二个，0.6s发放第三个。在3s之后，发放速率会恢复设定的速率。</p>\n<h1 id=\"漏桶-vs-令牌桶\"><a href=\"#漏桶-vs-令牌桶\" class=\"headerlink\" title=\"漏桶 vs 令牌桶\"></a>漏桶 vs 令牌桶</h1><ol>\n<li>漏桶输出速率恒定，令牌桶输出速率由令牌自增速率与输入流量决定。增加令牌自增速率能够提高限流器上限。有突发流量（burst）时令牌桶输出速率可以动态提高</li>\n<li>当漏桶满了之后，输入流量会被丢弃。当令牌桶满了之后，输入可以被缓存或者丢弃；</li>\n</ol>\n<p>一般来说漏桶被用在traffic policing的场景中，即network需要满足某一个contract，一旦超过contract，traffic shaping就会拒绝多余的流量请求，保证传输带宽；令牌桶多用在rate limit的场景中，更加灵活和动态。Uber的批处理系统中对限流的处理就运用到了这种令牌桶的设计原理。</p>\n<h1 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h1><ul>\n<li>[1] <a href=\"https://www.quora.com/What-is-the-difference-between-token-bucket-and-leaky-bucket-algorithms\" target=\"_blank\" rel=\"noopener\">https://www.quora.com/What-is-the-difference-between-token-bucket-and-leaky-bucket-algorithms</a> “What is the difference between token bucket and leaky bucket algorithms?”</li>\n<li>[2] <a href=\"https://www.figma.com/blog/an-alternative-approach-to-rate-limiting/\" target=\"_blank\" rel=\"noopener\">https://www.figma.com/blog/an-alternative-approach-to-rate-limiting/</a> “An alternative approach to rate limiting”</li>\n<li>[3] <a href=\"https://mp.weixin.qq.com/s/b4yqLSqNz7_vcGLRmhG0rw\" target=\"_blank\" rel=\"noopener\">https://mp.weixin.qq.com/s/b4yqLSqNz7_vcGLRmhG0rw</a> “高并发系统中的限流应该如何做？”</li>\n<li>[4] <a href=\"https://github.com/google/guava\" target=\"_blank\" rel=\"noopener\">https://github.com/google/guava</a> “google/guava”</li>\n</ul>\n","site":{"data":{"butterfly":{"menu":{"首页":"/ || fa fa-home","归档":"/archives/ || fa fa-archive","标签":"/tags/ || fa fa-tags","分类":"/categories/ || fa fa-folder-open","关于":"/about/ || fa fa-heart"},"favicon":"/img/favicon.ico","highlight_theme":"light","highlight_copy":true,"highlight_lang":true,"highlight_shrink":false,"code_word_wrap":true,"copy":{"enable":true,"copyright":false},"social":{"fa fa-github":"https://github.com/DavidCorn","fa fa-envelope":"mailto:qiyaoq@gmail.com"},"algolia_search":{"enable":false,"hits":{"per_page":6},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}"}},"mathjax":{"enable":false},"katex":{"enable":false,"hide_scrollbar":true},"google_analytics":null,"avatar":"/images/avatar.png","top_img":"https://i.loli.net/2019/05/22/5ce53eb6dc82757840.jpg","default_top_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/top_img_index.jpg","default_cover":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/cover/default_bg.png","archive_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/Photo/archive.jpg","tag_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/tag-bg.png","category_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/category-bg","movies_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN/Photo/movie.jpg","lodding_bg":{"flink":"/img/friend_404.gif","post_page":"/img/404.jpg"},"post_meta":{"date_type":"both","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":true},"auto_open_sidebar":{"enable":true},"post_copyright":{"enable":false,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":false,"length":150},"addThis":{"enable":false,"pubid":null},"sharejs":{"enable":false,"sites":"facebook,twitter,wechat,weibo,qq"},"addtoany":{"enable":false,"item":["facebook","twitter","wechat","sina_weibo","facebook_messenger","email","copy_link"]},"disqus":{"enable":true,"shortname":"qinqiyao"},"valine":{"enable":false,"appId":null,"appKey":null,"notify":false,"verify":false,"pageSize":10,"avatar":"monsterid","lang":"en","placeholder":"Please leave your footprints","guest_info":"nick,mail,link","bg":"/img/comment_bg.png"},"since":2019,"footer_custom_text":"嗝。","footer_copyright":{"enable":false},"ICP":{"enable":false,"url":null,"text":null,"icon":"/img/icp.png"},"google_site_verification":"PWQ1yLiuc_CfANusvurPYyvSg56SLMe3Ar6XvPcn5fw","bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"Flink":{"headline":"友情鏈接","info_headline":"我的Blog資料","name":"Blog 名字： JerryC","address":"Blog 地址： https://jerryc.me/","avatar":"Blog 頭像： https://jerryc.me/img/avatar.png","info":"Blog 簡介： 今日事,今日畢","comment":"如果需要交換友鏈,請留言"},"reward":{"enable":true,"QR_code":[{"itemlist":{"img":"/images/wechatpay.jpg","text":"微信"}}]},"related_post":{"enable":true,"limit":6},"index_site_info_top":null,"index_top_img_height":null,"category_ui":null,"tag_ui":null,"background":null,"footer_bg":true,"canvas_ribbon":{"enable":false,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false,"mobile":false},"canvas_ribbon_piao":{"enable":false,"mobile":false},"canvas_nest":{"enable":true,"color":"0,0,255","opacity":0.7,"zIndex":-1,"count":99,"mobile":false},"activate_power_mode":{"enable":false},"fireworks":{"enable":false},"click_heart":{"enable":false},"ClickShowText":{"enable":false,"text":["富强","民主","文明","和谐","自由","平等","公正","法治","爱国","敬业","诚信","友善"],"fontSize":"15px"},"avatar_effect":false,"display_mode":"light","post_beautify":{"enable":false,"title-prefix-icon":"\\f0c1","title-prefix-icon-color":"#F47466"},"font":{"enable":false,"font-family":"Lato, Helvetica Neue For Number, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, PingFang SC, Hiragino Sans GB, MicrMicrosoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif","code-font":"consolas, Menlo, \"PingFang SC\", \"Microsoft YaHei\", monospace, Helvetica Neue For Number"},"blog_title_font":{"font_link":"https://fonts.googleapis.com/css?family=Titillium+Web","font-family":"Titillium Web, PingFang SC, Hiragino Sans GB, \"Microsoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif"},"hr":{"enable":false,"icon":"\\f21c","icon-top":"-20px"},"subtitle":{"enable":true,"source":false,"sub":["Tech&#44;","Live&#44;","Fun&#44;","etc."]},"aside":{"position":"right","card_author":true,"card_announcement":true,"card_recent_post":true,"card_categories":true,"card_tags":true,"card_archives":true,"card_webinfo":true},"announcement":{"content":"欢迎留言，打赏，转载么么哒"},"busuanzi":{"site_uv":true,"site_pv":true,"page_pv":true},"runtimeshow":{"enable":true,"start_date":"12/11/2019 00:00:00"},"translate":{"enable":false,"default":"繁","defaultEncoding":2,"translateDelay":0,"cookieDomain":"https://xxx/","msgToTraditionalChinese":"繁","msgToSimplifiedChinese":"简"},"readmode":{"enable":true},"darkmode":{"enable":true},"autoChangeMode":1,"medium_zoom":{"enable":true},"snackbar":{"enable":false,"position":"bottom-left","bg_light":"#49b1f5","bg_dark":"#2d3035"},"baidu_push":{"enable":false},"instantpage":{"enable":true},"note":{"style":"flat","icons":true,"border_radius":3,"light_bg_offset":0},"lazyload":{"enable":true},"canonical":true,"disable_baidu_transformation":true,"twitter_meta":true,"Open_Graph_meta":true,"CDN_USE":{"css":["/css/index.css","https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"],"js":["https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","/js/utils.js","/js/main.js"]},"CDN":{"blueimp_md5":"https://cdn.jsdelivr.net/npm/blueimp-md5@2.10.0/js/md5.min.js","gitalk":"https://cdn.jsdelivr.net/npm/gitalk@latest/dist/gitalk.min.js","gitalk_css":"https://cdn.jsdelivr.net/npm/gitalk/dist/gitalk.min.css","valine":"https://cdn.jsdelivr.net/npm/valine/dist/Valine.min.js","addtoany":"https://static.addtoany.com/menu/page.js","sharejs":"https://cdn.jsdelivr.net/npm/social-share.js@1.0.16/dist/js/social-share.min.js","sharejs_css":"https://cdn.jsdelivr.net/npm/social-share.js@1.0.16/dist/css/share.min.css","algolia_search":"https://cdn.jsdelivr.net/npm/instantsearch.js@2.1.1/dist/instantsearch.min.js","algolia_search_css":"https://cdn.jsdelivr.net/npm/instantsearch.js@2.1.1/dist/instantsearch.min.css","algolia_js":"/js/search/algolia.js","local_search":"/js/search/local-search.js","mathjax":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML","katex":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css","katex_copytex":"https://cdn.jsdelivr.net/npm/katex-copytex@latest/dist/katex-copytex.min.js","katex_copytex_css":"https://cdn.jsdelivr.net/npm/katex-copytex@latest/dist/katex-copytex.min.css","busuanzi":"//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js","canvas_ribbon":"/js/third-party/canvas-ribbon.js","canvas_ribbon_piao":"/js/third-party/piao.js","canvas_nest":"/js/third-party/canvas-nest.js","lazyload":"https://cdn.jsdelivr.net/npm/lazysizes@latest/lazysizes.min.js","instantpage":"https://cdn.jsdelivr.net/npm/instant.page@latest/instantpage.min.js","typed":"https://cdn.jsdelivr.net/npm/typed.js","js_cookies":"https://cdn.jsdelivr.net/npm/js-cookie/dist/js.cookie.min.js","fancybox_css":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.css","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","medium_zoom":"https://cdn.jsdelivr.net/npm/medium-zoom/dist/medium-zoom.min.js","snackbar_css":"https://cdn.jsdelivr.net/npm/node-snackbar@0.1.15/dist/snackbar.min.css","snackbar":"https://cdn.jsdelivr.net/npm/node-snackbar@0.1.15/dist/snackbar.min.js","anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","activate_power_mode":"/js/third-party/activate-power-mode.js","fireworks":"/js/third-party/fireworks.js","click_heart":"/js/third-party/click_heart.js","ClickShowText":"/js/third-party/ClickShowText.js","translate":"/js/tw_cn.js","runtimeshow":"js/runtimeshow.js"},"rootConfig":{"title":"土豆不加冰","subtitle":"","description":"Tech, live, fun, etc.","author":"Qiyao Qin","language":"zh-CN","timezone":"","url":"http://qinqiyao.com","root":"/","permalink":":year/:month/:day/:title/","permalink_defaults":null,"pretty_urls":{"trailing_index":true,"trailing_html":true},"source_dir":"source","public_dir":"public","tag_dir":"tags","archive_dir":"archives","category_dir":"categories","code_dir":"downloads/code","i18n_dir":":lang","skip_render":null,"new_post_name":":title.md","default_layout":"post","titlecase":false,"external_link":{"enable":true,"field":"site","exclude":""},"filename_case":0,"render_drafts":false,"post_asset_folder":false,"relative_link":false,"future":true,"highlight":{"enable":true,"auto_detect":false,"line_number":true,"tab_replace":"","wrap":true,"hljs":false,"first_line_number":"always1"},"default_category":"uncategorized","category_map":null,"tag_map":null,"date_format":"YYYY-MM-DD","time_format":"HH:mm:ss","use_date_for_updated":false,"per_page":10,"pagination_dir":"page","theme":"Butterfly","deploy":{"type":"git","repo":"git@github.com:DavidCorn/DavidCorn.github.io.git","branch":"master"},"ignore":null,"meta_generator":true,"keywords":null,"index_generator":{"per_page":10,"order_by":"-date","path":""},"include":null,"exclude":null,"Plugins":["hexo-generator-baidu-sitemap","hexo-generator-sitemap"],"baidusitemap":{"path":"baidusitemap.xml"},"sitemap":{"path":"sitemap.xml","rel":false},"search":{"path":"search.xml","field":"post","content":true,"format":"html","limit":10000},"archive_generator":{"per_page":10,"yearly":true,"monthly":true,"daily":false},"category_generator":{"per_page":10},"tag_generator":{"per_page":10},"marked":{"gfm":true,"pedantic":false,"breaks":true,"smartLists":true,"smartypants":true,"modifyAnchors":"","autolink":true,"sanitizeUrl":false,"headerIds":true},"server":{"port":4000,"log":false,"compress":false,"header":true}}}}},"excerpt":"<p>在服务器流量波动的情况下，我们需要根据下游服务器容量、业务要求等等对系统进行策略性的保护。保护策略有很多种，包括：</p>\n<ol>\n<li>限流（Rate limit）：限制系统输入输出以达到维持服务稳定的目的；</li>\n<li>熔断（Circuit break）：在系统收到过多failing response的时候，拒绝系统输出；</li>\n<li>减载（Load shedding）：在系统输入请求响应时间过长的时候，拒绝系统输入。</li>\n</ol>\n<p>一般来说，常见的限流算法有三种：滑动窗口（sliding window），漏桶（leaky bucket）以及令牌桶（token bucket）算法。</p>","more":"<h1 id=\"滑动窗口（Sliding-Window）\"><a href=\"#滑动窗口（Sliding-Window）\" class=\"headerlink\" title=\"滑动窗口（Sliding Window）\"></a>滑动窗口（Sliding Window）</h1><p>滑动窗口算法比较简单粗暴。比方说我们需要100 qps的限流，我们将1s分为十个100ms的格子，格子之间通过链表（linkedlist）的方式连接。然后我们设置一个1s的窗口，每100ms在链表尾部新加一个格子，然后删掉队头的格子，保证1s的窗口内始终有十个格子。</p>\n<p>每个格子内会记录到底的请求，请求到来的时候会首先查看当前1s内总访问量，如果超过100s则进入缓存等待或者丢弃，否则队尾格子进行计数。</p>\n<p>滑动窗口算法的优势在于实现简单，内存友好。存在的问题是精度由格子的粒度决定。格子细粒度越高，窗口滑动越平滑，限流统计就越精确。</p>\n<p><img src=\"/images/sliding_window.jpeg\" alt=\"Sliding Window 原理图\" title=\"Sliding Window 原理图\"></p>\n<h1 id=\"漏桶（Leaky-Bucket）\"><a href=\"#漏桶（Leaky-Bucket）\" class=\"headerlink\" title=\"漏桶（Leaky Bucket）\"></a>漏桶（Leaky Bucket）</h1><p>漏桶算法<sup>[1]</sup>的核心逻辑为以下几点：</p>\n<ol>\n<li>实现了一个固定容量的桶；</li>\n<li>桶的输出速率保证恒定，一旦桶内请求为空则停止输出；</li>\n<li>一旦桶溢出，则溢出流量会被丢弃。</li>\n</ol>\n<p><img src=\"/images/leaky_bucket.jpeg\" alt=\"Leaky Bucket 原理图\" title=\"Leaky Bucket 原理图\"></p>\n<p>漏桶的实现在单机上可以利用队列（queue）完成，分布式环境可以使用Redis或者其他消息中间件。</p>\n<h1 id=\"令牌桶（Token-Bucket）\"><a href=\"#令牌桶（Token-Bucket）\" class=\"headerlink\" title=\"令牌桶（Token Bucket）\"></a>令牌桶（Token Bucket）</h1><p>令牌桶<sup>[1]</sup>根据令牌的数量来控制请求速率。每秒钟会平均往桶内放n个令牌，每次请求到达会消耗掉桶内X个令牌，一旦桶内剩余令牌≤X则请求放入缓存区等待或者丢弃。</p>\n<p><img src=\"/images/token_bucket.gif\" alt=\"[Token Bucket 原理图](https://www.quora.com/What-is-the-difference-between-token-bucket-and-leaky-bucket-algorithms)\" title=\"Token Bucket 原理图\"></p>\n<p>令牌桶对于不同突发状况有比较好的处理能力，以Google的Java开源项目<a href=\"https://github.com/google/guava/blob/master/guava/src/com/google/common/util/concurrent/RateLimiter.java\" target=\"_blank\" rel=\"noopener\">Guava</a><sup>[4]</sup>为例，针对RateLimiter提供了两个实用的子类：平滑突发限流（SmoothBusrty）和平滑预热限流（SmoothWarmingUp）。</p>\n<p>SmoothBursty能够很好地应对突发流量。当流量突然变大的时候，会立刻消耗掉桶内令牌，之后流量输出取决于令牌自增速率，达到一个平缓的输出速率；当流量突然变小的时候，流量会立即消耗掉桶内令牌。输出流量会呈现一个逼近恒定速率的趋势，但是具体速率由实时系统流量和令牌自增速率共同<strong>动态</strong>决定。</p>\n<p>SmoothWarmingUp适用于<strong>下游服务需要预热</strong>的场景。创建限流器的时候可以设定参数如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 令牌自增速率为2个/秒，缓冲时间为3s</span></span><br><span class=\"line\">RateLimiter r = RateLimiter.create(<span class=\"number\">2</span>,<span class=\"number\">3</span>,TimeUnit.SECONDS);</span><br></pre></td></tr></table></figure>\n<p>在这样的设置下，在前3s令牌不会每0.5s发放一次，而是会形成平缓线性下降的坡度。比方说1.5s发放第一个，0.9s发放第二个，0.6s发放第三个。在3s之后，发放速率会恢复设定的速率。</p>\n<h1 id=\"漏桶-vs-令牌桶\"><a href=\"#漏桶-vs-令牌桶\" class=\"headerlink\" title=\"漏桶 vs 令牌桶\"></a>漏桶 vs 令牌桶</h1><ol>\n<li>漏桶输出速率恒定，令牌桶输出速率由令牌自增速率与输入流量决定。增加令牌自增速率能够提高限流器上限。有突发流量（burst）时令牌桶输出速率可以动态提高</li>\n<li>当漏桶满了之后，输入流量会被丢弃。当令牌桶满了之后，输入可以被缓存或者丢弃；</li>\n</ol>\n<p>一般来说漏桶被用在traffic policing的场景中，即network需要满足某一个contract，一旦超过contract，traffic shaping就会拒绝多余的流量请求，保证传输带宽；令牌桶多用在rate limit的场景中，更加灵活和动态。Uber的批处理系统中对限流的处理就运用到了这种令牌桶的设计原理。</p>\n<h1 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h1><ul>\n<li>[1] <a href=\"https://www.quora.com/What-is-the-difference-between-token-bucket-and-leaky-bucket-algorithms\" target=\"_blank\" rel=\"noopener\">https://www.quora.com/What-is-the-difference-between-token-bucket-and-leaky-bucket-algorithms</a> “What is the difference between token bucket and leaky bucket algorithms?”</li>\n<li>[2] <a href=\"https://www.figma.com/blog/an-alternative-approach-to-rate-limiting/\" target=\"_blank\" rel=\"noopener\">https://www.figma.com/blog/an-alternative-approach-to-rate-limiting/</a> “An alternative approach to rate limiting”</li>\n<li>[3] <a href=\"https://mp.weixin.qq.com/s/b4yqLSqNz7_vcGLRmhG0rw\" target=\"_blank\" rel=\"noopener\">https://mp.weixin.qq.com/s/b4yqLSqNz7_vcGLRmhG0rw</a> “高并发系统中的限流应该如何做？”</li>\n<li>[4] <a href=\"https://github.com/google/guava\" target=\"_blank\" rel=\"noopener\">https://github.com/google/guava</a> “google/guava”</li>\n</ul>"},{"title":"如何从Hive中获取最大分区数据","date":"2019-12-28T20:41:47.000Z","description":"本文介绍了获取Hive最新分区 (partition) 数据的方法和优化小技巧，以及背后的原理。","cover":"/images/apache_hive_icon.png","_content":"\n# 案例分析\n最近在工作中遇到了这样一个场景：我们有一个Hive table，分区 (partition) 按照日期划分。ETL pipeline需要在执行过程中选择日期最近的分区数据。在Spark环境下，最直接的做法是这样的：\n\n```python\nmost_recent_date = spark.sql(\n\t\"SELECT max(partition_name) from table_name\"\n).first()[0]\n\n# 当然在实际代码中不要使用 SELECT * 这种语法，这里只是为了方便起见。\nresult = spark.sql(\n\t\"\"\"\n\tSELECT * FROM table_name where partition_name = {partition}\n\t\"\"\".format(partition=most_recent_date)\n)\n```\n\n利用Spark进行数据处理，对3TB/单一partition的数据集，花费时间为117s。在查阅相关资料<sup>[1]</sup>后我发现还有另外一种做法，通过show table的方式拿到所有的partition然后选择最新的partition。PySpark实现方法如下：\n\n```python\nmost_recent_date = spark.sql(\n\t\"SHOW PARTITIONS table_name\"\n).rdd.flatMap(\n\tlambda x: x\n).map(\n\tlambda x: x.replace('partition_name=', '')\n).max()\n\nresult = spark.sql(\n\t\"\"\"\n\tSELECT * FROM table_name where partition_name = {partition}\n\t\"\"\".format(partition=most_recent_date)\n)\n```\n\n用同样的数据集进行测试，花费时间降低到了0.2s。之所以有这么大的改进，原因要从Hive的架构说起。\n\n# Hive架构\n![Hive Architecture](/images/hive_arch.png \"Hive Architecture\")\n\nHive的架构可以大致分为四层：\n\n1. 用户接口 (CLI，JDBC)。用户可以通过终端交互(CLI)的方式与Hive进行连接，同时Hive也有基于JDBC (Java Database Connectivity)连接至Hive的服务；\n2. 驱动引擎 Driver。Hive的驱动引擎包含了解析、编译、优化和执行，生成等过程；\n3. 计算层。计算层Hive支持MapReduce，Tez，Spark等多种计算引擎；\n4. 存储层。Hive数据存储包括两个方面，一个是元数据的存储，另一个是数据的持久化。\n\n值得注意的是，在客户端与Driver之间，存在着跨语言服务 (thrift server)，集成多种语言帮助用户调用Hive接口。接下来我们主要来看存储层。\n\n## 元数据 (Metadata) 的存储\nHive元数据主要包括表名，列和分区的属性，以及表的属性（内部表还是外部表）等等。数据库、表、分区对应HDFS下的目录。\n\nHive的元数据默认会存在Hive自带的Derby数据库中。Derby存在的问题是多用户连接操作支持不是很好，并且数据库目录不固定，不方便管理。一般生产环境中我们使用Mysql存储元数据。Mysql与Hive之间通过metastore进行交互。\n\n## 数据存储\n![Hive Data Model](/images/hive_data_model.png \"Hive Data Model\")\n\nHive的数据存储在HDFS中，基本存储单位为表或者分区。表或者分区在Hive内部被称为SD<sup>[2]</sup> (Storage Descriptor)。SD的基本信息存储在metastore中。Hive到底层数据的查询都会转化成MapReduce或者Tez/Spark的作业。\n\n从以上介绍可以发现一点，当我们使用Hive SHOW PARTITION的时候，查询并不会跑到HDFS，而是**直接与metastore进行交互拿到分区的信息**，省略了MapReduce任务和各种编译、优化的环节，大大提高了查询速度。\n\n# 总结\n1. 元数据尽量从metastore中读取，`SELECT * `并不是万金油；\n2. Hive适用于大规模数据的ETL，offline query和需要离线精确结果的场景。如果需要交互式adhoc查询最好移步Presto, Impala；\n\n# Reference\n* [1] <https://stackoverflow.com/questions/55053218/pyspark-getting-latest-partition-from-hive-partitioned-column-logic> \"pyspark - getting Latest partition from Hive partitioned column logic\"\n* [2] <https://www.jianshu.com/p/4ce73f4d0bd5> \"Hive原理及SQL优化\"\n\n\n\n\n\n","source":"_posts/如何从Hive中获取最大分区数据.md","raw":"---\ntitle: 如何从Hive中获取最大分区数据\ndate: 2019-12-28 12:41:47\ntags:\n\t- Apache Spark\n\t- Hive\ncategories: 数据库\ndescription: 本文介绍了获取Hive最新分区 (partition) 数据的方法和优化小技巧，以及背后的原理。\ncover: /images/apache_hive_icon.png\n---\n\n# 案例分析\n最近在工作中遇到了这样一个场景：我们有一个Hive table，分区 (partition) 按照日期划分。ETL pipeline需要在执行过程中选择日期最近的分区数据。在Spark环境下，最直接的做法是这样的：\n\n```python\nmost_recent_date = spark.sql(\n\t\"SELECT max(partition_name) from table_name\"\n).first()[0]\n\n# 当然在实际代码中不要使用 SELECT * 这种语法，这里只是为了方便起见。\nresult = spark.sql(\n\t\"\"\"\n\tSELECT * FROM table_name where partition_name = {partition}\n\t\"\"\".format(partition=most_recent_date)\n)\n```\n\n利用Spark进行数据处理，对3TB/单一partition的数据集，花费时间为117s。在查阅相关资料<sup>[1]</sup>后我发现还有另外一种做法，通过show table的方式拿到所有的partition然后选择最新的partition。PySpark实现方法如下：\n\n```python\nmost_recent_date = spark.sql(\n\t\"SHOW PARTITIONS table_name\"\n).rdd.flatMap(\n\tlambda x: x\n).map(\n\tlambda x: x.replace('partition_name=', '')\n).max()\n\nresult = spark.sql(\n\t\"\"\"\n\tSELECT * FROM table_name where partition_name = {partition}\n\t\"\"\".format(partition=most_recent_date)\n)\n```\n\n用同样的数据集进行测试，花费时间降低到了0.2s。之所以有这么大的改进，原因要从Hive的架构说起。\n\n# Hive架构\n![Hive Architecture](/images/hive_arch.png \"Hive Architecture\")\n\nHive的架构可以大致分为四层：\n\n1. 用户接口 (CLI，JDBC)。用户可以通过终端交互(CLI)的方式与Hive进行连接，同时Hive也有基于JDBC (Java Database Connectivity)连接至Hive的服务；\n2. 驱动引擎 Driver。Hive的驱动引擎包含了解析、编译、优化和执行，生成等过程；\n3. 计算层。计算层Hive支持MapReduce，Tez，Spark等多种计算引擎；\n4. 存储层。Hive数据存储包括两个方面，一个是元数据的存储，另一个是数据的持久化。\n\n值得注意的是，在客户端与Driver之间，存在着跨语言服务 (thrift server)，集成多种语言帮助用户调用Hive接口。接下来我们主要来看存储层。\n\n## 元数据 (Metadata) 的存储\nHive元数据主要包括表名，列和分区的属性，以及表的属性（内部表还是外部表）等等。数据库、表、分区对应HDFS下的目录。\n\nHive的元数据默认会存在Hive自带的Derby数据库中。Derby存在的问题是多用户连接操作支持不是很好，并且数据库目录不固定，不方便管理。一般生产环境中我们使用Mysql存储元数据。Mysql与Hive之间通过metastore进行交互。\n\n## 数据存储\n![Hive Data Model](/images/hive_data_model.png \"Hive Data Model\")\n\nHive的数据存储在HDFS中，基本存储单位为表或者分区。表或者分区在Hive内部被称为SD<sup>[2]</sup> (Storage Descriptor)。SD的基本信息存储在metastore中。Hive到底层数据的查询都会转化成MapReduce或者Tez/Spark的作业。\n\n从以上介绍可以发现一点，当我们使用Hive SHOW PARTITION的时候，查询并不会跑到HDFS，而是**直接与metastore进行交互拿到分区的信息**，省略了MapReduce任务和各种编译、优化的环节，大大提高了查询速度。\n\n# 总结\n1. 元数据尽量从metastore中读取，`SELECT * `并不是万金油；\n2. Hive适用于大规模数据的ETL，offline query和需要离线精确结果的场景。如果需要交互式adhoc查询最好移步Presto, Impala；\n\n# Reference\n* [1] <https://stackoverflow.com/questions/55053218/pyspark-getting-latest-partition-from-hive-partitioned-column-logic> \"pyspark - getting Latest partition from Hive partitioned column logic\"\n* [2] <https://www.jianshu.com/p/4ce73f4d0bd5> \"Hive原理及SQL优化\"\n\n\n\n\n\n","slug":"如何从Hive中获取最大分区数据","published":1,"updated":"2019-12-28T23:36:41.435Z","_id":"ck4q1w2g700005r92cl5b1n94","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"案例分析\"><a href=\"#案例分析\" class=\"headerlink\" title=\"案例分析\"></a>案例分析</h1><p>最近在工作中遇到了这样一个场景：我们有一个Hive table，分区 (partition) 按照日期划分。ETL pipeline需要在执行过程中选择日期最近的分区数据。在Spark环境下，最直接的做法是这样的：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">most_recent_date = spark.sql(</span><br><span class=\"line\">\t<span class=\"string\">\"SELECT max(partition_name) from table_name\"</span></span><br><span class=\"line\">).first()[<span class=\"number\">0</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 当然在实际代码中不要使用 SELECT * 这种语法，这里只是为了方便起见。</span></span><br><span class=\"line\">result = spark.sql(</span><br><span class=\"line\">\t<span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">\tSELECT * FROM table_name where partition_name = &#123;partition&#125;</span></span><br><span class=\"line\"><span class=\"string\">\t\"\"\"</span>.format(partition=most_recent_date)</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p>利用Spark进行数据处理，对3TB/单一partition的数据集，花费时间为117s。在查阅相关资料<sup>[1]</sup>后我发现还有另外一种做法，通过show table的方式拿到所有的partition然后选择最新的partition。PySpark实现方法如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">most_recent_date = spark.sql(</span><br><span class=\"line\">\t<span class=\"string\">\"SHOW PARTITIONS table_name\"</span></span><br><span class=\"line\">).rdd.flatMap(</span><br><span class=\"line\">\t<span class=\"keyword\">lambda</span> x: x</span><br><span class=\"line\">).map(</span><br><span class=\"line\">\t<span class=\"keyword\">lambda</span> x: x.replace(<span class=\"string\">'partition_name='</span>, <span class=\"string\">''</span>)</span><br><span class=\"line\">).max()</span><br><span class=\"line\"></span><br><span class=\"line\">result = spark.sql(</span><br><span class=\"line\">\t<span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">\tSELECT * FROM table_name where partition_name = &#123;partition&#125;</span></span><br><span class=\"line\"><span class=\"string\">\t\"\"\"</span>.format(partition=most_recent_date)</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p>用同样的数据集进行测试，花费时间降低到了0.2s。之所以有这么大的改进，原因要从Hive的架构说起。</p>\n<h1 id=\"Hive架构\"><a href=\"#Hive架构\" class=\"headerlink\" title=\"Hive架构\"></a>Hive架构</h1><p><img alt=\"Hive Architecture\" title=\"Hive Architecture\" data-src=\"/images/hive_arch.png\" class=\"lazyload\"></p>\n<p>Hive的架构可以大致分为四层：</p>\n<ol>\n<li>用户接口 (CLI，JDBC)。用户可以通过终端交互(CLI)的方式与Hive进行连接，同时Hive也有基于JDBC (Java Database Connectivity)连接至Hive的服务；</li>\n<li>驱动引擎 Driver。Hive的驱动引擎包含了解析、编译、优化和执行，生成等过程；</li>\n<li>计算层。计算层Hive支持MapReduce，Tez，Spark等多种计算引擎；</li>\n<li>存储层。Hive数据存储包括两个方面，一个是元数据的存储，另一个是数据的持久化。</li>\n</ol>\n<p>值得注意的是，在客户端与Driver之间，存在着跨语言服务 (thrift server)，集成多种语言帮助用户调用Hive接口。接下来我们主要来看存储层。</p>\n<h2 id=\"元数据-Metadata-的存储\"><a href=\"#元数据-Metadata-的存储\" class=\"headerlink\" title=\"元数据 (Metadata) 的存储\"></a>元数据 (Metadata) 的存储</h2><p>Hive元数据主要包括表名，列和分区的属性，以及表的属性（内部表还是外部表）等等。数据库、表、分区对应HDFS下的目录。</p>\n<p>Hive的元数据默认会存在Hive自带的Derby数据库中。Derby存在的问题是多用户连接操作支持不是很好，并且数据库目录不固定，不方便管理。一般生产环境中我们使用Mysql存储元数据。Mysql与Hive之间通过metastore进行交互。</p>\n<h2 id=\"数据存储\"><a href=\"#数据存储\" class=\"headerlink\" title=\"数据存储\"></a>数据存储</h2><p><img alt=\"Hive Data Model\" title=\"Hive Data Model\" data-src=\"/images/hive_data_model.png\" class=\"lazyload\"></p>\n<p>Hive的数据存储在HDFS中，基本存储单位为表或者分区。表或者分区在Hive内部被称为SD<sup>[2]</sup> (Storage Descriptor)。SD的基本信息存储在metastore中。Hive到底层数据的查询都会转化成MapReduce或者Tez/Spark的作业。</p>\n<p>从以上介绍可以发现一点，当我们使用Hive SHOW PARTITION的时候，查询并不会跑到HDFS，而是<strong>直接与metastore进行交互拿到分区的信息</strong>，省略了MapReduce任务和各种编译、优化的环节，大大提高了查询速度。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><ol>\n<li>元数据尽量从metastore中读取，<code>SELECT *</code>并不是万金油；</li>\n<li>Hive适用于大规模数据的ETL，offline query和需要离线精确结果的场景。如果需要交互式adhoc查询最好移步Presto, Impala；</li>\n</ol>\n<h1 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h1><ul>\n<li>[1] <a href=\"https://stackoverflow.com/questions/55053218/pyspark-getting-latest-partition-from-hive-partitioned-column-logic\" target=\"_blank\" rel=\"noopener\">https://stackoverflow.com/questions/55053218/pyspark-getting-latest-partition-from-hive-partitioned-column-logic</a> “pyspark - getting Latest partition from Hive partitioned column logic”</li>\n<li>[2] <a href=\"https://www.jianshu.com/p/4ce73f4d0bd5\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/4ce73f4d0bd5</a> “Hive原理及SQL优化”</li>\n</ul>\n","site":{"data":{"butterfly":{"menu":{"首页":"/ || fa fa-home","归档":"/archives/ || fa fa-archive","标签":"/tags/ || fa fa-tags","分类":"/categories/ || fa fa-folder-open","关于":"/about/ || fa fa-heart"},"favicon":"/img/favicon.ico","highlight_theme":"light","highlight_copy":true,"highlight_lang":true,"highlight_shrink":false,"code_word_wrap":true,"copy":{"enable":true,"copyright":false},"social":{"fa fa-github":"https://github.com/DavidCorn","fa fa-envelope":"mailto:qiyaoq@gmail.com"},"algolia_search":{"enable":false,"hits":{"per_page":6},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}"}},"mathjax":{"enable":false},"katex":{"enable":false,"hide_scrollbar":true},"google_analytics":null,"avatar":"/images/avatar.png","top_img":"https://i.loli.net/2019/05/22/5ce53eb6dc82757840.jpg","default_top_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/top_img_index.jpg","default_cover":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/cover/default_bg.png","archive_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/Photo/archive.jpg","tag_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/tag-bg.png","category_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/category-bg","movies_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN/Photo/movie.jpg","lodding_bg":{"flink":"/img/friend_404.gif","post_page":"/img/404.jpg"},"post_meta":{"date_type":"both","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":true},"auto_open_sidebar":{"enable":true},"post_copyright":{"enable":false,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":false,"length":150},"addThis":{"enable":false,"pubid":null},"sharejs":{"enable":false,"sites":"facebook,twitter,wechat,weibo,qq"},"addtoany":{"enable":false,"item":["facebook","twitter","wechat","sina_weibo","facebook_messenger","email","copy_link"]},"disqus":{"enable":true,"shortname":"qinqiyao"},"valine":{"enable":false,"appId":null,"appKey":null,"notify":false,"verify":false,"pageSize":10,"avatar":"monsterid","lang":"en","placeholder":"Please leave your footprints","guest_info":"nick,mail,link","bg":"/img/comment_bg.png"},"since":2019,"footer_custom_text":"嗝。","footer_copyright":{"enable":false},"ICP":{"enable":false,"url":null,"text":null,"icon":"/img/icp.png"},"google_site_verification":"PWQ1yLiuc_CfANusvurPYyvSg56SLMe3Ar6XvPcn5fw","bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"Flink":{"headline":"友情鏈接","info_headline":"我的Blog資料","name":"Blog 名字： JerryC","address":"Blog 地址： https://jerryc.me/","avatar":"Blog 頭像： https://jerryc.me/img/avatar.png","info":"Blog 簡介： 今日事,今日畢","comment":"如果需要交換友鏈,請留言"},"reward":{"enable":true,"QR_code":[{"itemlist":{"img":"/images/wechatpay.jpg","text":"微信"}}]},"related_post":{"enable":true,"limit":6},"index_site_info_top":null,"index_top_img_height":null,"category_ui":null,"tag_ui":null,"background":null,"footer_bg":true,"canvas_ribbon":{"enable":false,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false,"mobile":false},"canvas_ribbon_piao":{"enable":false,"mobile":false},"canvas_nest":{"enable":true,"color":"0,0,255","opacity":0.7,"zIndex":-1,"count":99,"mobile":false},"activate_power_mode":{"enable":false},"fireworks":{"enable":false},"click_heart":{"enable":false},"ClickShowText":{"enable":false,"text":["富强","民主","文明","和谐","自由","平等","公正","法治","爱国","敬业","诚信","友善"],"fontSize":"15px"},"avatar_effect":false,"display_mode":"light","post_beautify":{"enable":false,"title-prefix-icon":"\\f0c1","title-prefix-icon-color":"#F47466"},"font":{"enable":false,"font-family":"Lato, Helvetica Neue For Number, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, PingFang SC, Hiragino Sans GB, MicrMicrosoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif","code-font":"consolas, Menlo, \"PingFang SC\", \"Microsoft YaHei\", monospace, Helvetica Neue For Number"},"blog_title_font":{"font_link":"https://fonts.googleapis.com/css?family=Titillium+Web","font-family":"Titillium Web, PingFang SC, Hiragino Sans GB, \"Microsoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif"},"hr":{"enable":false,"icon":"\\f21c","icon-top":"-20px"},"subtitle":{"enable":true,"source":false,"sub":["Tech&#44;","Live&#44;","Fun&#44;","etc."]},"aside":{"position":"right","card_author":true,"card_announcement":true,"card_recent_post":true,"card_categories":true,"card_tags":true,"card_archives":true,"card_webinfo":true},"announcement":{"content":"欢迎留言，打赏，转载么么哒"},"busuanzi":{"site_uv":true,"site_pv":true,"page_pv":true},"runtimeshow":{"enable":true,"start_date":"12/11/2019 00:00:00"},"translate":{"enable":false,"default":"繁","defaultEncoding":2,"translateDelay":0,"cookieDomain":"https://xxx/","msgToTraditionalChinese":"繁","msgToSimplifiedChinese":"简"},"readmode":{"enable":true},"darkmode":{"enable":true},"autoChangeMode":1,"medium_zoom":{"enable":true},"snackbar":{"enable":false,"position":"bottom-left","bg_light":"#49b1f5","bg_dark":"#2d3035"},"baidu_push":{"enable":false},"instantpage":{"enable":true},"note":{"style":"flat","icons":true,"border_radius":3,"light_bg_offset":0},"lazyload":{"enable":true},"canonical":true,"disable_baidu_transformation":true,"twitter_meta":true,"Open_Graph_meta":true,"CDN_USE":{"css":["/css/index.css","https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"],"js":["https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","/js/utils.js","/js/main.js"]},"CDN":{"blueimp_md5":"https://cdn.jsdelivr.net/npm/blueimp-md5@2.10.0/js/md5.min.js","gitalk":"https://cdn.jsdelivr.net/npm/gitalk@latest/dist/gitalk.min.js","gitalk_css":"https://cdn.jsdelivr.net/npm/gitalk/dist/gitalk.min.css","valine":"https://cdn.jsdelivr.net/npm/valine/dist/Valine.min.js","addtoany":"https://static.addtoany.com/menu/page.js","sharejs":"https://cdn.jsdelivr.net/npm/social-share.js@1.0.16/dist/js/social-share.min.js","sharejs_css":"https://cdn.jsdelivr.net/npm/social-share.js@1.0.16/dist/css/share.min.css","algolia_search":"https://cdn.jsdelivr.net/npm/instantsearch.js@2.1.1/dist/instantsearch.min.js","algolia_search_css":"https://cdn.jsdelivr.net/npm/instantsearch.js@2.1.1/dist/instantsearch.min.css","algolia_js":"/js/search/algolia.js","local_search":"/js/search/local-search.js","mathjax":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML","katex":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css","katex_copytex":"https://cdn.jsdelivr.net/npm/katex-copytex@latest/dist/katex-copytex.min.js","katex_copytex_css":"https://cdn.jsdelivr.net/npm/katex-copytex@latest/dist/katex-copytex.min.css","busuanzi":"//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js","canvas_ribbon":"/js/third-party/canvas-ribbon.js","canvas_ribbon_piao":"/js/third-party/piao.js","canvas_nest":"/js/third-party/canvas-nest.js","lazyload":"https://cdn.jsdelivr.net/npm/lazysizes@latest/lazysizes.min.js","instantpage":"https://cdn.jsdelivr.net/npm/instant.page@latest/instantpage.min.js","typed":"https://cdn.jsdelivr.net/npm/typed.js","js_cookies":"https://cdn.jsdelivr.net/npm/js-cookie/dist/js.cookie.min.js","fancybox_css":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.css","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","medium_zoom":"https://cdn.jsdelivr.net/npm/medium-zoom/dist/medium-zoom.min.js","snackbar_css":"https://cdn.jsdelivr.net/npm/node-snackbar@0.1.15/dist/snackbar.min.css","snackbar":"https://cdn.jsdelivr.net/npm/node-snackbar@0.1.15/dist/snackbar.min.js","anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","activate_power_mode":"/js/third-party/activate-power-mode.js","fireworks":"/js/third-party/fireworks.js","click_heart":"/js/third-party/click_heart.js","ClickShowText":"/js/third-party/ClickShowText.js","translate":"/js/tw_cn.js","runtimeshow":"js/runtimeshow.js"}}}},"excerpt":"","more":"<h1 id=\"案例分析\"><a href=\"#案例分析\" class=\"headerlink\" title=\"案例分析\"></a>案例分析</h1><p>最近在工作中遇到了这样一个场景：我们有一个Hive table，分区 (partition) 按照日期划分。ETL pipeline需要在执行过程中选择日期最近的分区数据。在Spark环境下，最直接的做法是这样的：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">most_recent_date = spark.sql(</span><br><span class=\"line\">\t<span class=\"string\">\"SELECT max(partition_name) from table_name\"</span></span><br><span class=\"line\">).first()[<span class=\"number\">0</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 当然在实际代码中不要使用 SELECT * 这种语法，这里只是为了方便起见。</span></span><br><span class=\"line\">result = spark.sql(</span><br><span class=\"line\">\t<span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">\tSELECT * FROM table_name where partition_name = &#123;partition&#125;</span></span><br><span class=\"line\"><span class=\"string\">\t\"\"\"</span>.format(partition=most_recent_date)</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p>利用Spark进行数据处理，对3TB/单一partition的数据集，花费时间为117s。在查阅相关资料<sup>[1]</sup>后我发现还有另外一种做法，通过show table的方式拿到所有的partition然后选择最新的partition。PySpark实现方法如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">most_recent_date = spark.sql(</span><br><span class=\"line\">\t<span class=\"string\">\"SHOW PARTITIONS table_name\"</span></span><br><span class=\"line\">).rdd.flatMap(</span><br><span class=\"line\">\t<span class=\"keyword\">lambda</span> x: x</span><br><span class=\"line\">).map(</span><br><span class=\"line\">\t<span class=\"keyword\">lambda</span> x: x.replace(<span class=\"string\">'partition_name='</span>, <span class=\"string\">''</span>)</span><br><span class=\"line\">).max()</span><br><span class=\"line\"></span><br><span class=\"line\">result = spark.sql(</span><br><span class=\"line\">\t<span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">\tSELECT * FROM table_name where partition_name = &#123;partition&#125;</span></span><br><span class=\"line\"><span class=\"string\">\t\"\"\"</span>.format(partition=most_recent_date)</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p>用同样的数据集进行测试，花费时间降低到了0.2s。之所以有这么大的改进，原因要从Hive的架构说起。</p>\n<h1 id=\"Hive架构\"><a href=\"#Hive架构\" class=\"headerlink\" title=\"Hive架构\"></a>Hive架构</h1><p><img src=\"/images/hive_arch.png\" alt=\"Hive Architecture\" title=\"Hive Architecture\"></p>\n<p>Hive的架构可以大致分为四层：</p>\n<ol>\n<li>用户接口 (CLI，JDBC)。用户可以通过终端交互(CLI)的方式与Hive进行连接，同时Hive也有基于JDBC (Java Database Connectivity)连接至Hive的服务；</li>\n<li>驱动引擎 Driver。Hive的驱动引擎包含了解析、编译、优化和执行，生成等过程；</li>\n<li>计算层。计算层Hive支持MapReduce，Tez，Spark等多种计算引擎；</li>\n<li>存储层。Hive数据存储包括两个方面，一个是元数据的存储，另一个是数据的持久化。</li>\n</ol>\n<p>值得注意的是，在客户端与Driver之间，存在着跨语言服务 (thrift server)，集成多种语言帮助用户调用Hive接口。接下来我们主要来看存储层。</p>\n<h2 id=\"元数据-Metadata-的存储\"><a href=\"#元数据-Metadata-的存储\" class=\"headerlink\" title=\"元数据 (Metadata) 的存储\"></a>元数据 (Metadata) 的存储</h2><p>Hive元数据主要包括表名，列和分区的属性，以及表的属性（内部表还是外部表）等等。数据库、表、分区对应HDFS下的目录。</p>\n<p>Hive的元数据默认会存在Hive自带的Derby数据库中。Derby存在的问题是多用户连接操作支持不是很好，并且数据库目录不固定，不方便管理。一般生产环境中我们使用Mysql存储元数据。Mysql与Hive之间通过metastore进行交互。</p>\n<h2 id=\"数据存储\"><a href=\"#数据存储\" class=\"headerlink\" title=\"数据存储\"></a>数据存储</h2><p><img src=\"/images/hive_data_model.png\" alt=\"Hive Data Model\" title=\"Hive Data Model\"></p>\n<p>Hive的数据存储在HDFS中，基本存储单位为表或者分区。表或者分区在Hive内部被称为SD<sup>[2]</sup> (Storage Descriptor)。SD的基本信息存储在metastore中。Hive到底层数据的查询都会转化成MapReduce或者Tez/Spark的作业。</p>\n<p>从以上介绍可以发现一点，当我们使用Hive SHOW PARTITION的时候，查询并不会跑到HDFS，而是<strong>直接与metastore进行交互拿到分区的信息</strong>，省略了MapReduce任务和各种编译、优化的环节，大大提高了查询速度。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><ol>\n<li>元数据尽量从metastore中读取，<code>SELECT *</code>并不是万金油；</li>\n<li>Hive适用于大规模数据的ETL，offline query和需要离线精确结果的场景。如果需要交互式adhoc查询最好移步Presto, Impala；</li>\n</ol>\n<h1 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h1><ul>\n<li>[1] <a href=\"https://stackoverflow.com/questions/55053218/pyspark-getting-latest-partition-from-hive-partitioned-column-logic\" target=\"_blank\" rel=\"noopener\">https://stackoverflow.com/questions/55053218/pyspark-getting-latest-partition-from-hive-partitioned-column-logic</a> “pyspark - getting Latest partition from Hive partitioned column logic”</li>\n<li>[2] <a href=\"https://www.jianshu.com/p/4ce73f4d0bd5\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/4ce73f4d0bd5</a> “Hive原理及SQL优化”</li>\n</ul>\n"},{"title":"这个月看的书 | 2020.01","date":"2020-02-18T07:34:34.000Z","description":"今年的愿望清单之一是记录自己每个月读过的书。","cover":"/images/duras.jpg","_content":"\n今年的愿望清单之一是每个月记录自己读过的书。灵感来源于一个很喜欢的公众号[大胡子阿细](https://wemp.app/accounts/1ed4d3ff-f77a-4de4-94fc-70733be026cd)。很多书理所当然也来自公众号的清单。技术类书籍值得写的会单独开一个专栏，这里就记录一些杂七杂八琐碎的东西好了。\n\n\n### 01 | 情人\n\n开始看杜拉斯完全是因为《杜拉斯谈杜拉斯》这本访谈录。我一直对极度自我甚至自恋的作家有很大的好感。去年年底回国带回了《情人》和《广岛之恋》。\n\n整本书无时无刻透露着一种克制冷静却又充满力量的叙事方式，以及强烈的个性和自恋交织而成的矛盾。杜拉斯访谈中不止一次提到这本书里有许多她自己的故事和经历的线索。这本小说莫名让我想到伍琦诗的《无声告白》。一个非常相似的地方在于，两位作者都美得让人惊艳。\n\n与其说是在写自己和中国情人的故事，不如说是一本关于自我价值，成长的审视。\n\n### 02 | 海与毒药\n\n我强烈地觉得这本书有过誉之嫌——相比于远藤周作的《深河》与《沉默》。也可能是后两部书带来的震撼太过强烈，反战题材的《海与毒药》显得没有那么深刻。一想起《深河》和《沉默》，我脑海中就涌现出背负异教徒前往恒河的背影，以及在日本监牢里目睹生死带来的压迫感。\n\n这本书讲述的是一个参与侵华战争活体实验的医生的回忆。对于色调和叙事节奏的把握有着十分浓厚的的日式风格。印象最深的是开篇一段老医生给患者进行气胸疗法的描写，精准、冷酷、专业。如果医学的突破建立在非人道实验的基础上，我们究竟应该以什么样的心态来面对？\n\n### 03 | 绿毛水怪\n\n《绿毛水怪》是一个短篇小说集的手稿，里面我个人最喜欢的是绿毛水怪和地久天长。故事讲述的是6、70年代纯真而又热烈的爱情，从王小波的其他作品中，也不常见到如此外放的诗意了。\n\n> 白天下了一场雨。可是晚上又很冷。没有风。结果是起了雨雾。天黑得很早。沿街楼房的窗户上喷着一团团白色的光。大街上，水银灯在在半天织起了冲天的白雾。人、汽车隐隐约约地出现和消失。我们走到十路汽车站旁。几盏昏暗的路灯下，人们就像在水底一样。\n\n> 我们无言地走着，妖妖忽然问我：“你看这个夜雾，我们怎么形容它呢？”我鬼使神差地做起诗来，并且马上念出来。要知道我过去根本不认为自己有一点作诗的天分。\n\n> 我说：“妖妖，你看那水银灯的灯光像什么？大团的蒲公英浮在街道的河流口，吞吐着柔软的针一样的光。”妖妖说：“好，那么我们在人行道上走呢？这昏吰的路灯呢？”\n\n> 我抬头看看路灯，它把昏黄的灯光隔着蒙蒙的雾气一直投向地面。我说：“我们好象在池塘的水底。从一个月亮走向另一个月亮。”\n\n> 妖妖忽然大惊小怪地叫起来：“陈辉，你是诗人呢！”我说：“我是诗人？不错，当然我是诗人。”\n\n> “你怎么啦？我说真的呢！你很可以做一个不坏的诗人。你有真正的诗人气质！”\n","source":"_posts/这个月看的书-2020-01.md","raw":"---\ntitle: 这个月看的书 | 2020.01\ndate: 2020-02-17 23:34:34\ntags: 读书笔记\ncategories: 这个月看的书\ndescription: 今年的愿望清单之一是记录自己每个月读过的书。\ncover: /images/duras.jpg\n---\n\n今年的愿望清单之一是每个月记录自己读过的书。灵感来源于一个很喜欢的公众号[大胡子阿细](https://wemp.app/accounts/1ed4d3ff-f77a-4de4-94fc-70733be026cd)。很多书理所当然也来自公众号的清单。技术类书籍值得写的会单独开一个专栏，这里就记录一些杂七杂八琐碎的东西好了。\n\n\n### 01 | 情人\n\n开始看杜拉斯完全是因为《杜拉斯谈杜拉斯》这本访谈录。我一直对极度自我甚至自恋的作家有很大的好感。去年年底回国带回了《情人》和《广岛之恋》。\n\n整本书无时无刻透露着一种克制冷静却又充满力量的叙事方式，以及强烈的个性和自恋交织而成的矛盾。杜拉斯访谈中不止一次提到这本书里有许多她自己的故事和经历的线索。这本小说莫名让我想到伍琦诗的《无声告白》。一个非常相似的地方在于，两位作者都美得让人惊艳。\n\n与其说是在写自己和中国情人的故事，不如说是一本关于自我价值，成长的审视。\n\n### 02 | 海与毒药\n\n我强烈地觉得这本书有过誉之嫌——相比于远藤周作的《深河》与《沉默》。也可能是后两部书带来的震撼太过强烈，反战题材的《海与毒药》显得没有那么深刻。一想起《深河》和《沉默》，我脑海中就涌现出背负异教徒前往恒河的背影，以及在日本监牢里目睹生死带来的压迫感。\n\n这本书讲述的是一个参与侵华战争活体实验的医生的回忆。对于色调和叙事节奏的把握有着十分浓厚的的日式风格。印象最深的是开篇一段老医生给患者进行气胸疗法的描写，精准、冷酷、专业。如果医学的突破建立在非人道实验的基础上，我们究竟应该以什么样的心态来面对？\n\n### 03 | 绿毛水怪\n\n《绿毛水怪》是一个短篇小说集的手稿，里面我个人最喜欢的是绿毛水怪和地久天长。故事讲述的是6、70年代纯真而又热烈的爱情，从王小波的其他作品中，也不常见到如此外放的诗意了。\n\n> 白天下了一场雨。可是晚上又很冷。没有风。结果是起了雨雾。天黑得很早。沿街楼房的窗户上喷着一团团白色的光。大街上，水银灯在在半天织起了冲天的白雾。人、汽车隐隐约约地出现和消失。我们走到十路汽车站旁。几盏昏暗的路灯下，人们就像在水底一样。\n\n> 我们无言地走着，妖妖忽然问我：“你看这个夜雾，我们怎么形容它呢？”我鬼使神差地做起诗来，并且马上念出来。要知道我过去根本不认为自己有一点作诗的天分。\n\n> 我说：“妖妖，你看那水银灯的灯光像什么？大团的蒲公英浮在街道的河流口，吞吐着柔软的针一样的光。”妖妖说：“好，那么我们在人行道上走呢？这昏吰的路灯呢？”\n\n> 我抬头看看路灯，它把昏黄的灯光隔着蒙蒙的雾气一直投向地面。我说：“我们好象在池塘的水底。从一个月亮走向另一个月亮。”\n\n> 妖妖忽然大惊小怪地叫起来：“陈辉，你是诗人呢！”我说：“我是诗人？不错，当然我是诗人。”\n\n> “你怎么啦？我说真的呢！你很可以做一个不坏的诗人。你有真正的诗人气质！”\n","slug":"这个月看的书-2020-01","published":1,"updated":"2020-02-19T08:35:09.817Z","_id":"ck6rmzs7i0000rt92fh38hciy","comments":1,"layout":"post","photos":[],"link":"","content":"<p>今年的愿望清单之一是每个月记录自己读过的书。灵感来源于一个很喜欢的公众号<a href=\"https://wemp.app/accounts/1ed4d3ff-f77a-4de4-94fc-70733be026cd\" target=\"_blank\" rel=\"noopener\">大胡子阿细</a>。很多书理所当然也来自公众号的清单。技术类书籍值得写的会单独开一个专栏，这里就记录一些杂七杂八琐碎的东西好了。</p>\n<h3 id=\"01-情人\"><a href=\"#01-情人\" class=\"headerlink\" title=\"01 | 情人\"></a>01 | 情人</h3><p>开始看杜拉斯完全是因为《杜拉斯谈杜拉斯》这本访谈录。我一直对极度自我甚至自恋的作家有很大的好感。去年年底回国带回了《情人》和《广岛之恋》。</p>\n<p>整本书无时无刻透露着一种克制冷静却又充满力量的叙事方式，以及强烈的个性和自恋交织而成的矛盾。杜拉斯访谈中不止一次提到这本书里有许多她自己的故事和经历的线索。这本小说莫名让我想到伍琦诗的《无声告白》。一个非常相似的地方在于，两位作者都美得让人惊艳。</p>\n<p>与其说是在写自己和中国情人的故事，不如说是一本关于自我价值，成长的审视。</p>\n<h3 id=\"02-海与毒药\"><a href=\"#02-海与毒药\" class=\"headerlink\" title=\"02 | 海与毒药\"></a>02 | 海与毒药</h3><p>我强烈地觉得这本书有过誉之嫌——相比于远藤周作的《深河》与《沉默》。也可能是后两部书带来的震撼太过强烈，反战题材的《海与毒药》显得没有那么深刻。一想起《深河》和《沉默》，我脑海中就涌现出背负异教徒前往恒河的背影，以及在日本监牢里目睹生死带来的压迫感。</p>\n<p>这本书讲述的是一个参与侵华战争活体实验的医生的回忆。对于色调和叙事节奏的把握有着十分浓厚的的日式风格。印象最深的是开篇一段老医生给患者进行气胸疗法的描写，精准、冷酷、专业。如果医学的突破建立在非人道实验的基础上，我们究竟应该以什么样的心态来面对？</p>\n<h3 id=\"03-绿毛水怪\"><a href=\"#03-绿毛水怪\" class=\"headerlink\" title=\"03 | 绿毛水怪\"></a>03 | 绿毛水怪</h3><p>《绿毛水怪》是一个短篇小说集的手稿，里面我个人最喜欢的是绿毛水怪和地久天长。故事讲述的是6、70年代纯真而又热烈的爱情，从王小波的其他作品中，也不常见到如此外放的诗意了。</p>\n<blockquote>\n<p>白天下了一场雨。可是晚上又很冷。没有风。结果是起了雨雾。天黑得很早。沿街楼房的窗户上喷着一团团白色的光。大街上，水银灯在在半天织起了冲天的白雾。人、汽车隐隐约约地出现和消失。我们走到十路汽车站旁。几盏昏暗的路灯下，人们就像在水底一样。</p>\n</blockquote>\n<blockquote>\n<p>我们无言地走着，妖妖忽然问我：“你看这个夜雾，我们怎么形容它呢？”我鬼使神差地做起诗来，并且马上念出来。要知道我过去根本不认为自己有一点作诗的天分。</p>\n</blockquote>\n<blockquote>\n<p>我说：“妖妖，你看那水银灯的灯光像什么？大团的蒲公英浮在街道的河流口，吞吐着柔软的针一样的光。”妖妖说：“好，那么我们在人行道上走呢？这昏吰的路灯呢？”</p>\n</blockquote>\n<blockquote>\n<p>我抬头看看路灯，它把昏黄的灯光隔着蒙蒙的雾气一直投向地面。我说：“我们好象在池塘的水底。从一个月亮走向另一个月亮。”</p>\n</blockquote>\n<blockquote>\n<p>妖妖忽然大惊小怪地叫起来：“陈辉，你是诗人呢！”我说：“我是诗人？不错，当然我是诗人。”</p>\n</blockquote>\n<blockquote>\n<p>“你怎么啦？我说真的呢！你很可以做一个不坏的诗人。你有真正的诗人气质！”</p>\n</blockquote>\n","site":{"data":{"butterfly":{"menu":{"首页":"/ || fa fa-home","归档":"/archives/ || fa fa-archive","标签":"/tags/ || fa fa-tags","分类":"/categories/ || fa fa-folder-open","关于":"/about/ || fa fa-heart"},"favicon":"/img/favicon.ico","highlight_theme":"light","highlight_copy":true,"highlight_lang":true,"highlight_shrink":false,"code_word_wrap":true,"copy":{"enable":true,"copyright":false},"social":{"fa fa-github":"https://github.com/DavidCorn","fa fa-envelope":"mailto:qiyaoq@gmail.com"},"algolia_search":{"enable":false,"hits":{"per_page":6},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}"}},"mathjax":{"enable":false},"katex":{"enable":false,"hide_scrollbar":true},"google_analytics":null,"avatar":"/images/avatar.png","top_img":"https://i.loli.net/2019/05/22/5ce53eb6dc82757840.jpg","default_top_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/top_img_index.jpg","default_cover":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/cover/default_bg.png","archive_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/Photo/archive.jpg","tag_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/tag-bg.png","category_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/category-bg","movies_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN/Photo/movie.jpg","lodding_bg":{"flink":"/img/friend_404.gif","post_page":"/img/404.jpg"},"post_meta":{"date_type":"both","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":true},"auto_open_sidebar":{"enable":true},"post_copyright":{"enable":false,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":false,"length":150},"addThis":{"enable":false,"pubid":null},"sharejs":{"enable":false,"sites":"facebook,twitter,wechat,weibo,qq"},"addtoany":{"enable":false,"item":["facebook","twitter","wechat","sina_weibo","facebook_messenger","email","copy_link"]},"disqus":{"enable":true,"shortname":"qinqiyao"},"valine":{"enable":false,"appId":null,"appKey":null,"notify":false,"verify":false,"pageSize":10,"avatar":"monsterid","lang":"en","placeholder":"Please leave your footprints","guest_info":"nick,mail,link","bg":"/img/comment_bg.png"},"since":2019,"footer_custom_text":"嗝。","footer_copyright":{"enable":false},"ICP":{"enable":false,"url":null,"text":null,"icon":"/img/icp.png"},"google_site_verification":"PWQ1yLiuc_CfANusvurPYyvSg56SLMe3Ar6XvPcn5fw","bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"Flink":{"headline":"友情鏈接","info_headline":"我的Blog資料","name":"Blog 名字： JerryC","address":"Blog 地址： https://jerryc.me/","avatar":"Blog 頭像： https://jerryc.me/img/avatar.png","info":"Blog 簡介： 今日事,今日畢","comment":"如果需要交換友鏈,請留言"},"reward":{"enable":true,"QR_code":[{"itemlist":{"img":"/images/wechatpay.jpg","text":"微信"}}]},"related_post":{"enable":true,"limit":6},"index_site_info_top":null,"index_top_img_height":null,"category_ui":null,"tag_ui":null,"background":null,"footer_bg":true,"canvas_ribbon":{"enable":false,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false,"mobile":false},"canvas_ribbon_piao":{"enable":false,"mobile":false},"canvas_nest":{"enable":true,"color":"0,0,255","opacity":0.7,"zIndex":-1,"count":99,"mobile":false},"activate_power_mode":{"enable":false},"fireworks":{"enable":false},"click_heart":{"enable":false},"ClickShowText":{"enable":false,"text":["富强","民主","文明","和谐","自由","平等","公正","法治","爱国","敬业","诚信","友善"],"fontSize":"15px"},"avatar_effect":false,"display_mode":"light","post_beautify":{"enable":false,"title-prefix-icon":"\\f0c1","title-prefix-icon-color":"#F47466"},"font":{"enable":false,"font-family":"Lato, Helvetica Neue For Number, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, PingFang SC, Hiragino Sans GB, MicrMicrosoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif","code-font":"consolas, Menlo, \"PingFang SC\", \"Microsoft YaHei\", monospace, Helvetica Neue For Number"},"blog_title_font":{"font_link":"https://fonts.googleapis.com/css?family=Titillium+Web","font-family":"Titillium Web, PingFang SC, Hiragino Sans GB, \"Microsoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif"},"hr":{"enable":false,"icon":"\\f21c","icon-top":"-20px"},"subtitle":{"enable":true,"source":false,"sub":["Tech&#44;","Live&#44;","Fun&#44;","etc."]},"aside":{"position":"right","card_author":true,"card_announcement":true,"card_recent_post":true,"card_categories":true,"card_tags":true,"card_archives":true,"card_webinfo":true},"announcement":{"content":"欢迎留言，打赏，转载么么哒"},"busuanzi":{"site_uv":true,"site_pv":true,"page_pv":true},"runtimeshow":{"enable":true,"start_date":"12/11/2019 00:00:00"},"translate":{"enable":false,"default":"繁","defaultEncoding":2,"translateDelay":0,"cookieDomain":"https://xxx/","msgToTraditionalChinese":"繁","msgToSimplifiedChinese":"简"},"readmode":{"enable":true},"darkmode":{"enable":true},"autoChangeMode":1,"medium_zoom":{"enable":true},"snackbar":{"enable":false,"position":"bottom-left","bg_light":"#49b1f5","bg_dark":"#2d3035"},"baidu_push":{"enable":false},"instantpage":{"enable":true},"note":{"style":"flat","icons":true,"border_radius":3,"light_bg_offset":0},"lazyload":{"enable":true},"canonical":true,"disable_baidu_transformation":true,"twitter_meta":true,"Open_Graph_meta":true,"CDN_USE":{"css":["/css/index.css","https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"],"js":["https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","/js/utils.js","/js/main.js"]},"CDN":{"blueimp_md5":"https://cdn.jsdelivr.net/npm/blueimp-md5@2.10.0/js/md5.min.js","gitalk":"https://cdn.jsdelivr.net/npm/gitalk@latest/dist/gitalk.min.js","gitalk_css":"https://cdn.jsdelivr.net/npm/gitalk/dist/gitalk.min.css","valine":"https://cdn.jsdelivr.net/npm/valine/dist/Valine.min.js","addtoany":"https://static.addtoany.com/menu/page.js","sharejs":"https://cdn.jsdelivr.net/npm/social-share.js@1.0.16/dist/js/social-share.min.js","sharejs_css":"https://cdn.jsdelivr.net/npm/social-share.js@1.0.16/dist/css/share.min.css","algolia_search":"https://cdn.jsdelivr.net/npm/instantsearch.js@2.1.1/dist/instantsearch.min.js","algolia_search_css":"https://cdn.jsdelivr.net/npm/instantsearch.js@2.1.1/dist/instantsearch.min.css","algolia_js":"/js/search/algolia.js","local_search":"/js/search/local-search.js","mathjax":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML","katex":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css","katex_copytex":"https://cdn.jsdelivr.net/npm/katex-copytex@latest/dist/katex-copytex.min.js","katex_copytex_css":"https://cdn.jsdelivr.net/npm/katex-copytex@latest/dist/katex-copytex.min.css","busuanzi":"//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js","canvas_ribbon":"/js/third-party/canvas-ribbon.js","canvas_ribbon_piao":"/js/third-party/piao.js","canvas_nest":"/js/third-party/canvas-nest.js","lazyload":"https://cdn.jsdelivr.net/npm/lazysizes@latest/lazysizes.min.js","instantpage":"https://cdn.jsdelivr.net/npm/instant.page@latest/instantpage.min.js","typed":"https://cdn.jsdelivr.net/npm/typed.js","js_cookies":"https://cdn.jsdelivr.net/npm/js-cookie/dist/js.cookie.min.js","fancybox_css":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.css","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","medium_zoom":"https://cdn.jsdelivr.net/npm/medium-zoom/dist/medium-zoom.min.js","snackbar_css":"https://cdn.jsdelivr.net/npm/node-snackbar@0.1.15/dist/snackbar.min.css","snackbar":"https://cdn.jsdelivr.net/npm/node-snackbar@0.1.15/dist/snackbar.min.js","anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","activate_power_mode":"/js/third-party/activate-power-mode.js","fireworks":"/js/third-party/fireworks.js","click_heart":"/js/third-party/click_heart.js","ClickShowText":"/js/third-party/ClickShowText.js","translate":"/js/tw_cn.js","runtimeshow":"js/runtimeshow.js"}}}},"excerpt":"","more":"<p>今年的愿望清单之一是每个月记录自己读过的书。灵感来源于一个很喜欢的公众号<a href=\"https://wemp.app/accounts/1ed4d3ff-f77a-4de4-94fc-70733be026cd\" target=\"_blank\" rel=\"noopener\">大胡子阿细</a>。很多书理所当然也来自公众号的清单。技术类书籍值得写的会单独开一个专栏，这里就记录一些杂七杂八琐碎的东西好了。</p>\n<h3 id=\"01-情人\"><a href=\"#01-情人\" class=\"headerlink\" title=\"01 | 情人\"></a>01 | 情人</h3><p>开始看杜拉斯完全是因为《杜拉斯谈杜拉斯》这本访谈录。我一直对极度自我甚至自恋的作家有很大的好感。去年年底回国带回了《情人》和《广岛之恋》。</p>\n<p>整本书无时无刻透露着一种克制冷静却又充满力量的叙事方式，以及强烈的个性和自恋交织而成的矛盾。杜拉斯访谈中不止一次提到这本书里有许多她自己的故事和经历的线索。这本小说莫名让我想到伍琦诗的《无声告白》。一个非常相似的地方在于，两位作者都美得让人惊艳。</p>\n<p>与其说是在写自己和中国情人的故事，不如说是一本关于自我价值，成长的审视。</p>\n<h3 id=\"02-海与毒药\"><a href=\"#02-海与毒药\" class=\"headerlink\" title=\"02 | 海与毒药\"></a>02 | 海与毒药</h3><p>我强烈地觉得这本书有过誉之嫌——相比于远藤周作的《深河》与《沉默》。也可能是后两部书带来的震撼太过强烈，反战题材的《海与毒药》显得没有那么深刻。一想起《深河》和《沉默》，我脑海中就涌现出背负异教徒前往恒河的背影，以及在日本监牢里目睹生死带来的压迫感。</p>\n<p>这本书讲述的是一个参与侵华战争活体实验的医生的回忆。对于色调和叙事节奏的把握有着十分浓厚的的日式风格。印象最深的是开篇一段老医生给患者进行气胸疗法的描写，精准、冷酷、专业。如果医学的突破建立在非人道实验的基础上，我们究竟应该以什么样的心态来面对？</p>\n<h3 id=\"03-绿毛水怪\"><a href=\"#03-绿毛水怪\" class=\"headerlink\" title=\"03 | 绿毛水怪\"></a>03 | 绿毛水怪</h3><p>《绿毛水怪》是一个短篇小说集的手稿，里面我个人最喜欢的是绿毛水怪和地久天长。故事讲述的是6、70年代纯真而又热烈的爱情，从王小波的其他作品中，也不常见到如此外放的诗意了。</p>\n<blockquote>\n<p>白天下了一场雨。可是晚上又很冷。没有风。结果是起了雨雾。天黑得很早。沿街楼房的窗户上喷着一团团白色的光。大街上，水银灯在在半天织起了冲天的白雾。人、汽车隐隐约约地出现和消失。我们走到十路汽车站旁。几盏昏暗的路灯下，人们就像在水底一样。</p>\n</blockquote>\n<blockquote>\n<p>我们无言地走着，妖妖忽然问我：“你看这个夜雾，我们怎么形容它呢？”我鬼使神差地做起诗来，并且马上念出来。要知道我过去根本不认为自己有一点作诗的天分。</p>\n</blockquote>\n<blockquote>\n<p>我说：“妖妖，你看那水银灯的灯光像什么？大团的蒲公英浮在街道的河流口，吞吐着柔软的针一样的光。”妖妖说：“好，那么我们在人行道上走呢？这昏吰的路灯呢？”</p>\n</blockquote>\n<blockquote>\n<p>我抬头看看路灯，它把昏黄的灯光隔着蒙蒙的雾气一直投向地面。我说：“我们好象在池塘的水底。从一个月亮走向另一个月亮。”</p>\n</blockquote>\n<blockquote>\n<p>妖妖忽然大惊小怪地叫起来：“陈辉，你是诗人呢！”我说：“我是诗人？不错，当然我是诗人。”</p>\n</blockquote>\n<blockquote>\n<p>“你怎么啦？我说真的呢！你很可以做一个不坏的诗人。你有真正的诗人气质！”</p>\n</blockquote>\n"},{"title":"这个月看的书 | 2020.02","date":"2020-03-02T06:54:16.000Z","description":"今年的愿望清单之一是记录自己每个月读过的书。","cover":"/images/liulizhuang.png","_content":"\n这个月只看了一本 。。。\n\n### 01 | 六里庄遗事\n\n这本书虚构了一个叫做六里庄的村子，用五百多个小故事勾勒出了形形色色的人生轶事。作者在一篇文章中曾讲过自己读很多笔记小说的时候，很多都只有十分平常的记录，某年某月某事，如此而已。比起关注事件本身，作者更希望去抓取记录非决定性瞬间。那些平常的时刻蕴含着更大、更深邃的力量。我们的人生里处处都是闲笔，而我们就存在于这些闲笔里。\n\n这本书里大多数故事都是口语风格的对话，一两百字虽然精短但兼具温度和重量。许许多多个零碎的故事读完，一个云山雾绕的小村庄就神奇地在脑海中浮现了出来：活了千百年的杨温柔，总是遇到善良温柔鬼混的金道士，喜欢写烂俗诗词的石胖子还有为螃蟹超度的法聪小僧。\n\n摘录一个最五味杂陈的小故事结尾吧。\n\n> 吴不利他爸吴伯昭三十三岁那年犯起了腰腿疼，起初是麻，后来是瘸，三五个月就起不来床了。 \n> \n> 吴不利有个表舅叫徐松年，本来走动并不多，但自打吴伯昭没法下床，就常来探望。有时候留下吃顿饭，有时候看看就走。最后一次来是腊月初七。腊月初九那天晚上吴不利他妈给吴伯昭端来一碗药，说药给你熬好了，你喝了吧。吴伯昭瞧了药一眼，又瞧了她一眼，说你放下吧，我一会儿就喝。吴不利他妈说赶紧喝吧，一会儿就凉了。吴伯昭说没事，凉了一样治病。又说，你放心。 \n> \n> 那碗药，吴伯昭第二天早上才喝。寒冬腊月，碗里已经冻上冰碴儿了，吴伯昭就慢慢地喝，一小口一小口地抿，含在嘴里，含热了再咽下去。好容易喝完了，就喊吴不利他妈，说兰儿啊，你过来拿碗吧，药我喝完了。吴不利他妈过来，说：非得今天早上再喝，冰凉凉的，喝了多难受。吴伯昭乐了，说：嘿嘿，我怕昨晚喝了，你守着尸首睡一夜，害怕。又说：你往药里放他拿来的那包东西，我瞧见了。吴不利他妈看着手里的碗，说：那你还喝？吴伯昭又乐了：喝呗，你放都放了。 ","source":"_posts/这个月看的书-2020-02.md","raw":"---\ntitle: 这个月看的书 | 2020.02\ndate: 2020-03-01 22:54:16\ntags: 读书笔记\ncategories: 这个月看的书\ndescription: 今年的愿望清单之一是记录自己每个月读过的书。\ncover: /images/liulizhuang.png\n---\n\n这个月只看了一本 。。。\n\n### 01 | 六里庄遗事\n\n这本书虚构了一个叫做六里庄的村子，用五百多个小故事勾勒出了形形色色的人生轶事。作者在一篇文章中曾讲过自己读很多笔记小说的时候，很多都只有十分平常的记录，某年某月某事，如此而已。比起关注事件本身，作者更希望去抓取记录非决定性瞬间。那些平常的时刻蕴含着更大、更深邃的力量。我们的人生里处处都是闲笔，而我们就存在于这些闲笔里。\n\n这本书里大多数故事都是口语风格的对话，一两百字虽然精短但兼具温度和重量。许许多多个零碎的故事读完，一个云山雾绕的小村庄就神奇地在脑海中浮现了出来：活了千百年的杨温柔，总是遇到善良温柔鬼混的金道士，喜欢写烂俗诗词的石胖子还有为螃蟹超度的法聪小僧。\n\n摘录一个最五味杂陈的小故事结尾吧。\n\n> 吴不利他爸吴伯昭三十三岁那年犯起了腰腿疼，起初是麻，后来是瘸，三五个月就起不来床了。 \n> \n> 吴不利有个表舅叫徐松年，本来走动并不多，但自打吴伯昭没法下床，就常来探望。有时候留下吃顿饭，有时候看看就走。最后一次来是腊月初七。腊月初九那天晚上吴不利他妈给吴伯昭端来一碗药，说药给你熬好了，你喝了吧。吴伯昭瞧了药一眼，又瞧了她一眼，说你放下吧，我一会儿就喝。吴不利他妈说赶紧喝吧，一会儿就凉了。吴伯昭说没事，凉了一样治病。又说，你放心。 \n> \n> 那碗药，吴伯昭第二天早上才喝。寒冬腊月，碗里已经冻上冰碴儿了，吴伯昭就慢慢地喝，一小口一小口地抿，含在嘴里，含热了再咽下去。好容易喝完了，就喊吴不利他妈，说兰儿啊，你过来拿碗吧，药我喝完了。吴不利他妈过来，说：非得今天早上再喝，冰凉凉的，喝了多难受。吴伯昭乐了，说：嘿嘿，我怕昨晚喝了，你守着尸首睡一夜，害怕。又说：你往药里放他拿来的那包东西，我瞧见了。吴不利他妈看着手里的碗，说：那你还喝？吴伯昭又乐了：喝呗，你放都放了。 ","slug":"这个月看的书-2020-02","published":1,"updated":"2020-03-02T08:00:08.075Z","_id":"ck7a69ra30000sy927zyxhdc7","comments":1,"layout":"post","photos":[],"link":"","content":"<p>这个月只看了一本 。。。</p>\n<h3 id=\"01-六里庄遗事\"><a href=\"#01-六里庄遗事\" class=\"headerlink\" title=\"01 | 六里庄遗事\"></a>01 | 六里庄遗事</h3><p>这本书虚构了一个叫做六里庄的村子，用五百多个小故事勾勒出了形形色色的人生轶事。作者在一篇文章中曾讲过自己读很多笔记小说的时候，很多都只有十分平常的记录，某年某月某事，如此而已。比起关注事件本身，作者更希望去抓取记录非决定性瞬间。那些平常的时刻蕴含着更大、更深邃的力量。我们的人生里处处都是闲笔，而我们就存在于这些闲笔里。</p>\n<p>这本书里大多数故事都是口语风格的对话，一两百字虽然精短但兼具温度和重量。许许多多个零碎的故事读完，一个云山雾绕的小村庄就神奇地在脑海中浮现了出来：活了千百年的杨温柔，总是遇到善良温柔鬼混的金道士，喜欢写烂俗诗词的石胖子还有为螃蟹超度的法聪小僧。</p>\n<p>摘录一个最五味杂陈的小故事结尾吧。</p>\n<blockquote>\n<p>吴不利他爸吴伯昭三十三岁那年犯起了腰腿疼，起初是麻，后来是瘸，三五个月就起不来床了。 </p>\n<p>吴不利有个表舅叫徐松年，本来走动并不多，但自打吴伯昭没法下床，就常来探望。有时候留下吃顿饭，有时候看看就走。最后一次来是腊月初七。腊月初九那天晚上吴不利他妈给吴伯昭端来一碗药，说药给你熬好了，你喝了吧。吴伯昭瞧了药一眼，又瞧了她一眼，说你放下吧，我一会儿就喝。吴不利他妈说赶紧喝吧，一会儿就凉了。吴伯昭说没事，凉了一样治病。又说，你放心。 </p>\n<p>那碗药，吴伯昭第二天早上才喝。寒冬腊月，碗里已经冻上冰碴儿了，吴伯昭就慢慢地喝，一小口一小口地抿，含在嘴里，含热了再咽下去。好容易喝完了，就喊吴不利他妈，说兰儿啊，你过来拿碗吧，药我喝完了。吴不利他妈过来，说：非得今天早上再喝，冰凉凉的，喝了多难受。吴伯昭乐了，说：嘿嘿，我怕昨晚喝了，你守着尸首睡一夜，害怕。又说：你往药里放他拿来的那包东西，我瞧见了。吴不利他妈看着手里的碗，说：那你还喝？吴伯昭又乐了：喝呗，你放都放了。 </p>\n</blockquote>\n","site":{"data":{"butterfly":{"menu":{"首页":"/ || fa fa-home","归档":"/archives/ || fa fa-archive","标签":"/tags/ || fa fa-tags","分类":"/categories/ || fa fa-folder-open","关于":"/about/ || fa fa-heart"},"favicon":"/img/favicon.ico","highlight_theme":"light","highlight_copy":true,"highlight_lang":true,"highlight_shrink":false,"code_word_wrap":true,"copy":{"enable":true,"copyright":false},"social":{"fa fa-github":"https://github.com/DavidCorn","fa fa-envelope":"mailto:qiyaoq@gmail.com"},"algolia_search":{"enable":false,"hits":{"per_page":6},"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}},"local_search":{"enable":true,"labels":{"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}"}},"mathjax":{"enable":false},"katex":{"enable":false,"hide_scrollbar":true},"google_analytics":null,"avatar":"/images/avatar.png","top_img":"https://i.loli.net/2019/05/22/5ce53eb6dc82757840.jpg","default_top_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/top_img_index.jpg","default_cover":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/cover/default_bg.png","archive_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN@latest/Photo/archive.jpg","tag_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/tag-bg.png","category_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN/img/category-bg","movies_img":"https://cdn.jsdelivr.net/gh/jerryc127/CDN/Photo/movie.jpg","lodding_bg":{"flink":"/img/friend_404.gif","post_page":"/img/404.jpg"},"post_meta":{"date_type":"both","categories":true,"tags":true},"wordcount":{"enable":false},"toc":{"enable":true,"number":true},"auto_open_sidebar":{"enable":true},"post_copyright":{"enable":false,"license":"CC BY-NC-SA 4.0","license_url":"https://creativecommons.org/licenses/by-nc-sa/4.0/"},"auto_excerpt":{"enable":false,"length":150},"addThis":{"enable":false,"pubid":null},"sharejs":{"enable":false,"sites":"facebook,twitter,wechat,weibo,qq"},"addtoany":{"enable":false,"item":["facebook","twitter","wechat","sina_weibo","facebook_messenger","email","copy_link"]},"disqus":{"enable":true,"shortname":"qinqiyao"},"valine":{"enable":false,"appId":null,"appKey":null,"notify":false,"verify":false,"pageSize":10,"avatar":"monsterid","lang":"en","placeholder":"Please leave your footprints","guest_info":"nick,mail,link","bg":"/img/comment_bg.png"},"since":2019,"footer_custom_text":"嗝。","footer_copyright":{"enable":false},"ICP":{"enable":false,"url":null,"text":null,"icon":"/img/icp.png"},"google_site_verification":"PWQ1yLiuc_CfANusvurPYyvSg56SLMe3Ar6XvPcn5fw","bing_site_verification":null,"baidu_site_verification":null,"qihu_site_verification":null,"Flink":{"headline":"友情鏈接","info_headline":"我的Blog資料","name":"Blog 名字： JerryC","address":"Blog 地址： https://jerryc.me/","avatar":"Blog 頭像： https://jerryc.me/img/avatar.png","info":"Blog 簡介： 今日事,今日畢","comment":"如果需要交換友鏈,請留言"},"reward":{"enable":true,"QR_code":[{"itemlist":{"img":"/images/wechatpay.jpg","text":"微信"}}]},"related_post":{"enable":true,"limit":6},"index_site_info_top":null,"index_top_img_height":null,"category_ui":null,"tag_ui":null,"background":null,"footer_bg":true,"canvas_ribbon":{"enable":false,"size":150,"alpha":0.6,"zIndex":-1,"click_to_change":false,"mobile":false},"canvas_ribbon_piao":{"enable":false,"mobile":false},"canvas_nest":{"enable":true,"color":"0,0,255","opacity":0.7,"zIndex":-1,"count":99,"mobile":false},"activate_power_mode":{"enable":false},"fireworks":{"enable":false},"click_heart":{"enable":false},"ClickShowText":{"enable":false,"text":["富强","民主","文明","和谐","自由","平等","公正","法治","爱国","敬业","诚信","友善"],"fontSize":"15px"},"avatar_effect":false,"display_mode":"light","post_beautify":{"enable":false,"title-prefix-icon":"\\f0c1","title-prefix-icon-color":"#F47466"},"font":{"enable":false,"font-family":"Lato, Helvetica Neue For Number, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, PingFang SC, Hiragino Sans GB, MicrMicrosoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif","code-font":"consolas, Menlo, \"PingFang SC\", \"Microsoft YaHei\", monospace, Helvetica Neue For Number"},"blog_title_font":{"font_link":"https://fonts.googleapis.com/css?family=Titillium+Web","font-family":"Titillium Web, PingFang SC, Hiragino Sans GB, \"Microsoft YaHei\", Helvetica Neue, Helvetica, Arial, sans-serif"},"hr":{"enable":false,"icon":"\\f21c","icon-top":"-20px"},"subtitle":{"enable":true,"source":false,"sub":["Tech&#44;","Live&#44;","Fun&#44;","etc."]},"aside":{"position":"right","card_author":true,"card_announcement":true,"card_recent_post":true,"card_categories":true,"card_tags":true,"card_archives":true,"card_webinfo":true},"announcement":{"content":"欢迎留言，打赏，转载么么哒"},"busuanzi":{"site_uv":true,"site_pv":true,"page_pv":true},"runtimeshow":{"enable":true,"start_date":"12/11/2019 00:00:00"},"translate":{"enable":false,"default":"繁","defaultEncoding":2,"translateDelay":0,"cookieDomain":"https://xxx/","msgToTraditionalChinese":"繁","msgToSimplifiedChinese":"简"},"readmode":{"enable":true},"darkmode":{"enable":true},"autoChangeMode":1,"medium_zoom":{"enable":true},"snackbar":{"enable":false,"position":"bottom-left","bg_light":"#49b1f5","bg_dark":"#2d3035"},"baidu_push":{"enable":false},"instantpage":{"enable":true},"note":{"style":"flat","icons":true,"border_radius":3,"light_bg_offset":0},"lazyload":{"enable":true},"canonical":true,"disable_baidu_transformation":true,"twitter_meta":true,"Open_Graph_meta":true,"CDN_USE":{"css":["/css/index.css","https://cdn.jsdelivr.net/npm/font-awesome@latest/css/font-awesome.min.css"],"js":["https://cdn.jsdelivr.net/npm/jquery@latest/dist/jquery.min.js","/js/utils.js","/js/main.js"]},"CDN":{"blueimp_md5":"https://cdn.jsdelivr.net/npm/blueimp-md5@2.10.0/js/md5.min.js","gitalk":"https://cdn.jsdelivr.net/npm/gitalk@latest/dist/gitalk.min.js","gitalk_css":"https://cdn.jsdelivr.net/npm/gitalk/dist/gitalk.min.css","valine":"https://cdn.jsdelivr.net/npm/valine/dist/Valine.min.js","addtoany":"https://static.addtoany.com/menu/page.js","sharejs":"https://cdn.jsdelivr.net/npm/social-share.js@1.0.16/dist/js/social-share.min.js","sharejs_css":"https://cdn.jsdelivr.net/npm/social-share.js@1.0.16/dist/css/share.min.css","algolia_search":"https://cdn.jsdelivr.net/npm/instantsearch.js@2.1.1/dist/instantsearch.min.js","algolia_search_css":"https://cdn.jsdelivr.net/npm/instantsearch.js@2.1.1/dist/instantsearch.min.css","algolia_js":"/js/search/algolia.js","local_search":"/js/search/local-search.js","mathjax":"https://cdn.jsdelivr.net/npm/mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML","katex":"https://cdn.jsdelivr.net/npm/katex@latest/dist/katex.min.css","katex_copytex":"https://cdn.jsdelivr.net/npm/katex-copytex@latest/dist/katex-copytex.min.js","katex_copytex_css":"https://cdn.jsdelivr.net/npm/katex-copytex@latest/dist/katex-copytex.min.css","busuanzi":"//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js","canvas_ribbon":"/js/third-party/canvas-ribbon.js","canvas_ribbon_piao":"/js/third-party/piao.js","canvas_nest":"/js/third-party/canvas-nest.js","lazyload":"https://cdn.jsdelivr.net/npm/lazysizes@latest/lazysizes.min.js","instantpage":"https://cdn.jsdelivr.net/npm/instant.page@latest/instantpage.min.js","typed":"https://cdn.jsdelivr.net/npm/typed.js","js_cookies":"https://cdn.jsdelivr.net/npm/js-cookie/dist/js.cookie.min.js","fancybox_css":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.css","fancybox":"https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@latest/dist/jquery.fancybox.min.js","medium_zoom":"https://cdn.jsdelivr.net/npm/medium-zoom/dist/medium-zoom.min.js","snackbar_css":"https://cdn.jsdelivr.net/npm/node-snackbar@0.1.15/dist/snackbar.min.css","snackbar":"https://cdn.jsdelivr.net/npm/node-snackbar@0.1.15/dist/snackbar.min.js","anime":"https://cdn.jsdelivr.net/npm/animejs@latest/anime.min.js","activate_power_mode":"/js/third-party/activate-power-mode.js","fireworks":"/js/third-party/fireworks.js","click_heart":"/js/third-party/click_heart.js","ClickShowText":"/js/third-party/ClickShowText.js","translate":"/js/tw_cn.js","runtimeshow":"js/runtimeshow.js"}}}},"excerpt":"","more":"<p>这个月只看了一本 。。。</p>\n<h3 id=\"01-六里庄遗事\"><a href=\"#01-六里庄遗事\" class=\"headerlink\" title=\"01 | 六里庄遗事\"></a>01 | 六里庄遗事</h3><p>这本书虚构了一个叫做六里庄的村子，用五百多个小故事勾勒出了形形色色的人生轶事。作者在一篇文章中曾讲过自己读很多笔记小说的时候，很多都只有十分平常的记录，某年某月某事，如此而已。比起关注事件本身，作者更希望去抓取记录非决定性瞬间。那些平常的时刻蕴含着更大、更深邃的力量。我们的人生里处处都是闲笔，而我们就存在于这些闲笔里。</p>\n<p>这本书里大多数故事都是口语风格的对话，一两百字虽然精短但兼具温度和重量。许许多多个零碎的故事读完，一个云山雾绕的小村庄就神奇地在脑海中浮现了出来：活了千百年的杨温柔，总是遇到善良温柔鬼混的金道士，喜欢写烂俗诗词的石胖子还有为螃蟹超度的法聪小僧。</p>\n<p>摘录一个最五味杂陈的小故事结尾吧。</p>\n<blockquote>\n<p>吴不利他爸吴伯昭三十三岁那年犯起了腰腿疼，起初是麻，后来是瘸，三五个月就起不来床了。 </p>\n<p>吴不利有个表舅叫徐松年，本来走动并不多，但自打吴伯昭没法下床，就常来探望。有时候留下吃顿饭，有时候看看就走。最后一次来是腊月初七。腊月初九那天晚上吴不利他妈给吴伯昭端来一碗药，说药给你熬好了，你喝了吧。吴伯昭瞧了药一眼，又瞧了她一眼，说你放下吧，我一会儿就喝。吴不利他妈说赶紧喝吧，一会儿就凉了。吴伯昭说没事，凉了一样治病。又说，你放心。 </p>\n<p>那碗药，吴伯昭第二天早上才喝。寒冬腊月，碗里已经冻上冰碴儿了，吴伯昭就慢慢地喝，一小口一小口地抿，含在嘴里，含热了再咽下去。好容易喝完了，就喊吴不利他妈，说兰儿啊，你过来拿碗吧，药我喝完了。吴不利他妈过来，说：非得今天早上再喝，冰凉凉的，喝了多难受。吴伯昭乐了，说：嘿嘿，我怕昨晚喝了，你守着尸首睡一夜，害怕。又说：你往药里放他拿来的那包东西，我瞧见了。吴不利他妈看着手里的碗，说：那你还喝？吴伯昭又乐了：喝呗，你放都放了。 </p>\n</blockquote>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ck4mhzf6e00004a921rlehbvi","category_id":"ck4mhzf6m00044a92bwrxcvmn","_id":"ck4mhzf6u000c4a92h7fjetjr"},{"post_id":"ck4mhzf6j00024a928295f3di","category_id":"ck4mhzf6r00084a92dkzq0teu","_id":"ck4mhzf6w000h4a925ngu5b49"},{"post_id":"ck4mhzf6o00064a92fbm0gxvj","category_id":"ck4mhzf6r00084a92dkzq0teu","_id":"ck4mhzf6x000j4a92b0kk5dgk"},{"post_id":"ck4mhzf6q00074a9291n9803t","category_id":"ck4mhzf6r00084a92dkzq0teu","_id":"ck4mhzf6y000k4a92goko35yb"},{"post_id":"ck4q1w2g700005r92cl5b1n94","category_id":"ck4q7gszj000g5r929x70bkgw","_id":"ck4q7gszj000h5r92frbzhaw2"},{"post_id":"ck6rmzs7i0000rt92fh38hciy","category_id":"ck6rn5b8s0000e1921wm432h7","_id":"ck6rn5b8u0001e1929aesgdpw"},{"post_id":"ck7a69ra30000sy927zyxhdc7","category_id":"ck6rn5b8s0000e1921wm432h7","_id":"ck7a69raa0002sy928tux6pjg"}],"PostTag":[{"post_id":"ck4mhzf6q00074a9291n9803t","tag_id":"ck4mhzf6n00054a92e1dj8iro","_id":"ck4mhzf6t000a4a92c0ue35i8"},{"post_id":"ck4mhzf6e00004a921rlehbvi","tag_id":"ck4mhzf6n00054a92e1dj8iro","_id":"ck4mhzf6t000b4a925czs5ghi"},{"post_id":"ck4mhzf6j00024a928295f3di","tag_id":"ck4mhzf6n00054a92e1dj8iro","_id":"ck4mhzf6v000f4a92f1e81zbp"},{"post_id":"ck4mhzf6o00064a92fbm0gxvj","tag_id":"ck4mhzf6n00054a92e1dj8iro","_id":"ck4mhzf6w000i4a921t1j2wuy"},{"post_id":"ck4q1w2g700005r92cl5b1n94","tag_id":"ck4q20l1a000a5r929sms50x3","_id":"ck4q20l1d000c5r92ejui2gvn"},{"post_id":"ck4q1w2g700005r92cl5b1n94","tag_id":"ck4q20l1c000b5r9210b55opn","_id":"ck4q20l1d000d5r927bo7b416"},{"post_id":"ck6rmzs7i0000rt92fh38hciy","tag_id":"ck6rmzs7m0001rt920z6vccgr","_id":"ck6rmzs7v0002rt9259zv31v1"},{"post_id":"ck7a69ra30000sy927zyxhdc7","tag_id":"ck6rmzs7m0001rt920z6vccgr","_id":"ck7a69raa0001sy92f0j845rc"}],"Tag":[{"name":"高并发","_id":"ck4mhzf6n00054a92e1dj8iro"},{"name":"spark","_id":"ck4q1wq8t00015r925deaatb7"},{"name":"spark, hive","_id":"ck4q1yt1400045r9267lpg3o6"},{"name":"hive","_id":"ck4q1z13d00075r926s1i2c9t"},{"name":"Apache Spark","_id":"ck4q20l1a000a5r929sms50x3"},{"name":"Hive","_id":"ck4q20l1c000b5r9210b55opn"},{"name":"读书笔记","_id":"ck6rmzs7m0001rt920z6vccgr"}]}}